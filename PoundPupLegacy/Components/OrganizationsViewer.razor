@using Microsoft.AspNetCore.WebUtilities
@using PoundPupLegacy.Services
@using PoundPupLegacy.ViewModel.Models
@inherits PagedSearchViewer<OrganizationListEntry>
@inject IFetchOrganizationsService FetchOrganizationsService
<div class="articles">
    <div class="breadcrum">
        <span class="breadcrum-element">
            <a href="/home">home</a>
        </span>
    </div>
    <form>
        <select name="country">
            <option value="0"></option>
            @foreach (var country in Countries)
            {
                if (country.Selected)
                {
                    <option value="@country.Id" selected>@country.Name</option>
                }
                else
                {
                    <option value="@country.Id">@country.Name</option>
                }
                
            }
        </select>
        <select name="organization_type">
            <option value="0"></option>
            @foreach (var organizationType in OrganizationTypes)
            {
                if (organizationType.Selected)
                {
                    <option value="@organizationType.Id" selected>@organizationType.Name</option>
                }
                else
                {
                    <option value="@organizationType.Id">@organizationType.Name</option>
                }
                
            }
        </select>
        <SearchOptionSelector SearchOption="@PagedListSettings.SearchOption" />
        <input type="text" name="search_term" value="@PagedListSettings.SearchTerm" />
        <input type="submit" value="Search" />
    </form>
    @if (ListEntries.Any())
    {
        @foreach (var organization in ListEntries)
        {
            <div>
                <a href="@organization.Path">@organization.Title</a>
            </div>
        }
        <Pager Model="PagedListSettings" SelectPage="SelectPage"/>
    }
    else
    {
        <p>No organizations were found</p>
    
    }
</div>
@code {

    protected override int PageSize => 50;

    private int? OrganizationTypeId { get; set; }

    private int? CountryId { get; set; }

    private SelectionItem[] Countries = Array.Empty<SelectionItem>();
    private SelectionItem[] OrganizationTypes = Array.Empty<SelectionItem>();

    private void SetCountryId(Uri uri)
    {
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("country", out var countryIdValue)) {
            if (int.TryParse(countryIdValue, out int providedCountryId)) {
                CountryId = providedCountryId;
                if (PagedListSettings.QueryString == string.Empty) {
                    PagedListSettings.QueryString = $"country={providedCountryId}";
                }
                else {
                    PagedListSettings.QueryString = $"{PagedListSettings.QueryString}&country={providedCountryId}";
                }
            }
        }
    }
    private void SetOrganizationTypeId(Uri uri)
    {
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("organization_type", out var organizationTypeIdValue)) {
            if (int.TryParse(organizationTypeIdValue, out int providedOrganizationTypeId)) {
                OrganizationTypeId = providedOrganizationTypeId;
                if (PagedListSettings.QueryString == string.Empty) {
                    PagedListSettings.QueryString = $"organization_type={providedOrganizationTypeId}";
                }
                else {
                    PagedListSettings.QueryString = $"{PagedListSettings.QueryString}&organization_type={providedOrganizationTypeId}";
                }
            }
        }

    }
    private SelectionItem[] GetSelectItems(SelectionItem[] items, int? id)
    {
        foreach (var item in items) {
            if (item.Id == id) {
                item.Selected = true;
                continue;
            }
            item.Selected = false;
        }
        return items;
    }

    protected override async Task<IPagedList<OrganizationListEntry>?> GetListEntriesAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        SetCountryId(uri);
        SetOrganizationTypeId(uri);
        var organizationSearch = await FetchOrganizationsService.FetchOrganizations(
            userId: UserId, 
            tenantId: TenantId, 
            pageSize: PagedListSettings.PageSize, 
            pageNumber: PagedListSettings.PageNumber, 
            searchTerm: PagedListSettings.SearchTerm, 
            searchOption: PagedListSettings.SearchOption, 
            organizationTypeId: OrganizationTypeId, 
            countryId: CountryId);
        Countries = GetSelectItems(organizationSearch.Countries, CountryId);
        OrganizationTypes = GetSelectItems(organizationSearch.OrganizationTypes, OrganizationTypeId);
        return organizationSearch.Organizations;
    }
}
