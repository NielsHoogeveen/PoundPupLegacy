@using PoundPupLegacy.EditModel
@using PoundPupLegacy.Services
@inject ISiteDataService SiteDataService
@inject ILocationService LocationService
@inject IJSRuntime JSRuntime
<style>
    .label-value{
        display: grid;
        grid-template-columns: 1fr 5fr;
    }
</style>
@if(Location is not null)
{
    <div style="display: grid;grid-template-columns: 1fr 10em 1fr;">
        <div>
            <div class="label-value">
                <label for="location-street">Street</label>
                <span>
                    <input id="location-street" type="text" @onchange="ChangeStreet" value="@Location.Street"/>
                </span>
            </div>
            <div class="label-value">
                <label for="location-addition">Additional</label>
                <span>
                    <input id="location-addition" type="text" @onchange="ChangeAddition" value="@Location.Addition" />
                </span>
            </div>
            <div class="label-value">
                <label>Postal code</label>
                <span>
                    <input type="text" @onchange="ChangePostalCode" value="@Location.PostalCode" />
                </span>
            </div>
            <div class="label-value">
                <label>City</label>
                <span>
                    <input type="text" @onchange="ChangeCity" value="@Location.City" />
                </span>
            </div>

            @if(subdivisions.Any())
            {
                <div class="label-value">
                    <label>Subdivision</label>
                    <span>
                        <select @onchange="SelectSubdivision">
                            <option></option>
                            @foreach (var subdivision in subdivisions) {
                                @if (subdivision.Id == Location.SubdivisionId) {
                                    <option selected value="@subdivision.Id">@subdivision.Name</option>
                                }
                                else {
                                    <option value="@subdivision.Id">@subdivision.Name</option>
                                }
                            }
                        </select>
                    </span>
                </div>
            }
            <div class="label-value">
                <label>Country</label>
                <span>
                    <select @onchange="SelectCountry">
                        @foreach (var country in countries) {
                            @if (country.Id == Location.CountryId) {
                                <option selected value="@country.Id">@country.Name</option>
                            }
                            else {
                                <option value="@country.Id">@country.Name</option>
                            }
                        }
                    </select>
                </span>
            </div>
        </div>
        <div>
        @if (canValidate)
        {
            <button @onclick="Validate" style="display: block">Validate</button>
        }
        else 
        {
            <button disabled style="display: block">Validate</button>
        }
        @if (canAccept) {
            <button @onclick="Accept" style="display: block; margin-top: 1em;">Accept</button>
        }
        else {
            <button disabled style="display: block;margin-top: 1em;">Accept</button>
        }
    </div>
        <div>
        @if (validatedLocation is not null)
        {
            <div>
                @validatedLocation.Street?.ToString()
            </div>
            <div>
                @Location.Addition?.ToString()
            </div>
            <div>
                @validatedLocation.PostalCode?.ToString()
            </div>
            <div>
                @validatedLocation.City?.ToString()
            </div>
            @if (validatedLocation.Latitude.HasValue && validatedLocation.Longitude.HasValue) 
            { 
                <div id="location-dialog-map" style="height: 200px;width:100%;"></div>
            }
        }
        </div>
    </div>
}
@code {

    [Parameter]
    public Location? Location { get; set; }

    private Location? validatedLocation = null;

    private List<SubdivisionListItem> subdivisions = new();

    private List<CountryListItem> countries = new();

    private bool canValidate = false;

    private bool canAccept = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Location is not null)
        {
            SetCanValidate();
            await foreach (var country in LocationService.Countries())
            {
                countries.Add(country);
            };

            await foreach (var subdivision in LocationService.SubdivisionsOfCountry(Location.CountryId))
            {
                subdivisions.Add(subdivision);
            };
            StateHasChanged();
        }
    }
    private void SelectSubdivision(ChangeEventArgs e)
    {
        if (Location is null)
            return;
        if (e.Value != null && int.TryParse(e.Value.ToString(), out int subdivisionId))
        {
            Location.SubdivisionId = subdivisionId;
            Location.SubdivisionName = subdivisions.First(x => x.Id == subdivisionId).Name;
        }
        SetCanValidate();
    }

    private void ClearLocation()
    {
        if(Location is null)
            return;
        Location.Street = null;
        Location.Addition = null;
        Location.PostalCode = null;
        Location.City = null;
        Location.SubdivisionId = null;
        Location.SubdivisionName = null;
        Location.Latitude = null;
        Location.Longitude = null;

    }
    private async Task SelectCountry(ChangeEventArgs e)
    {
        if (Location is null)
            return;
        if (e.Value != null && int.TryParse(e.Value.ToString(), out int countryId)) {
            ClearLocation();
            validatedLocation = null;
            Location.CountryId = countryId;
            Location.CountryName = countries.First(x => x.Id == countryId).Name;
            await foreach (var subdivision in LocationService.SubdivisionsOfCountry(Location.CountryId)) {
                subdivisions.Add(subdivision);
            };
            StateHasChanged();
        }
    }

    private void SetCanValidate()
    {
        if (Location is null)
            return;
        if (Location.SubdivisionId.HasValue && Location.City is not null && Location.Street is not null) {
            canValidate = true;
        }
        else {
            validatedLocation = null;
            canValidate = false;
        }

    }

    private void Accept()
    {
        if(Location is not null && validatedLocation is not null)
        {
            Location.Street = validatedLocation.Street;
            Location.PostalCode = validatedLocation.PostalCode;
            Location.City = validatedLocation.City;
            Location.Latitude = validatedLocation.Latitude;
            Location.Longitude = validatedLocation.Longitude;
        }
    }

    private void ChangeStreet(ChangeEventArgs e)
    {
        if(Location is null)
            return;
        if(e.Value is not null) {
            if(e.Value.ToString()!.Length > 0) {
                Location.Street = e.Value.ToString();
            }
            else {
                Location.Street = null;
            }
        }
        SetCanValidate();
    }
    private void ChangeAddition(ChangeEventArgs e)
    {
        if (Location is null)
            return;
        if (e.Value is not null) {
            if (e.Value.ToString()!.Length > 0) {
                Location.Addition = e.Value.ToString();
            }
            else {
                Location.Addition = null;
            }
        }
    }
    private void ChangePostalCode(ChangeEventArgs e)
    {
        if (Location is null)
            return;
        if (e.Value is not null) {
            if (e.Value.ToString()!.Length > 0) {
                Location.PostalCode = e.Value.ToString();
            }
            else {
                Location.PostalCode = null;
            }
        }
    }
    private void ChangeCity(ChangeEventArgs e)
    {
        if (Location is null)
            return;
        if (e.Value is not null) {
            if (e.Value.ToString()!.Length > 0) {
                Location.City = e.Value.ToString();
            }
            else {
                Location.City = null;
            }
        }
        SetCanValidate();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (validatedLocation is not null)
        {
            var model = new List<Location> { validatedLocation };
            var locations = model.Where(x => x.Latitude is not null && x.Longitude is not null).Select((location, index) => new object[] { location.Latitude!, location.Longitude!, index }).ToArray();
            var centerLatitude = model.Average(x => x.Latitude);
            var centerLongitude = model.Average(x => x.Longitude);
            await JSRuntime.InvokeVoidAsync("initGoogleMaps", "location-dialog-map", locations, centerLatitude, centerLongitude);
        }

    }
    public async Task Validate()
    {
        if (Location is null)
            return;
        validatedLocation = await LocationService.ValidateLocationAsync(Location);
        if(validatedLocation is not null) {
            canAccept = true;
            StateHasChanged();
        }
    }

    public Location GetLocation()
    {
        return Location!;
    }
}

