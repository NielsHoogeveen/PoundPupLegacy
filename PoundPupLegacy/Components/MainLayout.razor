@using PoundPupLegacy.Services
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotFoundListener NotFoundListener
@inject ISiteDataService SiteDataService
@inject IUserService UserService

<PageTitle>Pound Pup Legacy</PageTitle>
<CascadingValue Value="UserId" Name="UserId">
    <CascadingValue Value="TenantId" Name="TenantId">
        <Header LogoName="@LogoName" Subtitle="@SubTitle" />
        <div class="main">
            <UserMenu />
            @if(notFound) {
                <NotFound />
            }else{
                <ContentViewer>
                    @Body
                </ContentViewer>
            }
        </div>
        <Footer MenuItems="FooterMenuItems" Name="@FooterTitle"/>
    </CascadingValue>
</CascadingValue>
@code{
    private int TenantId { get; set; }

    private int UserId { get; set; }

    private bool notFound;

    private string LogoName { get; set; } = "";

    private string SubTitle { get; set; } = "";

    private string FooterTitle { get; set; } = "";

    private Link[] FooterMenuItems { get; set; } = Array.Empty<Link>();

    protected override void OnInitialized() => NotFoundListener.OnNotFound += SetNotFound;

    void SetNotFound()
    {
        notFound = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        TenantId = SiteDataService.GetTenantId(uri);
        LogoName = SiteDataService.GetLogoName(TenantId);
        SubTitle = SiteDataService.GetSubTitle(TenantId);
        FooterTitle = SiteDataService.GetFooterTitle(TenantId);
        FooterMenuItems = SiteDataService.GetFooterMenuItems(TenantId);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity is not null) 
        {
            UserId = UserService.GetUserId(authState.User);
        }
        else
        {
            UserId = 0;
        }
    }
}

