@using PoundPupLegacy.Services
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotFoundListener NotFoundListener
@inject ISiteDataService SiteDataService
@inject IUserService UserService
<PageTitle>@Tenant.Title</PageTitle>
<CascadingValue Value="HamburgerMenuOpen" Name="HamburgerMenuOpen">
    <CascadingValue Value="Tenant.Id" Name="TenantId">
        <CascadingValue Value="Tenant.Name" Name="SiteName">
            <Header Logo="@Tenant.Logo" Subtitle="@Tenant.Subtitle" />
            <main>
            @if(UserInfo is UserLookupResponse.ExistingUser existingUser) {
                <CascadingValue Value="existingUser.Id" Name="UserId">
                    <HamburgerMenu />
                    @if (notFound) {
                        <NotFound />
                    }
                    else {
                        <ContentViewer>
                            @Body
                        </ContentViewer>
                    }
                </CascadingValue>
            }
            @if (UserInfo is UserLookupResponse.NoUser) {
                <CascadingValue Value="0" Name="UserId">
                    <HamburgerMenu />
                    @if (notFound) {
                        <NotFound />
                    }
                    else {
                        <ContentViewer>
                            @Body
                        </ContentViewer>
                    }
                </CascadingValue>
            }
            @if(UserInfo is UserLookupResponse.NewUser newUser) {
                <UserRegistration NameIdentifier="@newUser.NameIdentifier"/>
            }
            </main>
            <Footer Text="@Tenant.FooterText" />
        </CascadingValue>
    </CascadingValue>
</CascadingValue>
@code{
    private bool HamburgerMenuOpen { get; set; } = false;

    private Models.Tenant Tenant { get; set; } = default!;

    private UserLookupResponse UserInfo { get; set; } = default!;

    private bool notFound;

    protected override void OnInitialized() => NotFoundListener.OnNotFound += SetNotFound;

    void SetNotFound()
    {
        notFound = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);

        Tenant = SiteDataService.GetTenant();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity is not null) 
        {
            UserInfo = await UserService.GetUserInfo(authState.User);
        }
        else
        {
            UserInfo = new UserLookupResponse.NoUser();
        }
    }
}

