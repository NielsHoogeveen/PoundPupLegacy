@using PoundPupLegacy.EditModel;
@using PoundPupLegacy.Services;
@inject IHttpContextAccessor httpContextAccessor;
@inject IEditorService editorService;
@inject ILogger<DocumentEditor> logger;
@inject NavigationManager navigationManager;
@inject IJSRuntime JSRuntime

@{
    var url = $"https://{httpContextAccessor.HttpContext!.Request.Host.Value}/image/upload";
}

@if (document is not null) {
    <style>
        .title-editor {
            width: 100%;
            font-size: 2em;
            font-weight: bold;
            border: none;
            border-bottom: 1px solid black;
            padding: 0.5em;
            margin-bottom: 1em;
        }
    </style>
    <EditForm Model="@document" OnSubmit="@HandleSubmit">
        <InputText class="title-editor" id="name" @bind-Value="document.Title" />
        <CKEditor Id="#editor"
              @bind-Value=@document.Text
              UrlToPostImage=@url>
        </CKEditor>
        <TenantNodesEditor Node="@document" TenantId="@TenantId" />
        <DocumentDocumentables Elems="document.DocumentableDocuments" NodeId="document.NodeId" TenantId="TenantId" UserId="UserId"/>
        <AttachmentEditor Files="document.Files" />
        <button type="submit">Submit</button>
    </EditForm>
}
@code {
    Document? document;


    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public int TenantId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        document = await editorService.GetDocument(Id, UserId, TenantId);
        foreach (var tenant in document!.Tenants) {
            var tenantNode = document.TenantNodes.FirstOrDefault(x => x.TenantId == tenant.Id);
            tenant.TenantNode = tenantNode;
        }
    }

    private async Task HandleSubmit()
    {
        logger.LogInformation(document!.ToString());
        await editorService.Save(document);
        await JSRuntime.InvokeVoidAsync("reloadNode", document.UrlId);
    }

}
