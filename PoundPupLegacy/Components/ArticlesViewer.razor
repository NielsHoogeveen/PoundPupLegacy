@using PoundPupLegacy.Services
@using PoundPupLegacy.ViewModel.Models
@using Microsoft.AspNetCore.WebUtilities
@inject IFetchArticlesService FetchArticlesService
@inherits PagedViewer<ArticleListEntry>
@if(ListEntries is not null) {
        <div class="articles">
        <div class="breadcrum">
            <span class="breadcrum-element">
                <a href="/home">home</a>
            </span>
        </div>
        @if(UserId == 0)
        {
            <form id="term-form" action="/articles" method="get">
                <div class="term-names">
                    @foreach(var termName in TermNames)
                    {
                        <div class="term-name">
                            @if (termName.Selected)
                            {
                                <input type="checkbox" name="term-name-@termName.Id" id="term-name-@termName.Id" checked="checked"/>
                            }
                            else
                            {
                                <input type="checkbox" name="term-name-@termName.Id" id="term-name-@termName.Id" />
                            }
                            <label class="term-name-label" for="term-name-@termName.Id">@termName.Name</label>
                        </div>
                    }
                </div>
            </form>
            @JavascriptCall
        }
        else {
            <div class="term-names">
                @foreach (var termName in TermNames) {
                    <div class="term-name">
                        @if (termName.Selected) {
                            <input type="checkbox" name="term-name-@termName.Id" id="term-name-@termName.Id" checked="checked" />
                        }
                        else {
                            <input type="checkbox" name="term-name-@termName.Id" id="term-name-@termName.Id" />
                        }
                        <label class="term-name-label" for="term-name-@termName.Id" @onclick="() => Choose(termName.Id)">@termName.Name</label>
                    </div>
                }
            </div>
        }
        <article>
        <div class="blog-teasers">
            @foreach (var entry in ListEntries)
            {
                <div class="blog-teaser">
                    <h2>
                        <a href="@entry.Path">@entry.Title</a>
                    </h2>
                    <AuthoringViewer Model="@entry.Authoring" />
                    <LargeTextViewer Value="@entry.Text"/>
                    @if (entry.Tags is not null)
                    {
                        <div class="tags">
                            @foreach (var tag in @entry.Tags)
                            {
                                <span class="tag"><a href="@tag.Path">@tag.Name</a></span>
                            }
                        </div>
                    }
                </div>

            }
        </div>
        </article>
        <Pager Model="@PagedListSettings" />
    </div>
}
@code {

    private SelectionItem[] TermNames = Array.Empty<SelectionItem>();

    protected override int PageSize => 10;

    const string TERM_NAME_PREFIX = "term-name-";

    private IEnumerable<int> GetTermIds(IEnumerable<string> values)
    {
        foreach (var term in values) {
            if (term.StartsWith(TERM_NAME_PREFIX)) {
                var remainder = term.Substring(TERM_NAME_PREFIX.Length);
                if (int.TryParse(remainder, out int termId)) {
                    yield return termId;
                }
            }
        }
    }

    private async Task Choose(int id)
    {
        var term = TermNames.First(x => x.Id == id);
        term.Selected = !term.Selected;
        await OnInitializedAsync();
        var selectedTerms = TermNames.Where(x => x.Selected);
        var query = selectedTerms.Any() ? $"?{selectedTerms.Aggregate("", (a, b) => a + $"&{TERM_NAME_PREFIX}{b.Id}=on").ToString()[1..]}" : "";
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var newUri = uri.AbsolutePath + query;
        NavigationManager.NavigateTo(newUri, false);
        StateHasChanged();
    }
    private int[] GetTermIds()
    {
        if (NavigationManager is null)
            return Array.Empty<int>();
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var keys = QueryHelpers.ParseQuery(uri.Query).Select(x => x.Key);
        var termIds = keys == null ? Array.Empty<int>() : GetTermIds(keys).ToArray();
        return termIds;
    }

    protected override async Task<IPagedList<ArticleListEntry>?> GetListEntriesAsync()
    {
        var termIds = UserId == 0
            ? GetTermIds()
            : ListEntries is null
                ? GetTermIds() 
                : TermNames.Where(x => x.Selected).Select(x => x.Id);
        var articles =  await FetchArticlesService.GetArticles(TenantId, termIds.ToList(), PagedListSettings.PageNumber, PagedListSettings.PageSize, TERM_NAME_PREFIX);
        TermNames = articles.TermNames;
        return articles;
    }

    private MarkupString JavascriptCall =>  new MarkupString(@"<script>setClickEventHandlersForTerms();</script>");
}
