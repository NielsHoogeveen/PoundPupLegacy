@using PoundPupLegacy.EditModel
@using PoundPupLegacy.Services;
@inherits Viewer
@inject ITopicSearchService topicSearchService

@if(Elems is not null)
{
    <input id="tag-search" @bind="@topicSearch" @oninput="OnSetTopicSearch" />

    @if (termOptions.Any())
    {
        <div class="term-options">
        @foreach (var elem in termOptions)
        {
            <div class="term-option" @onclick="() => SelectTerm(elem.TermId)">@elem.Name</div>
        }
        </div>
    }
    @if (Elems.Any())
    {
        <div class="tag-elements">
        @foreach (var elem in Elems)
        {

            if (!elem.HasBeenDeleted)
            {
                <div class="tag-element">@elem.Name</div>
                <div class="close" @onclick="() => SetTagToDeleted(elem.TermId)">&times;</div>
            }

        }
        </div>
    }
}

@code {
    [Parameter]
    [EditorRequired]
    public List<Tag>? Elems { get; set; }

    [Parameter]
    [EditorRequired]
    public int? NodeId { get; set; }

    List<Tag> termOptions = new();

    string topicSearch { get; set; } = "";

    private void SelectTerm(int termId)
    {
        var tag = termOptions.FirstOrDefault(x => x.TermId == termId);
        if (tag is not null && Elems is not null)
        {
            var elem = Elems.FirstOrDefault(x => x.TermId == termId);
            if (elem is null)
            {
                Elems.Add(tag);
            }
            else
            {
                elem.HasBeenDeleted = false;
            }
        }
        termOptions.Clear();
        topicSearch = "";
        StateHasChanged();

    }

    private async Task OnSetTopicSearch(ChangeEventArgs args)
    {
        termOptions.Clear();
        var str = args.Value?.ToString() ?? string.Empty;
        if (!string.IsNullOrEmpty(str) && NodeId.HasValue)
        {
            termOptions = await topicSearchService.GetTerms(NodeId.Value, TenantId, str);
        }
        StateHasChanged();
    }

    private void SetTagToDeleted(int termId)
    {

        if (Elems is not null)
        {
            var elem = Elems.FirstOrDefault(x => x.TermId == termId);
            if (elem is not null)
            {
                if (elem.IsStored)
                {
                    elem.SetToDeleted();
                }
                else
                {
                    Elems.Remove(elem);
                }
                StateHasChanged();
            }
        }
    }
}
