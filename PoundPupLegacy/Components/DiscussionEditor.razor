@using PoundPupLegacy.EditModel;
@using PoundPupLegacy.Services;
@inject IEditorService editorService;
@inject ILogger<DiscussionEditor> logger;
@inject NavigationManager navigationManager;
@inject IJSRuntime JSRuntime

@if (discussion is not null)
{
    <style>
        .title-editor {
            width: 100%;
            font-size: 2em;
            font-weight: bold;
            border: none;
            border-bottom: 1px solid black;
            padding: 0.5em;
            margin-bottom: 1em;
        }
    </style>
    <EditForm Model="@discussion" OnSubmit="@HandleSubmit">
        <InputText class="title-editor" id="name" @bind-Value="discussion.Title" />
        <CKEditor Id="#editor"
              @bind-Value=@discussion.Text
            UrlToPostImage=@url>
        </CKEditor>
        <Tags Elems="@discussion.Tags"/>
        <TenantNodesEditor Node="@discussion"/>
        <AttachmentEditor Files="discussion.Files"/>
        <button type="submit">Submit</button>
    </EditForm>
    
}
@code {
    Discussion? discussion;

    string url = "";

    [CascadingParameter(Name = "UrlId")]
    public int UrlId { get; set; }

    [CascadingParameter(Name = "UserId")]
    public int UserId { get; set; }

    [CascadingParameter(Name = "TenantId")]
    public int TenantId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        url = $"{navigationManager.BaseUri}image/upload";
        discussion = await editorService.GetDiscussion(UrlId, UserId, TenantId);
        foreach(var tenant in discussion!.Tenants) 
        {
            var tenantNode = discussion.TenantNodes.FirstOrDefault(x => x.TenantId == tenant.Id);
            tenant.TenantNode = tenantNode;
        }
    }

    private async Task HandleSubmit()
    {
        logger.LogInformation(discussion!.ToString());
        await editorService.Save(discussion);
        await JSRuntime.InvokeVoidAsync("reloadNode", discussion.UrlId);
    }

}
