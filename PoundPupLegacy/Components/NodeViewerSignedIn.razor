@using PoundPupLegacy.ViewModel
@using PoundPupLegacy.Services
@inject ISiteDataService siteDataService
@inject IUserService userService
@if(Model is not null)
{
    var ModelClassName = Model.HasBeenPublished ? "node" : "node node-unpublished";

    <div class="article-with-comments @ModelClassName">


        @if (siteDataService.CanEdit(Model, UserId, TenantId))
        {
            <style>
                input.tab-button {
                display: none;
                }
                /* hide radio buttons */
                input + label {
                display: inline-block
                }
                /* show labels in line */
                input ~ .tab {
                display: none
                }
                /* hide contents */
                /* show contents only for selected tab */
                #tab1:checked ~ .tab.content1,
                #tab2:checked ~ .tab.content2 {
                display: block;
                padding: 0;
                }

                input.tab-button + label { /* box with rounded corner */
                border: 1px solid #999;
                background: #EEE;
                padding: 4px 12px;
                border-radius: 4px 4px 0 0;
                position: relative;
                top: 1px;
                }

                input.tab-button:checked + label { /* white background for selected tab */
                background: #FFF;
                border-bottom: 1px solid transparent;
                }

                input.tab-button ~ .tab { /* grey line between tab and contents */
                border-top: 1px solid #999;
                padding: 12px;
                }
            </style>
            @if (displayMode == DisplayMode.View)
            {
                <input class="tab-button" type="radio" name="tabs" id="tab1"checked />
            }
            else {
                <input class="tab-button" type="radio" name="tabs" id="tab1" @onclick="ToggleDisplayMode" />
            }
            <label for="tab1">View</label>
            @if (displayMode == DisplayMode.Edit)
            {
                <input class="tab-button" type="radio" name="tabs" id="tab2" checked />
            }
            else {
                <input class="tab-button" type="radio" name="tabs" id="tab2" @onclick="ToggleDisplayMode" />
            }
            <label for="tab2">Edit</label>
        }   
        <div class=" tab content1">
            <NodeContentViewer Model="Model" />
        </div>
    
        @if (siteDataService.CanEdit(Model, UserId, TenantId))
        {
            <div class="tab content2">
                <article>
                   <CascadingValue Value="@Model.NodeId" Name="NodeId">
                       <CascadingValue Value="@Model.UrlId" Name="UrlId">
                            <CascadingValue Value="@UserId" Name="UserId">
                                <CascadingValue Value="@TenantId" Name="TenantId">
                                @if (Model is BlogPost)
                                {
                                    <BlogPostEditor/>
                                }
                                @if (Model is Article) 
                                {
                                    <ArticleEditor/>
                                }
                                @if (Model is Discussion) 
                                {
                                    <DiscussionEditor/>
                                }
                                @if (Model is Document) 
                                {
                                    <DocumentEditor/>
                                }
                                @if (Model is Organization) {
                                   <OrganizationEditor/>
                                }
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </article>
            </div>
        }
        <CommentsViewer Model="Model.Comments"/>
    </div>

}
@code{
    [Parameter]
    public Node? Model { get; set; }

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public int TenantId { get; set; }

    private DisplayMode displayMode = DisplayMode.View;

    private enum DisplayMode { View, Edit }

    private void ToggleDisplayMode()
    {
        displayMode = displayMode == DisplayMode.View ? DisplayMode.Edit : DisplayMode.View;
        StateHasChanged();
    }
}
