@using PoundPupLegacy.Services
@inherits Viewer
@inject ISiteDataService siteDataService
@inject IUserService userService
    

<NodeContentViewer Model="Model">

    @if (siteDataService.CanEdit(node: Model, userId: UserId, tenantId: TenantId))
    {
        @if (displayMode == DisplayMode.View)
        {
            <input class="tab-button" type="radio" name="tabs" id="tab1"checked />
        }
        else {
            <input class="tab-button" type="radio" name="tabs" id="tab1" @onclick="ToggleDisplayMode" />
        }
        <label for="tab1">View</label>
        @if (displayMode == DisplayMode.Edit)
        {
            <input class="tab-button" type="radio" name="tabs" id="tab2" checked />
        }
        else {
            <input class="tab-button" type="radio" name="tabs" id="tab2" @onclick="ToggleDisplayMode" />
        }
        <label for="tab2">Edit</label>
    }   
    <div class=" tab content1">
        <NodeDetailsViewer Model="Model" />
    </div>
    
    @if (siteDataService.CanEdit(node: Model, userId: UserId, tenantId: TenantId))
    {
        <div class="tab content2">
            <ArticleViewer>
                @if (Model is ViewModel.Models.BlogPost){
                    <NodeUpdater UrlId="Model.UrlId" T="EditModel.BlogPost"/>
                }
                @if (Model is ViewModel.Models.Article) {
                    <NodeUpdater UrlId="Model.UrlId" T="EditModel.Article" />
                }
                @if (Model is ViewModel.Models.Discussion) {
                    <NodeUpdater UrlId="Model.UrlId" T="EditModel.Discussion" />
                }
                @if (Model is ViewModel.Models.Document) {
                    <NodeUpdater UrlId="Model.UrlId" T="EditModel.Document" />
                }
                @if (Model is ViewModel.Models.Organization) {
                    <NodeUpdater UrlId="Model.UrlId" T="EditModel.Organization" />
                }
            </ArticleViewer>
        </div>
    }
    <CommentsViewer Model="Model.Comments"/>
</NodeContentViewer>
@code{
    [Parameter]
    [EditorRequired]
    public ViewModel.Models.Node Model { get; set; } = default!;

    private DisplayMode displayMode = DisplayMode.View;

    private enum DisplayMode { View, Edit }

    private void ToggleDisplayMode()
    {
        displayMode = displayMode == DisplayMode.View ? DisplayMode.Edit : DisplayMode.View;
        StateHasChanged();
    }
}
