@using PoundPupLegacy.Services
@using PoundPupLegacy.Readers
@using PoundPupLegacy.Models
@inherits ViewerBase
@inject ISiteDataService siteDataService
@inject IUserService userService
@inject INodeAccessReadService nodeAccessReadService

<NodeContentViewer Model="Model">

    @if (canEdit)
    {
        @if (displayMode == DisplayMode.View)
        {
            <input class="tab-button" type="radio" name="tabs" id="tab1"checked />
        }
        else {
            <input class="tab-button" type="radio" name="tabs" id="tab1" @onclick="() => SwitchDisplayMode(DisplayMode.View)" />
        }
        <label for="tab1">View</label>
        @if (displayMode == DisplayMode.Edit)
        {
            <input class="tab-button" type="radio" name="tabs" id="tab2" checked />
        }
        else {
            <input class="tab-button" type="radio" name="tabs" id="tab2" @onclick="() => SwitchDisplayMode(DisplayMode.Edit)" />
        }
        <label for="tab2">Edit</label>
        @if (canViewNodeAccess) {
            @if (displayMode == DisplayMode.NodeAccess) {
                <input class="tab-button" type="radio" name="tabs" id="tab3" checked />
            }
            else {
                <input class="tab-button" type="radio" name="tabs" id="tab3" @onclick="() => SwitchDisplayMode(DisplayMode.NodeAccess)" />
            }
            <label for="tab3">Access</label>
        }
    }   
    <div class=" tab content1">
        <NodeDetailsViewer Model="Model" @ref=nodeDetailsViewer/>
    </div>
    
    @if (canEdit)
    {
        <CascadingValue Value="Model.NodeId" Name="NodeId">
        <div class="tab content2">
            <EditorViewer>
                @if (Model is ViewModel.Models.BasicNameable) {
                    <BasicNameableUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.ChildPlacementType) {
                    <ChildPlacementTypeUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.Denomination) {
                    <DenominationUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.DocumentType) {
                    <DocumentTypeUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.HagueStatus) {
                    <HagueStatusUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.InterOrganizationalRelationType) {
                    <InterOrganizationalRelationTypeUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.InterPersonalRelationType) {
                    <InterPersonalRelationTypeUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.PartyPoliticalEntityRelationType) {
                    <PartyPoliticalEntityRelationTypeUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.PersonOrganizationRelationType) {
                    <PersonOrganizationRelationTypeUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.Profession) {
                    <ProfessionUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.TypeOfAbuse) {
                    <TypeOfAbuseUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.TypeOfAbuser) {
                    <TypeOfAbuserUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.BlogPost) {
                    <BlogPostUpdater UrlId="Model.UrlId"/>
                }
                @if (Model is ViewModel.Models.Discussion) {
                    <DiscussionUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.AbuseCase) {
                    <AbuseCaseUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.Document) {
                    <DocumentUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.ChildTraffickingCase) {
                    <ChildTraffickingCaseUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.CoercedAdoptionCase) {
                    <CoercedAdoptionCaseUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.DeportationCase) {
                    <DeportationCaseUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.DisruptedPlacementCase) {
                    <DisruptedPlacementCaseUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.FathersRightsViolationCase) {
                    <FathersRightsViolationCaseUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.Organization) {
                    <OrganizationUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.OrganizationType) {
                    <OrganizationTypeUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.Person) {
                <PersonUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.WrongfulMedicationCase) {
                    <WrongfulMedicationCaseUpdater UrlId="Model.UrlId" />
                }
                @if (Model is ViewModel.Models.WrongfulRemovalCase) {
                    <WrongfulRemovalCaseUpdater UrlId="Model.UrlId" />
                }
            </EditorViewer>
            </div>
        </CascadingValue>
    }
    @if (canViewNodeAccess) {
        <div class="tab content3">
            <div class="node-access">
                <div class="header">
                    User
                </div>
                <div class="header">
                    Date/time
                </div>
            @foreach(var nodeAccess in nodeAccesses) {
                <div>
                    @nodeAccess.Name
                </div>
                <div>
                    @nodeAccess.DateTime.ToString("MMM dd, yyyy HH:mm:ss tt \"GMT\"zzz")
                </div>
            }
            </div>
        </div>
    }
    <CommentsViewer Model="Model.Comments"/>
</NodeContentViewer>
@code{
    [Parameter]
    [EditorRequired]
    public ViewModel.Models.Node Model { get; set; } = default!;

    private NodeDetailsViewer nodeDetailsViewer = default!;

    private bool canEdit = false;

    private List<NodeAccess> nodeAccesses = new List<NodeAccess>();

    private DisplayMode displayMode = DisplayMode.View;

    private enum DisplayMode { View, Edit, NodeAccess }

    private void SwitchDisplayMode(DisplayMode mode)
    {
        displayMode = mode;
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        nodeAccesses = await nodeAccessReadService.ReadNodeAccess(Model.NodeId);
        canEdit = await siteDataService.CanEdit(node: Model, userId: UserId);
        canViewNodeAccess = await siteDataService.CanViewNodeAccess(userId: UserId);
    }

    private bool canViewNodeAccess = false;
}
