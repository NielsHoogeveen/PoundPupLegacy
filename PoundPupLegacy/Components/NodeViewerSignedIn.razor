@using PoundPupLegacy.ViewModel.Models
@using PoundPupLegacy.Services
@inherits Viewer
@inject ISiteDataService siteDataService
@inject IUserService userService
@if(Model is not null)
{
    var ModelClassName = Model.HasBeenPublished ? "node" : "node node-unpublished";

    <div class="article-with-comments @ModelClassName">


        @if (siteDataService.CanEdit(Model, UserId, TenantId))
        {
            @if (displayMode == DisplayMode.View)
            {
                <input class="tab-button" type="radio" name="tabs" id="tab1"checked />
            }
            else {
                <input class="tab-button" type="radio" name="tabs" id="tab1" @onclick="ToggleDisplayMode" />
            }
            <label for="tab1">View</label>
            @if (displayMode == DisplayMode.Edit)
            {
                <input class="tab-button" type="radio" name="tabs" id="tab2" checked />
            }
            else {
                <input class="tab-button" type="radio" name="tabs" id="tab2" @onclick="ToggleDisplayMode" />
            }
            <label for="tab2">Edit</label>
        }   
        <div class=" tab content1">
            <NodeContentViewer Model="Model" />
        </div>
    
        @if (siteDataService.CanEdit(Model, UserId, TenantId))
        {
            <div class="tab content2">
                <article>
                    @if (Model is BlogPost)
                    {
                        <BlogPostEditor UrlId="Model.UrlId"/>
                    }
                    @if (Model is Article) 
                    {
                        <ArticleEditor UrlId="Model.UrlId"/>
                    }
                    @if (Model is Discussion) 
                    {
                        <DiscussionEditor UrlId="Model.UrlId" />
                    }
                    @if (Model is Document) 
                    {
                        <DocumentEditor UrlId="Model.UrlId" />
                    }
                    @if (Model is Organization) {
                        <OrganizationEditor UrlId="Model.UrlId" />
                    }
                </article>
            </div>
        }
        <CommentsViewer Model="Model.Comments"/>
    </div>

}
@code{
    [Parameter]
    [EditorRequired]
    public Node? Model { get; set; }

    private DisplayMode displayMode = DisplayMode.View;

    private enum DisplayMode { View, Edit }

    private void ToggleDisplayMode()
    {
        displayMode = displayMode == DisplayMode.View ? DisplayMode.Edit : DisplayMode.View;
        StateHasChanged();
    }
}
