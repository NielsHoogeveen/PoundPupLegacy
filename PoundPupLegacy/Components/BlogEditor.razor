@using PoundPupLegacy.EditModel;
@using PoundPupLegacy.Services;
@inject IHttpContextAccessor httpContextAccessor;
@inject IEditorService editorService;
@inject ILogger<BlogEditor> logger;
@inject NavigationManager navigationManager;
@inject IJSRuntime JSRuntime

<h3>BlogEditor</h3>

@{
    var url = $"https://{httpContextAccessor.HttpContext!.Request.Host.Value}/image/upload";
}

@if (blogPost is not null)
{
    <style>
        .title-editor {
            width: 100%;
            font-size: 2em;
            font-weight: bold;
            border: none;
            border-bottom: 1px solid black;
            padding: 0.5em;
            margin-bottom: 1em;
        }
    </style>
    <EditForm Model="@blogPost" OnSubmit="@HandleSubmit">
        <InputText class="title-editor" id="name" @bind-Value="blogPost.Title" />
        <CKEditor Id="#editor"
              @bind-Value=@blogPost.Text
            UrlToPostImage=@url>
        </CKEditor>
        <Tags Elems="@blogPost.Tags" NodeId="@blogPost.NodeId"/>
        <TenantNodesEditor  Node="@blogPost" />
        <button type="submit">Submit</button>
    </EditForm>
}
@code {
        BlogPost? blogPost;


        [Parameter]
        public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        blogPost = await editorService.GetBlogPost(Id);
        foreach(var tenant in blogPost!.Tenants) 
        {
            var tenantNode = blogPost.TenantNodes.FirstOrDefault(x => x.TenantId == tenant.Id);
            tenant.TenantNode = tenantNode;
        }
    }

    private async Task HandleSubmit()
    {
        logger.LogInformation(blogPost!.ToString());
        await editorService.Save(blogPost);
        await JSRuntime.InvokeVoidAsync("reloadNode", blogPost.UrlId);
    }

    private void Uncheck(int tenantId)
    {
        if(blogPost is not null)
        {
            var tenant = blogPost.Tenants.First(x => x.Id == tenantId);
            if(tenant.TenantNode is null) {
                throw new NullReferenceException("Tenant node should not be null");
            }
            if (tenant.TenantNode.Id.HasValue) {
                tenant.TenantNode.HasBeenDeleted = true;
            }
            else {
                tenant.TenantNode = null;
            }
            StateHasChanged();
        }

    }
    private void Check(int tenantId)
    {
        if (blogPost is not null) {
            var tenant = blogPost.Tenants.First(x => x.Id == tenantId);
            if (tenant.TenantNode is not null && tenant.TenantNode.Id.HasValue) {
                tenant.TenantNode.HasBeenDeleted = false;
            }
            else {
                tenant.TenantNode = new TenantNode {
                    Id = null,
                    TenantId = tenantId,
                    HasBeenDeleted = false,
                    NodeId = blogPost.NodeId,
                    UrlId = blogPost.NodeId,
                    PublicationStatusId = 1,
                    UrlPath = null,
                    SubgroupId = null
                };
            }
            StateHasChanged();
        }

    }
    private void SetSubgroup(int tenantId, int? subgroupId)
    {
        if (blogPost is not null)
        {
            var tenant = blogPost.Tenants.First(x => x.Id == tenantId);
            if(tenant.TenantNode is not null) {
                tenant.TenantNode.SubgroupId = subgroupId;
            }
            StateHasChanged();
        }
    }
    private void SetPublicationStatus(int tenantId, int publicationStatusId)
    {
        if (blogPost is not null) {
            var tenant = blogPost.Tenants.First(x => x.Id == tenantId);
            if (tenant.TenantNode is not null) {
                tenant.TenantNode.PublicationStatusId = publicationStatusId;
            }
            StateHasChanged();
        }
    }
    void OnSelectSubgroup(int tenantId, ChangeEventArgs e)
    {
        if(int.TryParse(e.Value!.ToString(), out int subgroupId)){
            SetSubgroup(tenantId, subgroupId);
        }
        else {
            SetSubgroup(tenantId, null);
        }

    }
    void OnSelectPublicationStatus(int tenantId, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value!.ToString(), out int publicationStatusId)) {
            SetPublicationStatus(tenantId, publicationStatusId);
        }
    }
}
