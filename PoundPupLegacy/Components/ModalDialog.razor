@inject IJSRuntime JSRuntime

@if (DialogContent is not null)
{

    <div class="modal open" id="@Id" aria-modal="true" role="dialog" @onclick="Cancel">
        <div class="modal-dialog" @onclick:preventDefault="true" @onclick:stopPropagation="true">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@Title</h4>
                    <button type="button" class="btn-close" @onclick="Cancel">&times;</button>
                </div>
                <div class="modal-body">
                    @DialogContent
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="Ok">OK</button>
                    <button class="btn" @onclick="Cancel">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Parameter]
    public RenderFragment? DialogContent { get; set; }

    [Parameter]
    public string? Id { get; set; } 

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public Action? OnOk { get; set; }

    [Parameter]
    public Action? OnCancel { get; set; }

    private string className => displayState == DisplayState.Open ? "" : "modal";

    private DisplayState displayState = DisplayState.Closed;

    private enum DisplayState { Open, Closed }


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }
    public void Cancel()
    {
        if (OnCancel is not null) {
            OnCancel();
        }

    }

    public void Ok()
    {
        if(OnOk is not null) {
            OnOk();
        }
    }
}
