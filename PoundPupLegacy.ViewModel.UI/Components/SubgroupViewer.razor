@inherits PagedViewer<SubgroupListEntry>
@inject IFetchSubgroupService SubgroupService
<HeadContentSetter Title=@Title SiteName=@SiteName Description=@Description />
<BreadCrumElementViewer Model="BreadCrumElements" />
<h1>@GroupName</h1>
<div>@GroupDescription</div>
@if (ListEntries is not null)
{
    <div class="group-list">
        <div class="header">
            Title
        </div>
        <div class="header">
            Author
        </div>
        <div class="header">
            Created
        </div>
        <div class="header">
            Changed
        </div>
        <div class="header">&nbsp;</div>
        @foreach (var item in ListEntries.OrderByDescending(x => x.Authoring.CreatedDateTime)) {
            <div>
                <a href="@item.Path">@item.Title</a>
            </div>
            <div>
                @item.Authoring.Name
            </div>
            <div>
                @item.Authoring.CreatedDateTime.ToString("yyyy MMM dd")
            </div>
            <div>
                @item.Authoring.ChangedDateTime.ToString("yyyy MMM dd")
            </div>
            <div class="tooltip publication-status-@item.PublicationStatusId">
                ⬤
                @if (@item.PublicationStatusId == 0) {
                    <span class="tooltip-text">unpublished</span>
                }
                @if (@item.PublicationStatusId == 1) {
                    <span class="tooltip-text">public</span>
                }
                @if (@item.PublicationStatusId == 2) {
                    <span class="tooltip-text ">private</span>
                }
            </div>
        }
    </div>
    <Pager Model="PagedListSettings" SelectPage="SelectPage" />
}
@code {
    [Parameter]
    [EditorRequired]
    public int Id { get; set; }

    private int? PreviousId { get; set; } = null;

    protected override async Task OnParametersSetAsync()
    {
        if (!PreviousId.HasValue) {
            PreviousId = Id;
            return;
        }
        if (PreviousId != Id) {
            await OnInitializedAsync();
        }
    }
    private string? GroupName { get; set; }

    private string? GroupDescription { get; set; }

    protected override int PageSize => 50;

    protected override string Title => $"Subgroups";

    protected override string Description => "A list of subgroups of this site";

    protected override async Task<IPagedList<SubgroupListEntry>> GetListEntriesAsync()
    {
        var list =  await SubgroupService.GetSubGroupPagedList(
            userId: UserId, 
            subgroupId: Id, 
            pageSize: PagedListSettings.PageSize, 
            pageNumber: PagedListSettings.PageNumber);
        GroupName = list.Name;
        GroupDescription = list.Description;
        return list;
    }
}
