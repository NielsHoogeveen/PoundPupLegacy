@inject IFetchRecentPostsService FetchService
@inherits PagedViewer<RecentPostListEntry>
<HeadContentSetter Title=@Title SiteName=@SiteName Description=@Description />
<BreadCrumElementViewer Model="BreadCrumElements" />
<h1>Recent posts</h1>
@if (ListEntries.Any()) {
    <div class="list-entries">
        <div class="header">Title</div>
        <div class="header">Publisher</div>
        <div class="header">Created</div>
        <div class="header">Last Updated</div>
        <div class="header">Type</div>
        <div class="header">&nbsp;</div>
        @foreach (var listEntry in ListEntries) {
            <div>
                <LinkViewer Link="@listEntry"/>
            </div>
            <div>@listEntry.Publisher</div>
            <div>@listEntry.CreatedDateTime</div>
            <div>@listEntry.LastChangedDateTime</div>
            <div>@listEntry.NodeType</div>
            <div class="tooltip publication-status-@listEntry.PublicationStatusId">
                ⬤
                @if (@listEntry.PublicationStatusId == 0)
                {
                    <span class="tooltip-text">unpublished</span>
                }
                @if (@listEntry.PublicationStatusId == 1) {
                    <span class="tooltip-text">public</span>
                }
                @if (@listEntry.PublicationStatusId == 2) {
                    <span class="tooltip-text ">private</span>
                }
            </div>
        }
    </div>
    <Pager Model="PagedListSettings" SelectPage="SelectPage" />
}
else {
    <p>No recent posts were found</p>

}

@code {

    protected override int PageSize => 100;

    protected override string Title => $"Recent Posts";

    protected override string Description => "List of the most recent entries added to this site";

    protected override async Task<IPagedList<RecentPostListEntry>> GetListEntriesAsync()
    {
        var result = await FetchService.FetchRecentPosts(
            pageSize: PagedListSettings.PageSize, 
            pageNumber: PagedListSettings.PageNumber, 
            tenantId: TenantId, 
            userId: UserId);
        return result;
    }
}
