@inject IFetchArticlesService FetchArticlesService
@inherits PagedViewer<ArticleListEntry>
<BreadCrumElementViewer Model="BreadCrumElements" />
<TagSelector TermNames="TermNames" OnSelectTerm="SelectTerm"/>
<TeaserListViewer ListEntries="ListEntries" PagedListSettings="@PagedListSettings" SelectPage="SelectPage"/>
@code {

    private SelectionItem[] TermNames = Array.Empty<SelectionItem>();

    protected override int PageSize => 10;

    const string TERM_NAME_PREFIX = "term-name-";

    private IEnumerable<int> GetTermIds(IEnumerable<string> values)
    {
        foreach (var term in values) {
            if (term.StartsWith(TERM_NAME_PREFIX)) {
                var remainder = term.Substring(TERM_NAME_PREFIX.Length);
                if (int.TryParse(remainder, out int termId)) {
                    yield return termId;
                }
            }
        }
    }

    private async Task SelectTerm(int id)
    {
        var term = TermNames.First(x => x.Id == id);
        term.Selected = !term.Selected;
        await OnInitializedAsync();
        var selectedTerms = TermNames.Where(x => x.Selected);
        var query = selectedTerms.Any() ? $"?{selectedTerms.Aggregate("", (a, b) => a + $"&{TERM_NAME_PREFIX}{b.Id}=on").ToString()[1..]}" : "";
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var newUri = uri.AbsolutePath + query;
        NavigationManager.NavigateTo(newUri, false);
        StateHasChanged();
    }
    private int[] GetTermIds()
    {
        if (NavigationManager is null)
            return Array.Empty<int>();
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var keys = QueryHelpers.ParseQuery(uri.Query).Select(x => x.Key);
        var termIds = keys == null ? Array.Empty<int>() : GetTermIds(keys).ToArray();
        return termIds;
    }

    protected override async Task<IPagedList<ArticleListEntry>> GetListEntriesAsync()
    {
        var termIds = UserId == 0
            ? GetTermIds()
            : ListEntries is null
                ? GetTermIds() 
                : TermNames.Where(x => x.Selected).Select(x => x.Id);
        var articles =  await FetchArticlesService.GetArticles(
            tenantId: TenantId, 
            selectedTerms: termIds.ToList(), 
            pageNumber: PagedListSettings.PageNumber, 
            pageSize: PagedListSettings.PageSize, 
            termNamePrefix: TERM_NAME_PREFIX);
        TermNames = articles.TermNames;
        return articles;
    }
}
