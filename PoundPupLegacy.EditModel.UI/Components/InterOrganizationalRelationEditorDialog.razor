@inject ILocationService LocationService
@inject IJSRuntime JSRuntime
<SearchItemEditor 
    T="OrganizationListItem" 
    IsMandatory="true"
    @bind-Value="InterOrganizationalRelation.OrganizationFrom" 
    EnableEdit="!ThisOrganizationIsFrom" 
    Label="Organization from"/>

<div class="type-and-swap">
    <div>
        <label for="relation-type">Relation type</label>
        <select id="relation-type" @onchange="OnChangeRelationType">
            @foreach (var relationType in InterOrganizationalRelationTypes.OrderBy(x => x.Name)) {
                @if (relationType.Id == InterOrganizationalRelationType.Id) {
                    <option selected value="@relationType.Id">@relationType.Name</option>
                }
                else {
                    <option value="@relationType.Id">@relationType.Name</option>
                }
            }
        </select>
    </div>
    @if (!InterOrganizationalRelationType.IsSymmetric) {
        <button type="button" @onclick="Swap">Swap To/From</button>
    }

</div>
<SearchItemEditor 
    T="OrganizationListItem"
    IsMandatory="true"
    @bind-Value="InterOrganizationalRelation.OrganizationTo" 
    EnableEdit="ThisOrganizationIsFrom" 
    Label="Organization to"/>
<SearchItemEditor 
    T="GeographicalEntityListItem"
    IsMandatory="false"
    @bind-Value="InterOrganizationalRelation.GeographicalEntity"
    EnableEdit="true"
    Label="Geographical entity" />
<SearchItemEditor T="DocumentListItem"
    IsMandatory="false"
    @bind-Value="InterOrganizationalRelation.DocumentProof"
    EnableEdit="true"
    Label="Proof document" />
<div class="form-group">
    <label for="money-involved">Money involved</label>
    <InputNumber id="money-involved" @bind-Value="InterOrganizationalRelation.MoneyInvolved" />
</div>
<div class="form-group">
    <label for="number-of-children-involved">Number of children involved</label>
    <InputNumber id="number-of-children-involved" @bind-Value="InterOrganizationalRelation.NumberOfChildrenInvolved" />
</div>
<div class="form-group">
    <label>Description</label>
    <CKEditor Id="relation-editor" @bind-Value="InterOrganizationalRelation.Description" />
</div>
<div class="form-group">
    <label>Start date</label>
    <InputDate @bind-Value="InterOrganizationalRelation.DateFrom" />
</div>
<div class="form-group">
    <label>End date</label>
    <InputDate @bind-Value="InterOrganizationalRelation.DateTo" />
</div>
@code {

    [Parameter]
    public InterOrganizationalRelation InterOrganizationalRelation { get; set; } = default!;

    [Parameter]
    public EventCallback<InterOrganizationalRelation> InterOrganizationalRelationChanged { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public int? OrganizationId { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<InterOrganizationalRelationType> InterOrganizationalRelationTypes { get; set; } = default!;

    private bool ThisOrganizationIsFrom = true;

    private InterOrganizationalRelationType InterOrganizationalRelationType { get; set; } = default!;

    protected override void OnInitialized()
    {
        if (OrganizationId is not null) {
            ThisOrganizationIsFrom = OrganizationId == InterOrganizationalRelation.OrganizationFrom.Id;
        }
        InterOrganizationalRelationType = InterOrganizationalRelationTypes.First(x => x.Id == InterOrganizationalRelation.InterOrganizationalRelationType.Id);
    }

    private void Swap()
    {
        var tmp = InterOrganizationalRelation.OrganizationFrom;
        InterOrganizationalRelation.OrganizationFrom = InterOrganizationalRelation.OrganizationTo;
        InterOrganizationalRelation.OrganizationTo = tmp;
        ThisOrganizationIsFrom = !ThisOrganizationIsFrom;
        StateHasChanged();
    }

    private void OnChangeRelationType(ChangeEventArgs args)
    {
        if(args.Value is not null && args.Value is string str) {
            if(int.TryParse(str, out var organizationTypeId)) {
                InterOrganizationalRelationType = InterOrganizationalRelationTypes.First(x => x.Id == organizationTypeId);
                StateHasChanged();
            }
        }
    }
}

