@using static PoundPupLegacy.EditModel.InterOrganizationalRelation
@using static PoundPupLegacy.EditModel.OrganizationItem
@inject ILocationService LocationService
@inject IJSRuntime JSRuntime
@if (WorkRelation.OrganizationItemFrom is OrganizationName) {
    <div class="form-group">
        <label>Organization from</label>
        <div>@WorkRelation.OrganizationFromName</div>
    </div>
}
@if (WorkRelation.OrganizationItemFrom is OrganizationListItem organizationListItemFrom) {
    <SearchItemEditor T="OrganizationListItem"
        IsMandatory="true"
        @bind-Value="organizationListItemFrom"
        EnableEdit="WorkRelation.RelationSideThisOrganization == RelationSide.To"
        Label="Organization from"/>
}
<div class="type-and-swap">
    <div>
        <label for="relation-type">Relation type</label>
        <select id="relation-type" @onchange="OnChangeRelationType">
            @foreach (var relationType in RelationTypes.OrderBy(x => x.Name)) {
                @if (relationType.Id == RelationType.Id) {
                    <option selected value="@relationType.Id">@relationType.Name</option>
                }
                else {
                    <option value="@relationType.Id">@relationType.Name</option>
                }
            }
        </select>
    </div>
    @if (!RelationType.IsSymmetric) {
        <button type="button" @onclick="Swap">Swap To/From</button>
    }

</div>
@if (WorkRelation.OrganizationItemTo is OrganizationName) {
    <div class="form-group">
        <label>Organization from</label>
        <div>@WorkRelation.OrganizationToName</div>
    </div>
}
@if (WorkRelation.OrganizationItemTo is OrganizationListItem organizationListItemTo) {

    <SearchItemEditor T="OrganizationListItem"
        IsMandatory="true"
        @bind-Value="organizationListItemTo"
        EnableEdit="WorkRelation.RelationSideThisOrganization == RelationSide.From"
        Label="Organization to"/>
}
<SearchItemEditor 
    T="GeographicalEntityListItem"
    IsMandatory="false"
    @bind-Value="WorkRelation.GeographicalEntity"
    EnableEdit="true"
    Label="Geographical entity" />
<SearchItemEditor T="DocumentListItem"
    IsMandatory="false"
    @bind-Value="WorkRelation.ProofDocument"
    EnableEdit="true"
    Label="Proof document" />
<div class="form-group">
    <label for="money-involved">Money involved</label>
    <InputNumber id="money-involved" @bind-Value="WorkRelation.MoneyInvolved" />
</div>
<div class="form-group">
    <label for="number-of-children-involved">Number of children involved</label>
    <InputNumber id="number-of-children-involved" @bind-Value="WorkRelation.NumberOfChildrenInvolved" />
</div>
<div class="form-group">
    <label>Description</label>
    <CKEditor Id="relation-editor" @bind-Value="WorkRelation.Description" />
</div>
<div class="form-group">
    <label>Start date</label>
    <InputDate @bind-Value="WorkRelation.DateFrom" />
</div>
<div class="form-group">
    <label>End date</label>
    <InputDate @bind-Value="WorkRelation.DateTo" />
</div>
@code {

    [Parameter]
    [EditorRequired]
    public InterOrganizationalRelationsEditor.OrganizationEditContext EditContext { get; set; } = default!;


    [Parameter]
    [EditorRequired]
    public List<InterOrganizationalRelationTypeListItem> RelationTypes { get; set; } = default!;


    private InterOrganizationalRelation WorkRelation { get; set; } = default!;
    private InterOrganizationalRelationTypeListItem RelationType { get; set; } = default!;
    private EditContext? editContext;
    private ValidationMessageStore? validationMessageStore;


    protected override void OnInitialized()
    {
        WorkRelation = EditContext.RelationToEdit;
        WorkRelation.OrganizationListItemFrom = WorkRelation.OrganizationItemFrom switch {
            OrganizationListItem p => p,
            _ => null
        };
        WorkRelation.OrganizationListItemTo = WorkRelation.OrganizationItemTo switch {
            OrganizationListItem p => p,
            _ => null
        };
        editContext = new EditContext(WorkRelation);
        validationMessageStore = new ValidationMessageStore(editContext);

        RelationType = RelationTypes.First(x => x.Id == WorkRelation.InterOrganizationalRelationType.Id);
    }

    private void Swap()
    {
        WorkRelation = WorkRelation.SwapFromAndTo();
        editContext = new EditContext(WorkRelation!);
        validationMessageStore = new ValidationMessageStore(editContext);
        StateHasChanged();
    }

    private void OnChangeRelationType(ChangeEventArgs args)
    {
        if(args.Value is not null && args.Value is string str) {
            if(int.TryParse(str, out var typeId)) {
                RelationType = RelationTypes.First(x => x.Id == typeId);
                StateHasChanged();
            }
        }
    }

    public CompletedInterOrganizationalRelation? GetValidRelation()
    {
        validationMessageStore?.Clear();
        bool hasErrors = false;
        if (WorkRelation!.OrganizationItemFrom is not OrganizationName && WorkRelation.OrganizationListItemFrom is null) {
            validationMessageStore!.Add(editContext!.Field(nameof(WorkRelation.OrganizationListItemFrom)), "Organization from is required");
            hasErrors = true;
            editContext.NotifyValidationStateChanged();
        }
        if (WorkRelation!.OrganizationItemTo is not OrganizationName && WorkRelation.OrganizationListItemTo is null) {
            validationMessageStore!.Add(editContext!.Field(nameof(WorkRelation.OrganizationListItemTo)), "Organization to is required");
            hasErrors = true;
            editContext.NotifyValidationStateChanged();
        }
        if (hasErrors)
            return null;

        return WorkRelation.Match<CompletedInterOrganizationalRelation>(
            existingInterOrganizationalRelation: r => r with { OrganizationFrom = WorkRelation.OrganizationListItemFrom!, OrganizationTo = WorkRelation.OrganizationListItemTo! },
            newInterOrganizationalExistingRelation: r => r with { OrganizationFrom = WorkRelation.OrganizationListItemFrom!, OrganizationTo = WorkRelation.OrganizationListItemTo! },
            newInterOrganizationalExistingFromRelation: r => r.GetCompletedRelation(WorkRelation.OrganizationListItemTo!),
            newInterOrganizationalExistingToRelation: r => r.GetCompletedRelation(WorkRelation.OrganizationListItemFrom!),
            completedNewInterOrganizationalNewFromRelation: r => r with { OrganizationTo = WorkRelation.OrganizationListItemTo! },
            newInterOrganizationalNewFromRelation: r => r.GetCompletedRelation(WorkRelation.OrganizationListItemTo!),
            completedNewInterOrganizationalNewToRelation: r => r with { OrganizationFrom = WorkRelation.OrganizationListItemFrom! },
            newInterOrganizationalNewToRelation: r => r.GetCompletedRelation(WorkRelation.OrganizationListItemFrom!)
        );
    }
}

