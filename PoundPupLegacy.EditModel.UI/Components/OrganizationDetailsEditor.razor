@inherits EditorDetailBase
<div class="organization-fields">
    <div class="form-group">
        <label>Website</label>
        <InputText type="text" @bind-Value="@OrganizationDetails.WebSiteUrl" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText type="text" @bind-Value="@OrganizationDetails.EmailAddress" />
    </div>
    <div class="form-group">
        <label>Established</label>
        <FuzzyDateEditor @bind-Value=" OrganizationDetails.Establishment" />
    </div>
    <div class="form-group">
        <label>Terminated</label>
        <FuzzyDateEditor @bind-Value="OrganizationDetails.Termination" />
    </div>
</div>
<OrganizationOrganizationTypesEditor OrganizationDetails="OrganizationDetails" />
<InterOrganizationalRelationsEditor 
    @bind-RelationsFrom="OrganizationDetails.InterOrganizationalRelationsFrom"
    @bind-RelationsTo="OrganizationDetails.InterOrganizationalRelationsTo"
    RelationTypes="OrganizationDetails.InterOrganizationalRelationTypes" 
    OrganizationItem="OrganizationDetails.OrganizationItem"
    Tenants="Tenants"
    @ref=InterOrganizationalRelationsEditor
    />
<OrganizationPoliticalEntityRelationsEditor 
    PartyTypeName="organization"
    Organization="OrganizationDetails.OrganizationItem"
    Relations="OrganizationDetails.OrganizationPoliticalEntityRelations"
    RelationTypes="OrganizationDetails.OrganizationPoliticalEntityRelationTypes"
    Tenants="Tenants" />
<PersonOrganizationRelationsEditorForOrganization 
    Organization="OrganizationDetails.OrganizationItem"
    @bind-Relations="OrganizationDetails.PersonOrganizationRelations"
    RelationTypes="OrganizationDetails.PersonOrganizationRelationTypes"
    Tenants="Tenants"
    @ref=PersonOrganizationRelationsEditor />

@code {
    [Parameter]
    [EditorRequired]
    public OrganizationDetails OrganizationDetails { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<TenantDetails> Tenants { get; set; } = default!;

    private InterOrganizationalRelationsEditor InterOrganizationalRelationsEditor { get; set;  } = default!;
    private PersonOrganizationRelationsEditorForOrganization PersonOrganizationRelationsEditor { get; set; } = default!;

    public override async Task<List<System.ComponentModel.DataAnnotations.ValidationResult>> Validate()
    {
        PersonOrganizationRelationsEditor?.Validate();
        return await Task.FromResult(new List<System.ComponentModel.DataAnnotations.ValidationResult>());
    }

    public override void OnTitleChange(string title)
    {
        foreach (var relation in OrganizationDetails.OrganizationPoliticalEntityRelations.OfType<OrganizationPoliticalEntityRelation.Complete.Resolved.ToUpdate>()) {
            relation.Party.Name = title;
        };
        foreach (var relation in OrganizationDetails.OrganizationPoliticalEntityRelations.OfType<OrganizationPoliticalEntityRelation.Complete.Resolved.ToCreateForExistingOrganization>()) {
            relation.Organization.Name = title;
        };
        foreach (var relation in OrganizationDetails.OrganizationPoliticalEntityRelations.OfType<OrganizationPoliticalEntityRelation.Complete.ToCreateForNewOrganization>()) {
            relation.Organization.Name = title;
        };
        foreach (var relation in OrganizationDetails.PersonOrganizationRelations.OfType<PersonOrganizationRelation.ForOrganization.Complete.Resolved.ToUpdate>()) {
            relation.Organization.Name = title;
        };
        foreach (var relation in OrganizationDetails.PersonOrganizationRelations.OfType<PersonOrganizationRelation.ForOrganization.Complete.Resolved.ToCreate>()) {
            relation.Organization.Name = title;
        };
        StateHasChanged();
    }
}
