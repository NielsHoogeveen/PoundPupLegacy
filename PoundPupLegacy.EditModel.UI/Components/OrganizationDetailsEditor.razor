@inherits EditorDetailBase
<div class="organization-fields">
    <div class="form-group">
        <label>Website</label>
        <InputText type="text" @bind-Value="@OrganizationDetails.WebSiteUrl" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText type="text" @bind-Value="@OrganizationDetails.EmailAddress" />
    </div>
    <div class="form-group">
        <label>Established</label>
        <FuzzyDateEditor @bind-Value=" OrganizationDetails.Establishment" />
    </div>
    <div class="form-group">
        <label>Terminated</label>
        <FuzzyDateEditor @bind-Value="OrganizationDetails.Termination" />
    </div>
</div>
<OrganizationOrganizationTypesEditor OrganizationDetails="OrganizationDetails" />
<InterOrganizationalRelationsEditor 
    RelationsFrom="OrganizationDetails.InterOrganizationalRelationsFrom.ToList()"
    RelationsTo="OrganizationDetails.InterOrganizationalRelationsTo.ToList()"
    RelationTypes="OrganizationDetails.InterOrganizationalRelationTypes" 
    OrganizationItem="OrganizationDetails.OrganizationItem"/>
<OrganizationPoliticalEntityRelationsEditor 
    PartyTypeName="organization"
    Organization="OrganizationDetails.OrganizationItem"
    Relations="OrganizationDetails.OrganizationPoliticalEntityRelations.ToList()"
    RelationTypes="OrganizationDetails.OrganizationPoliticalEntityRelationTypes" />
<PersonOrganizationRelationsEditorForOrganization 
    Organization="OrganizationDetails.OrganizationItem"
    Relations="OrganizationDetails.PersonOrganizationRelations.ToList()"
    RelationTypes="OrganizationDetails.PersonOrganizationRelationTypes" />

@code {
    [Parameter]
    [EditorRequired]
    public OrganizationDetails OrganizationDetails { get; set; } = default!;

    public override async Task<List<ErrorDetail>> Validate()
    {
        return await Task.FromResult(new List<ErrorDetail>());
    }

    public override void OnTitleChange(string title)
    {
        foreach (var relation in OrganizationDetails.OrganizationPoliticalEntityRelations.OfType<OrganizationPoliticalEntityRelation.Complete.Resolved.ToUpdate>()) {
            relation.Organization.Name = title;
        };
        foreach (var relation in OrganizationDetails.OrganizationPoliticalEntityRelations.OfType<OrganizationPoliticalEntityRelation.Complete.Resolved.ToCreateForExistingOrganization>()) {
            relation.Organization.Name = title;
        };
        foreach (var relation in OrganizationDetails.OrganizationPoliticalEntityRelations.OfType<OrganizationPoliticalEntityRelation.Complete.ToCreateForNewOrganization>()) {
            relation.Organization.Name = title;
        };
        foreach (var relation in OrganizationDetails.PersonOrganizationRelations.OfType<PersonOrganizationRelation.ForOrganization.Complete.Resolved.ToUpdate>()) {
            relation.Organization.Name = title;
        };
        foreach (var relation in OrganizationDetails.PersonOrganizationRelations.OfType<PersonOrganizationRelation.ForOrganization.Complete.Resolved.ToCreate>()) {
            relation.Organization.Name = title;
        };
        StateHasChanged();
    }
}
