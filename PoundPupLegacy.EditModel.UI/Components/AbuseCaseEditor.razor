@inherits EntityEditorBase<AbuseCase.ToUpdate, AbuseCase.ToCreate, Unit>
@if (Model is not null) {
    <NodeEditor 
        TCreateModel=AbuseCase.ToCreate
        TUpdateModel=AbuseCase.ToUpdate
        TResolveData=Unit
        Model=AbuseCase
        Title="Edit abuse case"
        OnValidationResult="() => Validate()">
        <NodeDetailsEditor 
            Model="AbuseCase.NodeDetails"
            OnTitleChanged="OnTitleChanged"
            @ref=nodeDetailsEditor>
            
            <Top>
                <NameableEditor Model="AbuseCase.NameableDetails" @ref=nameableEditor/>
            </Top>
            
            <Middle>
                <CaseDetailsEditor CaseDetails="AbuseCase.CaseDetails" @ref=caseDetailsEditor/>
                <AbuseCaseDetailsEditor AbuseCaseDetails="AbuseCase.AbuseCaseDetails" @ref=abuseCaseDetailsEditor/>
                <TermsEditor Model="AbuseCase.NameableDetails" />
            </Middle>
        
            <Bottom>
                <LocatableDetailsEditor LocatableDetails="AbuseCase.LocatableDetails" @ref=locatableDetailsEditor/>
            </Bottom>
        
        </NodeDetailsEditor>
        
    </NodeEditor>
}
@code {
    [Parameter]
    [EditorRequired]
    public AbuseCase AbuseCase { get; set; } = default!;

    protected override Resolver<AbuseCase.ToUpdate, AbuseCase.ToCreate, Unit> Model => AbuseCase;

    private NodeDetailsEditor? nodeDetailsEditor;
    private NameableEditor? nameableEditor;
    private LocatableDetailsEditor? locatableDetailsEditor;
    private CaseDetailsEditor? caseDetailsEditor;
    private AbuseCaseDetailsEditor? abuseCaseDetailsEditor;


    protected override List<EditorDetailBase?> DetailsEditors => new() {
        nodeDetailsEditor,
        nameableEditor,
        locatableDetailsEditor,
        caseDetailsEditor,
        abuseCaseDetailsEditor
    };
    protected override Unit ResolveData => Unit.Instance;
}
