@inject ILocationService LocationService
@inject IJSRuntime JSRuntime
@if(Relation is not null) {
    <EditForm EditContext="editContext">
        @if (Relation.PersonItem is PersonName) {
            <div class="form-group">
                <label>Party</label>
                <div>@Relation.PersonItem.Name</div>
            </div>
        }
        @if (Relation.PersonItem is PersonListItem partyListItem) {
            <SearchItemEditor T="PersonListItem"
            IsMandatory="true"
            @bind-Value="partyListItem"
            EnableEdit="false"
            Label="Party" />
        }
        <div class="type-and-swap">
            <div>
                <label for="relation-type">Relation type</label>
                <select id="relation-type" @onchange="OnChangeRelationType">
                    @foreach (var relationType in RelationTypes.OrderBy(x => x.Name)) {
                        @if (relationType.Id == RelationType.Id) {
                            <option selected value="@relationType.Id">@relationType.Name</option>
                        }
                        else {
                            <option value="@relationType.Id">@relationType.Name</option>
                        }
                    }
                </select>
            </div>
        </div>
        @if (Relation.PoliticalEntityItem is PoliticalEntityListItem politicalEntityListItem) {
            <SearchItemEditor T="PoliticalEntityListItem"
            IsMandatory="true"
            @bind-Value="politicalEntityListItem"
            EnableEdit="true"
            Label="Political entity" />
        }

        <SearchItemEditor T="DocumentListItem"
            IsMandatory="false"
            @bind-Value="Relation.ProofDocument"
            EnableEdit="true"
            Label="Proof document" />
        <div class="form-group">
            <label>Description</label>
            <CKEditor Id="relation-editor" @bind-Value="Relation.Description" />
        </div>
        <div class="form-group">
            <label>Start date</label>
            <InputDate @bind-Value="Relation.DateFrom" />
        </div>
        <div class="form-group">
            <label>End date</label>
            <InputDate @bind-Value="Relation.DateTo" />
        </div>
    </EditForm>
}
@code {

    [Parameter]
    public PersonPoliticalEntityRelation Relation { get; set; } = default!;

    [Parameter]
    public EventCallback<PersonPoliticalEntityRelation> RelationChanged { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<PersonPoliticalEntityRelationTypeListItem> RelationTypes { get; set; } = default!;

    private PersonPoliticalEntityRelationTypeListItem RelationType { get; set; } = default!;
    private EditContext? editContext;
    private ValidationMessageStore? validationMessageStore;

    protected override void OnInitialized()
    {
        editContext = new EditContext(Relation);
        validationMessageStore = new ValidationMessageStore(editContext);
        RelationType = RelationTypes.First(x => x.Id == Relation.PersonPoliticalEntityRelationType.Id);
    }

    private void OnChangeRelationType(ChangeEventArgs args)
    {
        if(args.Value is not null && args.Value is string str) {
            if(int.TryParse(str, out var organizationTypeId)) {
                RelationType = RelationTypes.First(x => x.Id == organizationTypeId);
                StateHasChanged();
            }
        }
    }
    public CompletedPersonPoliticalEntityRelation? GetValidRelation()
    {
        validationMessageStore?.Clear();
        bool hasErrors = false;
        if (Relation.PoliticalEntityItem is null) {
            validationMessageStore!.Add(editContext!.Field(nameof(Relation.PoliticalEntityItem)), "Political entity is required");
            hasErrors = true;
            editContext.NotifyValidationStateChanged();
        }
        if (hasErrors)
            return null;

        return Relation.Match<CompletedPersonPoliticalEntityRelation>(
            newPersonPoliticalEntityRelationNewPerson: r => r.GetCompletedRelation(Relation.PoliticalEntityItem!),
            newPersonPoliticalEntityRelationExistingPerson: r => r.GetCompletedRelation(Relation.PoliticalEntityItem!),
            existingPersonPoliticalEntityRelation: r => r,
            completedNewPersonPoliticalEntityRelationNewPerson: r => r,
            completedNewPersonPoliticalEntityRelationExistingPerson: r => r
        );
    }
}

