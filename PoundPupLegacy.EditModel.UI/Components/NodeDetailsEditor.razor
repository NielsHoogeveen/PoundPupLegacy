@inherits EditorDetailBase
<div class="form-group">
    <label for="title">Title</label>
    <InputText @bind-Value="Model.Title" id="title" class="title-editor" type="text" @oninput="OnTitleChange" maxlength="255"/>
    <ValidationMessage For="@(() => Model.Title)" />
</div>
@Top
<TagsEditor NodeTypesTags="Model.Tags.ToList()" />
@Middle
<TenantNodesEditor 
    @bind-Model=Model.Tenants 
    ForCreate="Model.GetType() == typeof(NodeDetails.ForCreate)" />
<AttachmentEditor Files="Model.Files"/>
@Bottom
@code {
    [Parameter]
    [EditorRequired]
    public NodeDetails Model { get; set; } = default!;

    [Parameter]
    public RenderFragment? Top { get; set; } 

    [Parameter]
    public RenderFragment? Middle { get; set; }

    [Parameter]
    public RenderFragment? Bottom { get; set; }

    [Parameter]
    public Action<string> OnTitleChanged { get; set; } = default!;

    private List<TenantDetails> tenantDetails = new List<TenantDetails>();

    public void OnTitleChange(ChangeEventArgs args)
    {
        if(args.Value is string str) {
            OnTitleChanged(str);
        }
    }

    public override void OnTitleChange(string title)
    {
    }

    public override async Task<List<System.ComponentModel.DataAnnotations.ValidationResult>> Validate()
    {
        var errors = new List<System.ComponentModel.DataAnnotations.ValidationResult>();
        if(Model.Title.Length > 255) {
            var component = new System.ComponentModel.DataAnnotations.ValidationResult("Title should not contain more than 255 characters", new[] { Model.Title });
            errors.Add(component);
        }
        if (Model.Title.Length < 1) {
            var component = new System.ComponentModel.DataAnnotations.ValidationResult("Title is required", new[] { Model.Title });
            errors.Add(component);
        }
        return await Task.FromResult(errors);
    }
}
