@inherits ViewerBase
@inject IDocumentableDocumentsSearchService searchService

@if(Elems is not null && NodeId is not null)
{
    <style>
    </style>
    <input id="tag-search" @bind="@documentableSearch" @oninput="OnSetTopicSearch" />

    @if (options.Any())
    {
        <div class="term-options">
        @foreach (var elem in options)
        {
            <div class="term-option" @onclick="() => SelectDocumentable(elem.DocumentableId)">@elem.Title</div>
        }
        </div>
    }
    @if (Elems.Any())
    {
        <div class="tag-elements">
        @foreach (var elem in Elems)
        {

            if (!elem.HasBeenDeleted)
            {
                <div class="tag-element">@elem.Title</div>
                <div class="close" @onclick="() => SetDocumentableToDeleted(elem.DocumentableId)">&times;</div>
            }

        }
        </div>
    }
}

@code {
    [Parameter]
    [EditorRequired]
    public List<DocumentableDocument>? Elems { get; set; }

    [Parameter]
    [EditorRequired]
    public required int? NodeId { get; init; }

    List<DocumentableDocument> options = new();

    string documentableSearch { get; set; } = "";

    private void SelectDocumentable(int documentableId)
    {
        var tag = options.FirstOrDefault(x => x.DocumentableId == documentableId);
        if (tag is not null && Elems is not null)
        {
            var elem = Elems.FirstOrDefault(x => x.DocumentableId == documentableId);
            if (elem is null)
            {
                Elems.Add(tag);
            }
            else
            {
                elem.HasBeenDeleted = false;
            }
        }
        options.Clear();
        documentableSearch = "";
        StateHasChanged();

    }

    private async Task OnSetTopicSearch(ChangeEventArgs args)
    {
        options.Clear();
        var searchString = args.Value?.ToString() ?? string.Empty;
        if (!string.IsNullOrEmpty(searchString) && NodeId is not null)
        {
            options = await searchService.GetDocumentableDocuments(
                nodeId: NodeId.Value, 
                userId: UserId, 
                tenantId: TenantId, 
                searchString: searchString);
        }
        StateHasChanged();
    }

    private void SetDocumentableToDeleted(int documentableId)
    {

        if (Elems is not null)
        {
            var elem = Elems.FirstOrDefault(x => x.DocumentableId == documentableId);
            if (elem is not null)
            {
                if (elem.IsStored)
                {
                    elem.SetToDeleted();
                }
                else
                {
                    Elems.Remove(elem);
                }
                StateHasChanged();
            }
        }
    }
}
