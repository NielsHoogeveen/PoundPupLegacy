@inject ILocationService LocationService
@inject IJSRuntime JSRuntime
@if (editContext is not null) {
    @if (RelationContext.RelationToEdit.PersonItemFrom is PersonName) {
        <div class="form-group">
            <label>Person from</label>
            <div>@RelationContext.RelationToEdit.PersonFromName</div>
        </div>
    }
    @if (RelationContext.RelationToEdit.PersonItemFrom is PersonListItem personListItemFrom) {
        <SearchItemEditor T="PersonListItem"
                          IsMandatory="true"
        @bind-Value="personListItemFrom"
                          EnableEdit="false"
                          Label="Person from" />
    }
    <div class="type-and-swap">
        <div>
            <label for="relation-type">Relation type</label>
            <select id="relation-type" @onchange="OnChangeRelationType">
                @foreach (var relationType in RelationTypes.OrderBy(x => x.Name)) {
                    @if (relationType.Id == RelationType.Id) {
                        <option selected value="@relationType.Id">@relationType.Name</option>
                    }
                    else {
                        <option value="@relationType.Id">@relationType.Name</option>
                    }
                }
            </select>
        </div>
        @if (!RelationType.IsSymmetric) {
            <button type="button" @onclick="() => Swap(RelationContext)">Swap To/From</button>
        }

    </div>
    <SearchItemEditor 
        T="PersonListItem"
        IsMandatory="true"
    @bind-Value="RelationContext.RelationToEdit.PersonItemTo"
        EnableEdit="true"
        Label="Person to" />
    <SearchItemEditor 
        T="DocumentListItem"
        IsMandatory="false"
        @bind-Value="RelationContext.RelationToEdit.ProofDocument"
        EnableEdit="true"
        Label="Proof document" />
    <div class="form-group">
        <label>Description</label>
        <CKEditor Id="relation-editor" @bind-Value="RelationContext.RelationToEdit.Description" />
    </div>
    <div class="form-group">
        <label>Start date</label>
        <InputDate @bind-Value="RelationContext.RelationToEdit.DateFrom" />
    </div>
    <div class="form-group">
        <label>End date</label>
        <InputDate @bind-Value="RelationContext.RelationToEdit.DateTo" />
    </div>
}
@code {

    [Parameter]
    [EditorRequired]
    public InterPersonalRelationsEditor.RelationContext.RelationContextFrom RelationContext { get; set; } = default!;


    [Parameter]
    [EditorRequired]
    public List<InterPersonalRelationTypeListItem> RelationTypes { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Action<InterPersonalRelationsEditor.RelationContext> Swap { get; set; } = default!;

    private InterPersonalRelationTypeListItem RelationType { get; set; } = default!;
    private EditContext? editContext;
    private ValidationMessageStore? validationMessageStore;


    protected override void OnInitialized()
    {
        editContext = new EditContext(RelationContext.RelationToEdit);
        validationMessageStore = new ValidationMessageStore(editContext);
        RelationType = RelationTypes.First(x => x.Id == RelationContext.RelationToEdit.InterPersonalRelationType.Id);
    }

    private void OnChangeRelationType(ChangeEventArgs args)
    {
        if (args.Value is not null && args.Value is string str) {
            if (int.TryParse(str, out var typeId)) {
                RelationType = RelationTypes.First(x => x.Id == typeId);
                StateHasChanged();
            }
        }
    }

    public CompletedInterPersonalRelationFrom? GetValidRelation()
    {
        validationMessageStore?.Clear();
        bool hasErrors = false;
        if (RelationContext.RelationToEdit.PersonItemTo is null) {
            validationMessageStore!.Add(editContext!.Field(nameof(RelationContext.RelationToEdit.PersonItemTo)), "Person to is required");
            hasErrors = true;
            editContext.NotifyValidationStateChanged();
        }
        if (hasErrors)
            return null;

        return RelationContext.RelationToEdit.Match<CompletedInterPersonalRelationFrom>(
            incompleteInterPersonalRelationFrom: x => x.GetCompletedRelation(RelationContext.RelationToEdit.PersonItemTo!),
            completedInterPersonalRelationFrom: x => x with { PersonTo = RelationContext.RelationToEdit.PersonItemTo! }
        );
    }
}

