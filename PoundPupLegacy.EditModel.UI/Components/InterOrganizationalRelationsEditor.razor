@inherits EditorBase
@if(editContext is not null) {
    <ModalDialog 
        Title="Add inter-organizational relation" 
        Id="inter-organizational-relation-dialog" 
        OnOk="OnOk" 
        OnCancel="OnCancel">
        <DialogContent>
            <InterOrganizationalRelationEditorDialog  
                RelationTypes=RelationTypes
                EditContext=editContext
                @ref=dialog/>
        </DialogContent>
    </ModalDialog>
}
<div class="relations-editor">
    <h4>Relations between this organization and another one</h4>
    @if (Relations.Any())
    {
        <div class="relations">
            <div class="grid-header first">From</div>
            <div class="grid-header">Type</div>
            <div class="grid-header">To</div>
            <div class="grid-header">Start</div>
            <div class="grid-header">End</div>
            <div class="grid-header"></div>
            <div class="grid-header"></div>
            @foreach(var relation in Relations) {
                var classString = relation.HasBeenDeleted ? "row deleted" : "row";
                <div class="@classString first">
                    @relation.OrganizationFromName
                </div>
                <div class="@classString">
                    @relation.InterOrganizationalRelationType.Name
                </div>
                <div class="@classString">
                    @relation.OrganizationToName
                </div>
                <div class="@classString">
                    @relation.DateFrom
                </div>
                <div class="@classString">
                    @relation.DateTo
                </div>
                <div class="@classString">
                    @if (!relation.HasBeenDeleted)
                    {
                        <button type="button" @onclick="() => EditRelation(relation)">edit</button>
                    }
                </div>
                <div class="@classString">
                    @if (relation.HasBeenDeleted) {
                        <button type="button" @onclick="() => RestoreRelation(relation)">restore</button>
                    }
                    else {
                        <button type="button" @onclick="() => RemoveRelation(relation)">remove</button>
                    }
                </div>

            }
        </div>
    }        
    <button type="button" @onclick="OnAdd">Add</button>
</div>
@code {
    [Parameter]
    [EditorRequired]
    public List<CompletedInterOrganizationalRelation> Relations { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public PartyItem.OrganizationItem OrganizationItem { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<InterOrganizationalRelationTypeListItem> RelationTypes { get; set; } = default!;

    public interface OrganizationEditContext
    {
        EditMode EditMode { get; }
        InterOrganizationalRelation RelationToEdit { get; }
    }
    private class OrganizationUpdateContext : OrganizationEditContext
    {
        public EditMode EditMode => EditMode.Update;
        public required InterOrganizationalRelation RelationToEdit { get; init; }
        public required CompletedInterOrganizationalRelation CompletedRelationToEdit { get; init; }
    }
    private class OrganizationCreateContext : OrganizationEditContext
    {
        public EditMode EditMode => EditMode.Create;
        public required InterOrganizationalRelation RelationToEdit { get; init; }
    }

    private OrganizationEditContext? editContext;


    private InterOrganizationalRelationEditorDialog? dialog;

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
    }
    public override void OnTitleChange(string title)
    {

    }
    private void RestoreRelation(InterOrganizationalRelation relation)
    {
        relation.HasBeenDeleted = false;
        StateHasChanged();
    }

    private void RemoveRelation(InterOrganizationalRelation relation)
    {
        relation.HasBeenDeleted = true;
        StateHasChanged();
    }

    private void EditRelation(CompletedInterOrganizationalRelation relation)
    {

        editContext = new OrganizationUpdateContext {
            CompletedRelationToEdit = relation,
            RelationToEdit = relation
        };
        StateHasChanged();
    }
    private void OnOk()
    {
        if (dialog is not null && editContext is not null) {
            var relation = dialog.GetValidRelation();
            if(relation is null)
                return;
            if(editContext is OrganizationUpdateContext updateContext) {
                Relations.Remove(updateContext.CompletedRelationToEdit);
            }
            Relations.Add(relation);
        }
        editContext = null;
        StateHasChanged();
    }
    private void OnCancel()
    {
        editContext = null;
        StateHasChanged();
    }
    private void OnAdd()
    {

        editContext = new OrganizationCreateContext{ 
            RelationToEdit =  OrganizationItem.Match<InterOrganizationalRelation>(
                li => new NewInterOrganizationalExistingFromRelation {
                    OrganizationFrom = li,
                    OrganizationTo = null,
                    InterOrganizationalRelationType = RelationTypes.First(),
                    Title = "",
                    DateFrom = null,
                    DateTo = null,
                    Description = "",
                    Files = new List<File>(),
                    NodeTypeName = "inter organizational relation",
                    OwnerId = TenantId,
                    PublisherId = UserId,
                    GeographicalEntity = null,
                    ProofDocument = null,
                    Tags = new List<Tags>(),
                    TenantNodes = new List<TenantNode>(),
                    Tenants = new List<Tenant>(),
                },
                nm => new NewInterOrganizationalNewFromRelation {
                    OrganizationFrom = nm,
                    OrganizationTo = null,
                    InterOrganizationalRelationType = RelationTypes.First(),
                    Title = "",
                    DateFrom = null,
                    DateTo = null,
                    Description = "",
                    Files = new List<File>(),
                    NodeTypeName = "inter organizational relation",
                    OwnerId = TenantId,
                    PublisherId = UserId,
                    GeographicalEntity = null,
                    ProofDocument = null,
                    Tags = new List<Tags>(),
                    TenantNodes = new List<TenantNode>(),
                    Tenants = new List<Tenant>(),
                }
            )
        };
        StateHasChanged();
    }

}
