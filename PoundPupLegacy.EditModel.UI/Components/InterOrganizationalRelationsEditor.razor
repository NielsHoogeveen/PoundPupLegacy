@inherits EditorBase
@if (_relationToEdit is not null) {
    <ModalDialog 
        Title="Add inter-organizational relation" 
        Id="inter-organizational-relation-dialog" 
        OnOk="OnOk" 
        OnCancel="OnCancel">
        <DialogContent>
            <InterOrganizationalRelationEditorDialog  
                @bind-Relation="_relationToEdit" 
                RelationTypes="@RelationTypes"
                OrganizationId="Organization?.Id"/>
        </DialogContent>
    </ModalDialog>
}
<div class="relations-editor">
    <div class="header">
        <h4>Relations between this organization and another one</h4>
        <button type="button" @onclick="OnAdd">Add</button>
    </div>
    @if (Relations.Any())
    {
        <div class="relations">
            <div class="grid-header first">From</div>
            <div class="grid-header">Type</div>
            <div class="grid-header">To</div>
            <div class="grid-header">Start</div>
            <div class="grid-header">End</div>
            <div class="grid-header"></div>
            @foreach(var relation in Relations) {
                <div class="row first">
                    @relation.OrganizationFrom?.Name
                </div>
                <div class="row">
                    @relation.InterOrganizationalRelationType.Name
                </div>
                <div class="row">
                    @relation.OrganizationTo?.Name
                </div>
                <div class="row">
                    @relation.DateFrom
                </div>
                <div class="row">
                    @relation.DateTo
                </div>
                <div class="row">
                    <button type="button" @onclick="() => EditRelation(relation)">edit</button>
                </div>
            }
        </div>
    }
</div>
@code {
    [Parameter]
    [EditorRequired]
    public List<InterOrganizationalRelation> Relations { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public OrganizationListItem Organization { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<InterOrganizationalRelationTypeListItem> RelationTypes { get; set; } = default!;

    private InterOrganizationalRelation? _relationToEdit = null;

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
    }
    public override void OnTitleChange(string title)
    {

    }

    private void EditRelation(InterOrganizationalRelation relationToEdit)
    {
        _relationToEdit = relationToEdit;
        StateHasChanged();
    }
    private void OnOk()
    {
        if (_relationToEdit is not null && !_relationToEdit.NodeId.HasValue) {
            Relations.Add(_relationToEdit);
        }
        _relationToEdit = null;
        StateHasChanged();
    }
    private void OnCancel()
    {
        _relationToEdit = null;
        StateHasChanged();
    }
    private void OnAdd()
    {
        _relationToEdit = new InterOrganizationalRelation {
                OrganizationFrom = Organization,
                OrganizationTo = null,
                InterOrganizationalRelationType = RelationTypes.First(),
                Title = "",
                DateFrom = null,
                DateTo = null,
                Description = "",
                Files = new List<File>(),
                HasBeenDeleted = false,
                NodeId = null,
                NodeTypeName = "inter organizational relation",
                OwnerId = TenantId,
                PublisherId = UserId,
                GeographicalEntity = null,
                ProofDocument = null,
                Tags = new List<Tags>(),
                TenantNodes = new List<TenantNode>(),
                Tenants = new List<Tenant>(),
                UrlId = null,
            };
        StateHasChanged();
    }

}
