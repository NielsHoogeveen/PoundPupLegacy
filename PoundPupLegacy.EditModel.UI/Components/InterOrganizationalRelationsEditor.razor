@inherits EditorBase
@if(relationContext is not null){
    <ModalDialog 
        Title="Add inter-organizational relation"
        Id="inter-organizational-relation-dialog"
        OnOk="() => Ok(relationContext)"
        OnCancel="Cancel"
        @ref=dialog>
        <DialogContent>
            @if (relationContext is InterOrganizationalRelationsEditor.RelationContext.RelationContextFrom ctxFrom) 
            {
                <InterOrganizationalRelationFromEditorDialog 
                    RelationTypes=RelationTypes
                    RelationContext=ctxFrom
                    Swap=Swap
                    @ref=fromDialog />
            }
            @if (relationContext is InterOrganizationalRelationsEditor.RelationContext.RelationContextTo ctxTo) {
                <InterOrganizationalRelationToEditorDialog 
                    RelationTypes=RelationTypes
                    RelationContext=ctxTo
                    Swap=Swap
                    @ref=toDialog />
            }
    </DialogContent>
    </ModalDialog>
}

<InterOrganizationalRelationsListEditor 
    TRelation="CompletedInterOrganizationalRelationFrom"
    Relations="RelationsFrom"
    Edit="EditRelationFrom"
    Add="AddRelationFrom"
    @ref=interOrganizationalRelationsFromEditor />

<InterOrganizationalRelationsListEditor 
    TRelation="CompletedInterOrganizationalRelationTo"
    Relations="RelationsTo"
    Edit="EditRelationTo"
    Add="AddRelationTo"
    @ref=interOrganizationalRelationsToEditor />

@code {
    [Parameter]
    [EditorRequired]
    public List<CompletedInterOrganizationalRelationFrom> RelationsFrom { get; set; } = default!;
    [Parameter]
    [EditorRequired]
    public List<CompletedInterOrganizationalRelationTo> RelationsTo { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public OrganizationItem OrganizationItem { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<InterOrganizationalRelationTypeListItem> RelationTypes { get; set; } = default!;

    private RelationContext? relationContext = null;

    private InterOrganizationalRelationsListEditor<CompletedInterOrganizationalRelationFrom>? interOrganizationalRelationsFromEditor;

    private InterOrganizationalRelationsListEditor<CompletedInterOrganizationalRelationTo>? interOrganizationalRelationsToEditor;

    private ModalDialog? dialog;
    private InterOrganizationalRelationFromEditorDialog? fromDialog;
    private InterOrganizationalRelationToEditorDialog? toDialog;


    public abstract record RelationContext
    {
        private RelationContext() { }

        public abstract RelationContext Swap();

        public abstract void Match(
            Action<RelationContextFrom> relationContextFrom,
            Action<RelationContextTo> relationContextTo
        );

        public abstract record RelationContextFrom: RelationContext
        {
            private RelationContextFrom() { }
            public required InterOrganizationalRelationFrom RelationToEdit { get; init; }

            public abstract override RelationContextTo Swap();

            public abstract void Match(
                Action<RelationContextFromNew> relationContextFromNew,
                Action<RelationContextFromEditTo> relationContextFromEditTo,
                Action<RelationContextFromEditFrom> relationContextFromEditFrom
            );
            public override void Match(
                Action<RelationContextFrom> relationContextFrom,
                Action<RelationContextTo> relationContextTo
            )
            {
                relationContextFrom(this);
            }

            public sealed record RelationContextFromNew : RelationContextFrom
            {
                public sealed override RelationContextTo Swap()
                {
                    return new RelationContextTo.RelationContextToNew
                    {
                            RelationToEdit = RelationToEdit.SwapFromAndTo()
                    };
                }
                public override void Match(
                    Action<RelationContextFromNew> relationContextFromNew,
                    Action<RelationContextFromEditTo> relationContextFromEditTo,
                    Action<RelationContextFromEditFrom> relationContextFromEditFrom
                )
                {
                    relationContextFromNew(this);
                }

            }

            public sealed record RelationContextFromEditTo: RelationContextFrom
            {
                public required CompletedInterOrganizationalRelationTo CompletedRelationToRemove { get; init; }

                public sealed override RelationContextTo Swap()
                {
                    return new RelationContextTo.RelationContextToEditTo {
                        RelationToEdit = RelationToEdit.SwapFromAndTo(),
                        CompletedRelationToRemove = CompletedRelationToRemove
                    };
                }
                public override void Match(
                    Action<RelationContextFromNew> relationContextFromNew,
                    Action<RelationContextFromEditTo> relationContextFromEditTo,
                    Action<RelationContextFromEditFrom> relationContextFromEditFrom
                )
                {
                    relationContextFromEditTo(this);
                }

            }
            public sealed record RelationContextFromEditFrom : RelationContextFrom
            {
                public required CompletedInterOrganizationalRelationFrom CompletedRelationToRemove { get; init; }
                public sealed override RelationContextTo Swap()
                {
                    return new RelationContextTo.RelationContextToEditFrom {
                        RelationToEdit = RelationToEdit.SwapFromAndTo(),
                        CompletedRelationToRemove = CompletedRelationToRemove
                    };
                }
                public override void Match(
                    Action<RelationContextFromNew> relationContextFromNew,
                    Action<RelationContextFromEditTo> relationContextFromEditTo,
                    Action<RelationContextFromEditFrom> relationContextFromEditFrom
                )
                {
                    relationContextFromEditFrom(this);
                }
            }
        }
        public abstract record RelationContextTo : RelationContext
        {
            private RelationContextTo() { }
            public required InterOrganizationalRelationTo RelationToEdit { get; init; }

            public abstract override RelationContextFrom Swap();

            public abstract void Match(
                Action<RelationContextToNew> relationContextToNew,
                Action<RelationContextToEditTo> relationContextToEditTo,
                Action<RelationContextToEditFrom> relationContextToEditFrom
            );
            public override void Match(
                Action<RelationContextFrom> relationContextFrom,
                Action<RelationContextTo> relationContextTo
            )
            {
                relationContextTo(this);
            }

            public sealed record RelationContextToNew : RelationContextTo
            {
                public sealed override RelationContextFrom Swap()
                {
                    return new RelationContextFrom.RelationContextFromNew {
                        RelationToEdit = RelationToEdit.SwapFromAndTo()
                    };
                }
                public override void Match(
                    Action<RelationContextToNew> relationContextToNew,
                    Action<RelationContextToEditTo> relationContextToEditTo,
                    Action<RelationContextToEditFrom> relationContextToEditFrom
                )
                {
                    relationContextToNew(this);
                }
            }

            public sealed record RelationContextToEditTo : RelationContextTo
            {
                public required CompletedInterOrganizationalRelationTo CompletedRelationToRemove { get; init; }
                public sealed override RelationContextFrom Swap()
                {
                    return new RelationContextFrom.RelationContextFromEditTo {
                            RelationToEdit = RelationToEdit.SwapFromAndTo(),
                            CompletedRelationToRemove = CompletedRelationToRemove
                        };
                }
                public override void Match(
                    Action<RelationContextToNew> relationContextToNew,
                    Action<RelationContextToEditTo> relationContextToEditTo,
                    Action<RelationContextToEditFrom> relationContextToEditFrom
                )
                {
                    relationContextToEditTo(this);
                }
            }
            public sealed record RelationContextToEditFrom : RelationContextTo
            {
                public required CompletedInterOrganizationalRelationFrom CompletedRelationToRemove { get; init; }
                public sealed override RelationContextFrom Swap()
                {
                    return new RelationContextFrom.RelationContextFromEditFrom {
                        RelationToEdit = RelationToEdit.SwapFromAndTo(),
                        CompletedRelationToRemove = CompletedRelationToRemove
                    };
                }
                public override void Match(
                    Action<RelationContextToNew> relationContextToNew,
                    Action<RelationContextToEditTo> relationContextToEditTo,
                    Action<RelationContextToEditFrom> relationContextToEditFrom
                )
                {
                    relationContextToEditFrom(this);
                }
            }
        }
    }

    public void UpdateFrom(RelationContext.RelationContextFrom relationContext)
    {

    }
    public void UpdateTo(RelationContext.RelationContextTo relationContext)
    {

    }
    private void AddRelationFrom()
    {
        var relationToEdit = OrganizationItem.Match<IncompleteInterOrganizationalRelationFrom>(
            organizationListItem: li => li.GetNewInterOrganizationalRelationFrom(RelationTypes.First(), TenantId, UserId),
            organizationName: nm => nm.GetNewInterOrganizationalRelationFrom(RelationTypes.First(), TenantId, UserId)
        );
        relationContext = new RelationContext.RelationContextFrom.RelationContextFromNew {
            RelationToEdit = relationToEdit
        };
        StateHasChanged();
    }
    private void AddRelationTo()
    {
        var relationToEdit = OrganizationItem.Match<IncompleteInterOrganizationalRelationTo>(
            organizationListItem: li => li.GetNewInterOrganizationalRelationTo(RelationTypes.First(), TenantId, UserId),
            organizationName: nm => nm.GetNewInterOrganizationalRelationTo(RelationTypes.First(), TenantId, UserId)
        );

        relationContext = new RelationContext.RelationContextTo.RelationContextToNew {
            RelationToEdit = relationToEdit
        };
        StateHasChanged();
    }

    private void EditRelationFrom(CompletedInterOrganizationalRelationFrom relation)
    {
        relationContext = new RelationContext.RelationContextFrom.RelationContextFromEditFrom
        {
            RelationToEdit = relation,
            CompletedRelationToRemove = relation
        };
        StateHasChanged();
    }
    private void EditRelationTo(CompletedInterOrganizationalRelationTo relation)
    {
        relationContext = new RelationContext.RelationContextTo.RelationContextToEditTo {
            RelationToEdit = relation,
            CompletedRelationToRemove = relation
        };
        StateHasChanged();
    }

    public void Swap(RelationContext relationContext)
    {
        this.relationContext = relationContext.Swap();        
        StateHasChanged();
    }

    public void Cancel()
    {
        relationContext = null;
        StateHasChanged();
    }
    public void Ok(InterOrganizationalRelationsEditor.RelationContext relationContext)
    {
        relationContext.Match(OkFrom, OkTo);
        this.relationContext = null;
        StateHasChanged();
    }
    public void OkFrom(InterOrganizationalRelationsEditor.RelationContext.RelationContextFrom relationContext)
    {
        if (interOrganizationalRelationsFromEditor is not null && fromDialog is not null) {
            var relation = fromDialog.GetValidRelation();
            if (relation is not null) {
                relationContext.Match(
                    relationContextFromNew => {
                        RelationsFrom.Add(relation);
                    },
                    relationContextFromEditTo => {
                        RelationsFrom.Add(relation);
                        RelationsTo.Remove(relationContextFromEditTo.CompletedRelationToRemove);
                    },
                    relationContextFromEditFrom => {
                        RelationsFrom.Add(relation);
                        RelationsFrom.Remove(relationContextFromEditFrom.CompletedRelationToRemove);
                    }
                );
            }
        }
    }
    public void OkTo(InterOrganizationalRelationsEditor.RelationContext.RelationContextTo relationContext)
    {
        if (interOrganizationalRelationsToEditor is not null && toDialog is not null) {
            var relation = toDialog.GetValidRelation();
            if(relation is not null) {
                relationContext.Match(
                    relationContextToNew =>
                    {
                        RelationsTo.Add(relation);
                    },
                    relationContextToEditTo =>
                    {
                        RelationsTo.Add(relation);
                        RelationsTo.Remove(relationContextToEditTo.CompletedRelationToRemove);
                    },
                    relationContextToEditFrom =>
                    {
                        RelationsTo.Add(relation);
                        RelationsFrom.Remove(relationContextToEditFrom.CompletedRelationToRemove);
                    }
                );
            }
        }
    }

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
    }
    public override void OnTitleChange(string title)
    {
        if(interOrganizationalRelationsFromEditor is not null) {
            interOrganizationalRelationsFromEditor.OnTitleChange(title);
        }
        if (interOrganizationalRelationsToEditor is not null) {
            interOrganizationalRelationsToEditor.OnTitleChange(title);
        }
    }
}
