@inherits EditorBase
@if (relationContext is InterPersonalRelationsEditor.RelationContext.RelationContextFrom ctxFrom) {

    <ModalDialog 
        Title="Add inter-personal relation"
        Id="inter-personal-relation-dialog"
        OnOk="() => OkFrom(ctxFrom)"
        OnCancel="CancelFrom">
        <DialogContent>
            <InterPersonalRelationFromEditorDialog 
                RelationTypes=RelationTypes
                RelationContext=ctxFrom
                Swap=Swap
            @ref=dialogFrom />
        </DialogContent>
    </ModalDialog>

}
@if (relationContext is InterPersonalRelationsEditor.RelationContext.RelationContextTo ctxTo) {

    <ModalDialog 
        Title="Add inter-personal relation"
        Id="inter-personal-relation-dialog"
        OnOk="() => OkTo(ctxTo)"
        OnCancel="CancelTo">
        <DialogContent>
            <InterPersonalRelationToEditorDialog 
                RelationTypes=RelationTypes
                RelationContext=ctxTo
                Swap=Swap
            @ref=dialogTo />
        </DialogContent>
    </ModalDialog>
}

<InterPersonalRelationsListEditor 
    Relations="RelationsFrom"
    Edit="EditRelationFrom"
    Add="AddRelationFrom"
    @ref=interPersonalRelationsFromEditor />

<InterPersonalRelationsListEditor 
    Relations="RelationsTo"
    Edit="EditRelationTo"
    Add="AddRelationTo"
    @ref=interPersonalRelationsToEditor />


@code {
    [Parameter]
    [EditorRequired]
    public List<CompletedInterPersonalRelationFrom> RelationsFrom { get; set; } = default!;
    [Parameter]
    [EditorRequired]
    public List<CompletedInterPersonalRelationTo> RelationsTo { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public PersonItem PersonItem { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<InterPersonalRelationTypeListItem> RelationTypes { get; set; } = default!;

    private RelationContext? relationContext = null;

    private InterPersonalRelationsListEditor<CompletedInterPersonalRelationFrom>? interPersonalRelationsFromEditor;

    private InterPersonalRelationsListEditor<CompletedInterPersonalRelationTo>? interPersonalRelationsToEditor;

    private InterPersonalRelationFromEditorDialog? dialogFrom;

    private InterPersonalRelationToEditorDialog? dialogTo;

    public abstract record RelationContext
    {
        private RelationContext() { }

        public abstract RelationContext Swap();

        public abstract record RelationContextFrom : RelationContext
        {
            private RelationContextFrom() { }
            public required InterPersonalRelationFrom RelationToEdit { get; init; }

            public abstract override RelationContextTo Swap();

            public abstract void Match(
                Action<RelationContextFromNew> relationContextFromNew,
                Action<RelationContextFromEditTo> relationContextFromEditTo,
                Action<RelationContextFromEditFrom> relationContextFromEditFrom
            );

            public sealed record RelationContextFromNew : RelationContextFrom
            {
                public override RelationContextTo Swap()
                {
                    return new RelationContextTo.RelationContextToNew {
                            RelationToEdit = this.RelationToEdit.SwapFromAndTo()
                        };
                }
                public override void Match(
                    Action<RelationContextFromNew> relationContextFromNew,
                    Action<RelationContextFromEditTo> relationContextFromEditTo,
                    Action<RelationContextFromEditFrom> relationContextFromEditFrom
                )
                {
                    relationContextFromNew(this);
                }

            }

            public sealed record RelationContextFromEditTo : RelationContextFrom
            {
                public required CompletedInterPersonalRelationTo CompletedRelationToRemove { get; init; }

                public override RelationContextTo Swap()
                {
                    return new RelationContextTo.RelationContextToEditTo {
                            RelationToEdit = RelationToEdit.SwapFromAndTo(),
                            CompletedRelationToRemove = CompletedRelationToRemove
                        };
                }
                public override void Match(
                    Action<RelationContextFromNew> relationContextFromNew,
                    Action<RelationContextFromEditTo> relationContextFromEditTo,
                    Action<RelationContextFromEditFrom> relationContextFromEditFrom
                )
                {
                    relationContextFromEditTo(this);
                }

            }
            public sealed record RelationContextFromEditFrom : RelationContextFrom
            {
                public required CompletedInterPersonalRelationFrom CompletedRelationToRemove { get; init; }
                public override RelationContextTo Swap()
                {
                    return new RelationContextTo.RelationContextToEditFrom {
                            RelationToEdit = RelationToEdit.SwapFromAndTo(),
                            CompletedRelationToRemove = CompletedRelationToRemove
                        };
                }
                public override void Match(
                    Action<RelationContextFromNew> relationContextFromNew,
                    Action<RelationContextFromEditTo> relationContextFromEditTo,
                    Action<RelationContextFromEditFrom> relationContextFromEditFrom
                )
                {
                    relationContextFromEditFrom(this);
                }
            }
        }
        public abstract record RelationContextTo : RelationContext
        {
            private RelationContextTo() { }
            public required InterPersonalRelationTo RelationToEdit { get; init; }

            public abstract override RelationContextFrom Swap();

            public abstract void Match(
                Action<RelationContextToNew> relationContextToNew,
                Action<RelationContextToEditTo> relationContextToEditTo,
                Action<RelationContextToEditFrom> relationContextToEditFrom
            );

            public sealed record RelationContextToNew : RelationContextTo
            {
                public override RelationContextFrom Swap()
                {
                    return new RelationContextFrom.RelationContextFromNew {
                            RelationToEdit = this.RelationToEdit.SwapFromAndTo()
                        };
                }
                public override void Match(
                    Action<RelationContextToNew> relationContextToNew,
                    Action<RelationContextToEditTo> relationContextToEditTo,
                    Action<RelationContextToEditFrom> relationContextToEditFrom
                )
                {
                    relationContextToNew(this);
                }
            }

            public sealed record RelationContextToEditTo : RelationContextTo
            {
                public required CompletedInterPersonalRelationTo CompletedRelationToRemove { get; init; }
                public override RelationContextFrom Swap()
                {
                    return new RelationContextFrom.RelationContextFromEditTo {
                            RelationToEdit = RelationToEdit.SwapFromAndTo(),
                            CompletedRelationToRemove = CompletedRelationToRemove
                        };
                }
                public override void Match(
                    Action<RelationContextToNew> relationContextToNew,
                    Action<RelationContextToEditTo> relationContextToEditTo,
                    Action<RelationContextToEditFrom> relationContextToEditFrom
                )
                {
                    relationContextToEditTo(this);
                }
            }
            public sealed record RelationContextToEditFrom : RelationContextTo
            {
                public required CompletedInterPersonalRelationFrom CompletedRelationToRemove { get; init; }
                public override RelationContextFrom Swap()
                {
                    return new RelationContextFrom.RelationContextFromEditFrom {
                            RelationToEdit = RelationToEdit.SwapFromAndTo(),
                            CompletedRelationToRemove = CompletedRelationToRemove
                        };
                }
                public override void Match(
                    Action<RelationContextToNew> relationContextToNew,
                    Action<RelationContextToEditTo> relationContextToEditTo,
                    Action<RelationContextToEditFrom> relationContextToEditFrom
                )
                {
                    relationContextToEditFrom(this);
                }
            }
        }
    }

    public void UpdateFrom(RelationContext.RelationContextFrom relationContext)
    {

    }
    public void UpdateTo(RelationContext.RelationContextTo relationContext)
    {

    }
    private void AddRelationFrom()
    {
        var relationToEdit = PersonItem.Match<IncompleteInterPersonalRelationFrom>(
            personListItem: li => li.GetNewInterPersonalRelationFrom(RelationTypes.First(), TenantId, UserId),
            personName: nm => nm.GetNewInterPersonalRelationFrom(RelationTypes.First(), TenantId, UserId)
        );
        relationContext = new RelationContext.RelationContextFrom.RelationContextFromNew {
                RelationToEdit = relationToEdit
            };
        StateHasChanged();
    }
    private void AddRelationTo()
    {
        var relationToEdit = PersonItem.Match<IncompleteInterPersonalRelationTo>(
            personListItem: li => li.GetNewInterPersonalRelationTo(RelationTypes.First(), TenantId, UserId),
            personName: nm => nm.GetNewInterPersonalRelationTo(RelationTypes.First(), TenantId, UserId)
        );

        relationContext = new RelationContext.RelationContextTo.RelationContextToNew {
                RelationToEdit = relationToEdit
            };
        StateHasChanged();
    }

    private void EditRelationFrom(CompletedInterPersonalRelationFrom relation)
    {
        relationContext = new RelationContext.RelationContextFrom.RelationContextFromEditFrom {
                RelationToEdit = relation,
                CompletedRelationToRemove = relation
            };
        StateHasChanged();
    }
    private void EditRelationTo(CompletedInterPersonalRelationTo relation)
    {
        relationContext = new RelationContext.RelationContextTo.RelationContextToEditTo {
                RelationToEdit = relation,
                CompletedRelationToRemove = relation
            };
        StateHasChanged();
    }

    public void Swap(RelationContext relationContext)
    {
        relationContext = relationContext.Swap();
        StateHasChanged();
    }

    public void OkFrom(InterPersonalRelationsEditor.RelationContext.RelationContextFrom relationContext)
    {
        if (dialogFrom is not null) {
            var relation = dialogFrom.GetValidRelation();
            if (relation is not null) {
                relationContext.Match(
                    relationContextFromNew => {
                        RelationsFrom.Add(relation);
                    },
                    relationContextFromEditTo => {
                        RelationsFrom.Add(relation);
                        RelationsTo.Remove(relationContextFromEditTo.CompletedRelationToRemove);
                    },
                    relationContextFromEditFrom => {
                        RelationsFrom.Add(relation);
                        RelationsFrom.Remove(relationContextFromEditFrom.CompletedRelationToRemove);
                    }
                );
            }
        }
        StateHasChanged();
    }
    public void CancelFrom()
    {
        relationContext = null;
        StateHasChanged();
    }
    public void OkTo(InterPersonalRelationsEditor.RelationContext.RelationContextTo relationContext)
    {
        if (dialogTo is not null) {
            var relation = dialogTo.GetValidRelation();
            if (relation is not null) {
                relationContext.Match(
                    relationContextToNew => {
                        RelationsTo.Add(relation);
                    },
                    relationContextToEditTo => {
                        RelationsTo.Add(relation);
                        RelationsTo.Remove(relationContextToEditTo.CompletedRelationToRemove);
                    },
                    relationContextToEditFrom => {
                        RelationsTo.Add(relation);
                        RelationsFrom.Remove(relationContextToEditFrom.CompletedRelationToRemove);
                    }
                );
            }
        }
        StateHasChanged();
    }
    public void CancelTo()
    {
        relationContext = null;
        StateHasChanged();
    }

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
    }
    public override void OnTitleChange(string title)
    {
        if (interPersonalRelationsFromEditor is not null) {
            interPersonalRelationsFromEditor.OnTitleChange(title);
        }
        if (interPersonalRelationsToEditor is not null) {
            interPersonalRelationsToEditor.OnTitleChange(title);
        }
    }
}
