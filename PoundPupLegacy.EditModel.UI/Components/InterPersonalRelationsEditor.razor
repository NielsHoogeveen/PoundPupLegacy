@inherits EditorBase
@if (_relationToEdit is not null) {
    <ModalDialog 
        Title="Add inter-personal relation" 
        Id="inter-personal-relation-dialog" 
        OnOk="OnOk" 
        OnCancel="OnCancel">
        <DialogContent>
            <InterPersonalRelationEditorDialog  
                Relation="_relationToEdit" 
                RelationTypes="@RelationTypes"
                @ref=dialog/>
        </DialogContent>
    </ModalDialog>
}
<div class="relations-editor">
    <h4>Relations between this person and another person</h4>
    @if (Relations.Any()) {
        <div class="relations">
            <div class="grid-header first">From</div>
            <div class="grid-header">Type</div>
            <div class="grid-header">To</div>
            <div class="grid-header">Start</div>
            <div class="grid-header">End</div>
            <div class="grid-header"></div>
            <div class="grid-header"></div>
            @foreach(var relation in Relations) {
                var classString = relation.HasBeenDeleted ? "row deleted" : "row";
                <div class="@classString first">
                    <span>@relation.PersonFromName</span>
                </div>
                <div class="@classString">
                    <span>@relation.InterPersonalRelationType.Name</span>
                </div>
                <div class="@classString">
                    <span>@relation.PersonToName</span>
                </div>
                <div class="@classString">
                    <span>@relation.DateFrom</span>
                </div>
                <div class="@classString">
                    <span>@relation.DateTo</span>
                </div>
                <div class="@classString">
                    @if (!relation.HasBeenDeleted)
                    {
                        <button type="button" @onclick="() => EditRelation(relation)">edit</button>
                    }
                </div>
                <div class="@classString">
                    @if (relation.HasBeenDeleted)
                    {
                        <button type="button" @onclick="() => RestoreRelation(relation)">restore</button>
                    }
                    else {
                        <button type="button" @onclick="() => RemoveRelation(relation)">remove</button>
                    }
                </div>
            }
        </div>
    }
    <button type="button" @onclick="OnAdd">Add</button>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public List<InterPersonalRelation> Relations { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public PersonItem Person { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<InterPersonalRelationTypeListItem> RelationTypes { get; set; } = default!;

    private InterPersonalRelationEditorDialog? dialog;

    private InterPersonalRelation? _relationToEdit = null;

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
    }
    public override void OnTitleChange(string title)
    {

    }

    private void EditRelation(InterPersonalRelation relation)
    {
        _relationToEdit = relation;
        StateHasChanged();
    }
    private void RestoreRelation(InterPersonalRelation relation)
    {
        relation.HasBeenDeleted = false;
        StateHasChanged();
    }

    private void RemoveRelation(InterPersonalRelation relation)
    {
        relation.HasBeenDeleted = true;
        StateHasChanged();
    }
    private void OnOk()
    {
        if (dialog is not null) {
            var relation = dialog.GetValidRelation();
            if(relation is null)
                return;
            Relations.Add(relation);
        }
        _relationToEdit = null;
        StateHasChanged();
    }
    private void OnCancel()
    {
        _relationToEdit = null;
        StateHasChanged();
    }
    private void OnAdd()
    {
        _relationToEdit = Person switch {
            PersonListItem li => new NewInterPersonalExistingFromRelation {
                    PersonFrom = li,
                    PersonTo = null,
                    InterPersonalRelationType = RelationTypes.First(),
                    Title = "",
                    DateFrom = null,
                    DateTo = null,
                    Description = "",
                    Files = new List<File>(),
                    NodeTypeName = "inter organizational relation",
                    OwnerId = TenantId,
                    PublisherId = UserId,
                    ProofDocument = null,
                    Tags = new List<Tags>(),
                    TenantNodes = new List<TenantNode>(),
                    Tenants = new List<Tenant>(),
                },
            PersonName nm => new NewInterPersonalNewFromRelation {
                    PersonFrom = nm,
                    PersonTo = null,
                    InterPersonalRelationType = RelationTypes.First(),
                    Title = "",
                    DateFrom = null,
                    DateTo = null,
                    Description = "",
                    Files = new List<File>(),
                    NodeTypeName = "inter organizational relation",
                    OwnerId = TenantId,
                    PublisherId = UserId,
                    ProofDocument = null,
                    Tags = new List<Tags>(),
                    TenantNodes = new List<TenantNode>(),
                    Tenants = new List<Tenant>(),
                },
             _ => throw new Exception("Cannot reach"),
        };
        StateHasChanged();
    }

}
