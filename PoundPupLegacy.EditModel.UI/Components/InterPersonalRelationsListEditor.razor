@typeparam TRelation where TRelation: InterPersonalRelation
@inherits EditorDetailBase
<div class="relations-editor">
    @if (typeof(TRelation) == typeof(InterPersonalRelation.From.Complete)) {
        <h4>Relations between this person and another one</h4>
    }
    @if (typeof(TRelation) == typeof(InterPersonalRelation.To.Complete)) {
        <h4>Relations between another person and this one</h4>
    }
    @if (Relations.Any())
    {
        <div class="relations">
            <div class="grid-header first">From</div>
            <div class="grid-header">Type</div>
            <div class="grid-header">To</div>
            <div class="grid-header">Start</div>
            <div class="grid-header">End</div>
            <div class="grid-header"></div>
            <div class="grid-header"></div>
            @foreach(var relation in Relations) {
                var classString = relation.RelationDetails.HasBeenDeleted ? "row deleted" : "row";
                <div class="@classString first">
                    @relation.PersonFromName
                </div>
                <div class="@classString">
                    @relation.InterPersonalRelationType.Name
                </div>
                <div class="@classString">
                    @relation.PersonToName
                </div>
                <div class="@classString">
                    @relation.RelationDetails.DateFrom
                </div>
                <div class="@classString">
                    @relation.RelationDetails.DateTo
                </div>
                <div class="@classString">
                    @if (!relation.RelationDetails.HasBeenDeleted)
                    {
                        <button type="button" @onclick="() => Edit(relation)">edit</button>
                    }
                </div>
                <div class="@classString">
                    @if (relation.RelationDetails.HasBeenDeleted) {
                        <button type="button" @onclick="() => RestoreRelation(relation)">restore</button>
                    }
                    else {
                        <button type="button" @onclick="() => RemoveRelation(relation)">remove</button>
                    }
                </div>

            }
        </div>
    }        
    <button type="button" @onclick="Add">Add</button>
</div>
@code {
    [Parameter]
    [EditorRequired]
    public List<TRelation> Relations { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Action<TRelation> Edit { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Action Add { get; set; } = default!;

    public override async Task<List<System.ComponentModel.DataAnnotations.ValidationResult>> Validate()
    {
        return await Task.FromResult(new List<System.ComponentModel.DataAnnotations.ValidationResult>());
    }
    public override void OnTitleChange(string title)
    {
        foreach (var relation in Relations) {
            relation.SetName(title);
        }
    }
    private void RestoreRelation(InterPersonalRelation relation)
    {
        relation.RelationDetails.HasBeenDeleted = false;
        StateHasChanged();
    }

    private void RemoveRelation(InterPersonalRelation relation)
    {
        relation.RelationDetails.HasBeenDeleted = true;
        StateHasChanged();
    }
}
