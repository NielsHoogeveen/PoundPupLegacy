@inherits EditorBase
<InterPersonalRelationsEditor 
    Relations="Model.InterPersonalRelations" 
    RelationTypes="Model.InterPersonalRelationTypes" 
    Person="Person"/>
<PartyPoliticalEntityRelationsEditor 
    PartyTypeName="person"
    Party="Person"
    Relations="Model.PartyPoliticalEntityRelations"
    RelationTypes="Model.PartyPoliticalEntityRelationTypes" />
<PersonOrganizationRelationsEditor 
    IsPersonLeading = "true"
    LeadingParty="Person"
    Relations="Model.PersonOrganizationRelations"
    RelationTypes="Model.PersonOrganizationRelationTypes" />

@code {
    [Parameter]
    [EditorRequired]
    public Person Model { get; set; } = default!;

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
        foreach (var relation in Model.InterPersonalRelations) {
            Debug.Assert(relation.PersonFrom is not null);
            Debug.Assert(relation.PersonTo is not null);
            Debug.Assert(relation.PersonFrom.Id.HasValue && relation.PersonFrom.Id != Model.NodeId || relation.PersonTo.Id.HasValue && relation.PersonTo.Id != Model.NodeId);
            Debug.Assert(Model.NodeId.HasValue && (relation.PersonFrom.Id.HasValue && relation.PersonFrom.Id.Value == Model.NodeId.Value || relation.PersonTo.Id.HasValue && relation.PersonTo.Id == Model.NodeId));
            Debug.Assert(!Model.NodeId.HasValue && (!relation.PersonFrom.Id.HasValue || !relation.PersonTo.Id.HasValue));
        }
        foreach (var relation in Model.PersonOrganizationRelations) {
            Debug.Assert(relation.Person is not null);
            Debug.Assert(relation.Organization is not null);
            Debug.Assert(relation.Organization.Id.HasValue);
            Debug.Assert(Model.NodeId.HasValue && relation.Person.Id.HasValue);
            Debug.Assert(!Model.NodeId.HasValue && !relation.Person.Id.HasValue);
        }
        foreach (var relation in Model.PartyPoliticalEntityRelations) {
            Debug.Assert(relation.Party is not null);
            Debug.Assert(relation.PoliticalEntity is not null);
            Debug.Assert(relation.PoliticalEntity.Id.HasValue);
            Debug.Assert(Model.NodeId.HasValue && relation.Party.Id.HasValue);
            Debug.Assert(!Model.NodeId.HasValue && !relation.Party.Id.HasValue);
        }
    }

    public override void OnTitleChange(string title)
    {
        foreach (var relation in Model.PartyPoliticalEntityRelations) {
            relation.Party.Name = title;
        };
        foreach (var relation in Model.PersonOrganizationRelations) {
            relation.Person!.Name = title;
        };
        foreach (var relation in Model.InterPersonalRelations) {
            if (relation.PersonFrom is not null) {
                if (relation.PersonFrom.Id.HasValue) {
                    if (relation.PersonFrom.Id == Model.NodeId) {
                        relation.PersonFrom.Name = title;
                    }
                }
                else {
                    relation.PersonFrom.Name = title;
                }
            }
            if (relation.PersonTo is not null) {
                if (relation.PersonTo.Id.HasValue) {
                    if (relation.PersonTo.Id == Model.NodeId) {
                        relation.PersonTo.Name = title;
                    }
                }
                else {
                    relation.PersonTo.Name = title;
                }
            }
        };

        StateHasChanged();
    }

    private PersonListItem Person => new PersonListItem {
        Id = Model.NodeId,
        Name = Model.Title
    };
}
