@inherits EditorBase
<InterPersonalRelationsEditor 
    RelationsFrom="Model.InterPersonalRelationsFrom.ToList()" 
    RelationsTo="Model.InterPersonalRelationsTo.ToList()" 
    RelationTypes="Model.InterPersonalRelationTypes" 
    PersonItem="Person"/>
<PersonPoliticalEntityRelationsEditor 
    PartyTypeName="person"
    Person="Person"
    Relations="Model.PersonPoliticalEntityRelations.ToList()"
    RelationTypes="Model.PersonPoliticalEntityRelationTypes" />
<PersonOrganizationRelationsEditorForPerson 
    Person="Person"
    Relations="Model.PersonOrganizationRelations.ToList()"
    RelationTypes="Model.PersonOrganizationRelationTypes" />

@code {
    [Parameter]
    [EditorRequired]
    public Person Model { get; set; } = default!;

    private int? NodeId => Model switch {
        ExistingNode n => n.NodeIdentification.NodeId,
        _ => null
    };

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
    }

    public override void OnTitleChange(string title)
    {
        foreach (var relation in Model.PersonPoliticalEntityRelations.OfType<PersonOrganizationRelation.ForPerson.Complete.Resolved.ToUpdate>()) {
            relation.Person.Name = title;
        };
        foreach (var relation in Model.PersonOrganizationRelations.OfType<PersonOrganizationRelation.ForPerson.Complete.Resolved.ToCreate>()) {
            relation.Person.Name = title;
        };
        StateHasChanged();
    }

    private PersonItem? Person => Model switch {
        ExistingNode n => new PersonListItem {
                Id = n.NodeIdentification.NodeId,
                Name = Model.NodeDetails.Title
            },
        NewNode nn => new PersonName {
            Name = Model.NodeDetails.Title
        },
        _ => null
    };
}
