@using static PoundPupLegacy.EditModel.PersonOrganizationRelation.PersonOrganizationRelationForPerson;
@using static PoundPupLegacy.EditModel.PersonOrganizationRelation.PersonOrganizationRelationForPerson.CompletedPersonOrganizationRelationForPerson;
@using static PoundPupLegacy.EditModel.PersonOrganizationRelation.PersonOrganizationRelationForPerson.CompletedPersonOrganizationRelationForPerson.ResolvedPersonOrganizationRelationForPerson;
@using static PoundPupLegacy.EditModel.PersonItem;
@using static PoundPupLegacy.EditModel.InterPersonalRelation.CompletedInterPersonalRelation;
@using static PoundPupLegacy.EditModel.InterPersonalRelation.CompletedInterPersonalRelation.CompletedNewInterPersonalRelation;
@using static PoundPupLegacy.EditModel.InterPersonalRelation.CompletedInterPersonalRelation.ResolvedInterPersonalRelation;
@inherits EditorBase
<InterPersonalRelationsEditor 
    Relations="Model.InterPersonalRelations" 
    RelationTypes="Model.InterPersonalRelationTypes" 
    Person="Person"/>
<PersonPoliticalEntityRelationsEditor 
    PartyTypeName="person"
    Person="Person"
    Relations="Model.PersonPoliticalEntityRelations.ToList()"
    RelationTypes="Model.PersonPoliticalEntityRelationTypes" />
<PersonOrganizationRelationsEditorForPerson 
    Person="Person"
    Relations="Model.PersonOrganizationRelations.ToList()"
    RelationTypes="Model.PersonOrganizationRelationTypes" />

@code {
    [Parameter]
    [EditorRequired]
    public Person Model { get; set; } = default!;

    private int? NodeId => Model switch {
        ExistingNode n => n.NodeId,
        _ => null
    };

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
    }

    public override void OnTitleChange(string title)
    {
        foreach (var relation in Model.PersonPoliticalEntityRelations.OfType<ExistingPersonOrganizationRelationForPerson>()) {
            relation.Person.Name = title;
        };
        foreach (var relation in Model.PersonOrganizationRelations.OfType<CompletedNewPersonOrganizationRelationForPerson>()) {
            relation.Person.Name = title;
        };
        foreach (var relation in Model.InterPersonalRelations.OfType<ExistingInterPersonalRelation>()) {
            if(relation.RelationSideThisPerson == RelationSide.From){
                relation.PersonFrom.Name = title;
            }else {
                relation.PersonTo.Name = title;
            }
        }
        foreach (var relation in Model.InterPersonalRelations.OfType<CompletedNewInterPersonalNewFromRelation>()) {
            relation.PersonFrom.Name = title;
        }
        foreach (var relation in Model.InterPersonalRelations.OfType<CompletedNewInterPersonalNewToRelation>()) {
            relation.PersonTo.Name = title;
        }
        StateHasChanged();
    }

    private PersonItem? Person => Model switch {
        ExistingNode n => new PersonListItem {
                Id = n.NodeId,
                Name = Model.Title
            },
        NewNode nn => new PersonName {
            Name = Model.Title
        },
        _ => null
    };
}
