@inherits EditorDetailBase
<InterPersonalRelationsEditor 
    @bind-RelationsFrom="PersonDetails.InterPersonalRelationsFrom" 
    @bind-RelationsTo="PersonDetails.InterPersonalRelationsTo" 
    RelationTypes="PersonDetails.InterPersonalRelationTypes" 
    Tenants="Tenants"
    PersonItem="Person"
    @ref=_interPersonalRelationsEditor/>
<PersonPoliticalEntityRelationsEditor 
    PartyTypeName="person"
    Person="Person"
    @bind-Relations="PersonDetails.PersonPoliticalEntityRelations"
    Tenants="Tenants"
    RelationTypes="PersonDetails.PersonPoliticalEntityRelationTypes" 
    @ref=_personPoliticalEntityRelationsEditor/>
<PersonOrganizationRelationsEditorForPerson 
    Person="Person"
    @bind-Relations="PersonDetails.PersonOrganizationRelations"
    Tenants="Tenants"
    RelationTypes="PersonDetails.PersonOrganizationRelationTypes" 
    @ref=_personOrganizationRelationsEditor/>

@code {
    [Parameter]
    [EditorRequired]
    public PersonDetails PersonDetails { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<Tenant> Tenants { get; set; } = default!;

    private InterPersonalRelationsEditor? _interPersonalRelationsEditor = null;
    private PersonOrganizationRelationsEditorForPerson? _personOrganizationRelationsEditor = null;
    private PersonPoliticalEntityRelationsEditor? _personPoliticalEntityRelationsEditor = null;
    
    public override async Task<List<System.ComponentModel.DataAnnotations.ValidationResult>> Validate()
    {
        return await Task.FromResult(new List<System.ComponentModel.DataAnnotations.ValidationResult>());
    }

    public override void OnTitleChange(string title)
    {
        foreach (var relation in PersonDetails.PersonPoliticalEntityRelations.OfType<PersonOrganizationRelation.ForPerson.Complete.Resolved.ToUpdate>()) {
            relation.Person.Name = title;
        };
        foreach (var relation in PersonDetails.PersonOrganizationRelations.OfType<PersonOrganizationRelation.ForPerson.Complete.Resolved.ToCreate>()) {
            relation.Person.Name = title;
        };
        StateHasChanged();
    }

    private PersonItem? Person => PersonDetails switch {
        PersonDetails.ForUpdate n => new PersonListItem {
                Id = NodeId!.Value,
                Name = PersonDetails.Name
            },
        PersonDetails.ForCreate nn => new PersonName {
            Name = PersonDetails.Name
        },
        _ => null
    };
}
