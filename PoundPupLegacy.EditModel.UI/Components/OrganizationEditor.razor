@inherits EditorBase
<div class="organization-fields">
    <div class="form-group">
        <label>Website</label>
        <InputText type="text" @bind-Value="@Model.WebSiteUrl" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText type="text" @bind-Value="@Model.EmailAddress" />
    </div>
    <div class="form-group">
        <label>Established</label>
        <FuzzyDateEditor @bind-Value=" Model.Establishment" />
    </div>
    <div class="form-group">
        <label>Terminated</label>
        <FuzzyDateEditor @bind-Value="Model.Termination" />
    </div>
</div>
<OrganizationOrganizationTypesEditor Model="Model" />
<InterOrganizationalRelationsEditor 
    Relations="Model.InterOrganizationalRelations.ToList()" 
    RelationTypes="Model.InterOrganizationalRelationTypes" 
    OrganizationItem="Model.OrganizationItem"/>
<PartyPoliticalEntityRelationsEditor 
    PartyTypeName="organization"
    Party="Model.OrganizationItem"
    Relations="Model.PartyPoliticalEntityRelations.ToList()"
    RelationTypes="Model.PartyPoliticalEntityRelationTypes" />
<PersonOrganizationRelationsEditor 
    LeadingParty="Model.OrganizationItem"
    Relations="Model.PersonOrganizationRelations.ToList()"
    RelationTypes="Model.PersonOrganizationRelationTypes" />

@code {
    [Parameter]
    [EditorRequired]
    public Organization Model { get; set; } = default!;

    private int? NodeId => Model switch {
        ExistingNode n => n.NodeId,
        _ => null
    };

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
    }

    public override void OnTitleChange(string title)
    {
        foreach(var relation in Model.PartyPoliticalEntityRelations.OfType<ExistingPartyPoliticalEntityRelation>())
        {
            relation.Party.Name = title;
        };
        foreach (var relation in Model.PartyPoliticalEntityRelations.OfType<CompletedNewPartyPoliticalEntityRelationExistingParty>()) {
            relation.Party.Name = title;
        };
        foreach (var relation in Model.PartyPoliticalEntityRelations.OfType<CompletedNewPartyPoliticalEntityRelationNewParty>()) {
            relation.Party.Name = title;
        };
        foreach (var relation in Model.PersonOrganizationRelations.OfType<ExistingPersonOrganizationRelation>()) {
            relation.Organization.Name = title;
        };
        foreach (var relation in Model.PersonOrganizationRelations.OfType<CompletedNewPersonOrganizationRelation>()) {
            relation.Organization.Name = title;
        };
        foreach (var relation in Model.InterOrganizationalRelations.OfType<CompletedNewInterOrganizationalNewFromRelation>()) {
            relation.OrganizationFrom.Name = title;
        }
        foreach (var relation in Model.InterOrganizationalRelations.OfType<CompletedNewInterOrganizationalNewToRelation>()) {
            relation.OrganizationTo.Name = title;
        }
        foreach (var relation in Model.InterOrganizationalRelations.OfType<ExistingInterOrganizationalRelation>()) {
            if (relation.RelationSideThisOrganization == RelationSide.From)
            {
                relation.OrganizationFrom.Name = title;
            }
            else {
                relation.OrganizationTo.Name = title;
            }
        }
        StateHasChanged();
    }
}
