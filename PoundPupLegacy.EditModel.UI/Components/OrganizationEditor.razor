@inherits EditorBase
<div class="organization-fields">
    <div class="form-group">
        <label>Website</label>
        <InputText type="text" @bind-Value="@Model.OrganizationDetails.WebSiteUrl" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText type="text" @bind-Value="@Model.OrganizationDetails.EmailAddress" />
    </div>
    <div class="form-group">
        <label>Established</label>
        <FuzzyDateEditor @bind-Value=" Model.OrganizationDetails.Establishment" />
    </div>
    <div class="form-group">
        <label>Terminated</label>
        <FuzzyDateEditor @bind-Value="Model.OrganizationDetails.Termination" />
    </div>
</div>
<OrganizationOrganizationTypesEditor Model="Model" />
<InterOrganizationalRelationsEditor 
    RelationsFrom="Model.InterOrganizationalRelationsFrom.ToList()" 
    RelationsTo="Model.InterOrganizationalRelationsTo.ToList()" 
    RelationTypes="Model.OrganizationDetails.InterOrganizationalRelationTypes" 
    OrganizationItem="Model.OrganizationDetails.OrganizationItem"/>
<OrganizationPoliticalEntityRelationsEditor 
    PartyTypeName="organization"
    Organization="Model.OrganizationDetails.OrganizationItem"
    Relations="Model.OrganizationPoliticalEntityRelations.ToList()"
    RelationTypes="Model.OrganizationPoliticalEntityRelationTypes" />
<PersonOrganizationRelationsEditorForOrganization 
    Organization="Model.OrganizationDetails.OrganizationItem"
    Relations="Model.PersonOrganizationRelations.ToList()"
    RelationTypes="Model.PersonOrganizationRelationTypes" />

@code {
    [Parameter]
    [EditorRequired]
    public Organization Model { get; set; } = default!;

    private int? NodeId => Model switch {
        ExistingNode n => n.NodeIdentification.NodeId,
        _ => null
    };

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
    }

    public override void OnTitleChange(string title)
    {
        foreach (var relation in Model.OrganizationPoliticalEntityRelations.OfType<ExistingOrganizationPoliticalEntityRelation>()) {
            relation.Organization.Name = title;
        };
        foreach (var relation in Model.OrganizationPoliticalEntityRelations.OfType<CompletedNewOrganizationPoliticalEntityRelationExistingOrganization>()) {
            relation.Organization.Name = title;
        };
        foreach (var relation in Model.OrganizationPoliticalEntityRelations.OfType<CompletedNewOrganizationPoliticalEntityRelationNewOrganization>()) {
            relation.Organization.Name = title;
        };
        foreach (var relation in Model.PersonOrganizationRelations.OfType<ExistingPersonOrganizationRelationForOrganization>()) {
            relation.Organization.Name = title;
        };
        foreach (var relation in Model.PersonOrganizationRelations.OfType<CompletedNewPersonOrganizationRelationForOrganization>()) {
            relation.Organization.Name = title;
        };
        StateHasChanged();
    }
}
