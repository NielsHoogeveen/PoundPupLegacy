@inject ILocationService LocationService
@inject IJSRuntime JSRuntime
@if(Relation is not null) {
    <EditForm EditContext="editContext">
        <div class="form-group">
            <label>Person from</label>
            <div>@Relation.PersonItem.Name</div>
        </div>
        <div class="type">
            <label for="relation-type">Relation type</label>
            <select id="relation-type" @onchange="OnChangeRelationType">
                @foreach (var relationType in RelationTypes.OrderBy(x => x.Name)) {
                    @if (relationType.Id == Relation.PersonOrganizationRelationType.Id) {
                        <option selected value="@relationType.Id">@relationType.Name</option>
                    }
                    else {
                        <option value="@relationType.Id">@relationType.Name</option>
                    }
                }
            </select>
        </div>
        <LabeledSearchItemEditor T="OrganizationListItem"
            IsMandatory="true"
            @bind-Value="Relation.OrganizationItem"
            EnableEdit="true"
            Label="Organization" />

        <LabeledSearchItemEditor 
            T="GeographicalEntityListItem"
            IsMandatory="false"
            @bind-Value="Relation.GeographicalEntity"
            EnableEdit="true"
            Label="Geographical entity" />
        <LabeledSearchItemEditor T="DocumentListItem"
            IsMandatory="false"
            @bind-Value="Relation.RelationDetails.ProofDocument"
            EnableEdit="true"
            Label="Proof document" />
        <div class="form-group">
            <label>Description</label>
            <CKEditor Id="relation-editor" @bind-Value="Relation.RelationDetails.Description" />
        </div>
        <div class="form-group">
            <label>Start date</label>
            <InputDate @bind-Value="Relation.RelationDetails.DateFrom" />
        </div>
        <div class="form-group">
            <label>End date</label>
            <InputDate @bind-Value="Relation.RelationDetails.DateTo" />
        </div>
        <TenantNodesEditor @bind-Model="Relation.NodeDetails.Tenants"
                           ForCreate="Relation.NodeDetails.GetType() == typeof(NodeDetails.ForCreate)" />

    </EditForm>
}
@code {

    [Parameter]
    [EditorRequired]
    public PersonOrganizationRelation.ForPerson.ForPerson Relation { get; set; } = default!;


    [Parameter]
    [EditorRequired]
    public List<PersonOrganizationRelationTypeListItem> RelationTypes { get; set; } = default!;

    private EditContext? editContext;
    private ValidationMessageStore? validationMessageStore;

    protected override void OnInitialized()
    {
        editContext = new EditContext(Relation);
        validationMessageStore = new ValidationMessageStore(editContext);
    }

    private void OnChangeRelationType(ChangeEventArgs args)
    {
        if(args.Value is not null && args.Value is string str) {
            if(int.TryParse(str, out var organizationTypeId)) {
                Relation.PersonOrganizationRelationType = RelationTypes.First(x => x.Id == organizationTypeId);
                StateHasChanged();
            }
        }
    }

    public PersonOrganizationRelation.ForPerson.ForPerson.Complete? GetValidRelation()
    {
        validationMessageStore?.Clear();
        bool hasErrors = false;
        if (Relation.PersonItem is null) {
            validationMessageStore!.Add(editContext!.Field(nameof(Relation.OrganizationItem)), "Organization is required");
            hasErrors = true;
            editContext.NotifyValidationStateChanged();
        }
        if (hasErrors)
            return null;

        return Relation.Match<PersonOrganizationRelation.ForPerson.ForPerson.Complete>(
            complete: r => r,
            incomplete: r => r.GetCompletedRelation(Relation.OrganizationItem!)
        );
    }

}

