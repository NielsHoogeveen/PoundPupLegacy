@inject ILocationService LocationService
@inject IJSRuntime JSRuntime
<div class="form-group">
    <label>Person from</label>
    <div>@Relation.PersonItem.Name</div>
</div>
<div class="type">
    <label for="relation-type">Relation type</label>
    <select id="relation-type" @onchange="OnChangeRelationType">
        @foreach (var relationType in RelationTypes.OrderBy(x => x.Name)) {
            @if (relationType.Id == RelationType.Id) {
                <option selected value="@relationType.Id">@relationType.Name</option>
            }
            else {
                <option value="@relationType.Id">@relationType.Name</option>
            }
        }
    </select>
</div>
<SearchItemEditor T="OrganizationItem.OrganizationListItem"
    IsMandatory="true"
    @bind-Value="Relation.OrganizationItem"
    EnableEdit="true"
    Label="Organization" />

<SearchItemEditor 
    T="GeographicalEntityListItem"
    IsMandatory="false"
    @bind-Value="Relation.GeographicalEntity"
    EnableEdit="true"
    Label="Geographical entity" />
<SearchItemEditor T="DocumentListItem"
    IsMandatory="false"
    @bind-Value="Relation.ProofDocument"
    EnableEdit="true"
    Label="Proof document" />
<div class="form-group">
    <label>Description</label>
    <CKEditor Id="relation-editor" @bind-Value="Relation.Description" />
</div>
<div class="form-group">
    <label>Start date</label>
    <InputDate @bind-Value="Relation.DateFrom" />
</div>
<div class="form-group">
    <label>End date</label>
    <InputDate @bind-Value="Relation.DateTo" />
</div>
@code {

    [Parameter]
    [EditorRequired]
    public PersonOrganizationRelationForPerson Relation { get; set; } = default!;


    [Parameter]
    [EditorRequired]
    public List<PersonOrganizationRelationTypeListItem> RelationTypes { get; set; } = default!;

    private PersonOrganizationRelationTypeListItem RelationType { get; set; } = default!;

    protected override void OnInitialized()
    {
        RelationType = RelationTypes.First(x => x.Id == Relation.PersonOrganizationRelationType.Id);
    }

    private void OnChangeRelationType(ChangeEventArgs args)
    {
        if(args.Value is not null && args.Value is string str) {
            if(int.TryParse(str, out var organizationTypeId)) {
                RelationType = RelationTypes.First(x => x.Id == organizationTypeId);
                StateHasChanged();
            }
        }
    }

    public CompletedPersonOrganizationRelationForPerson? GetValidRelation()
    {
        return null;
    }

}

