@inherits EditorBase
@if (_relationToEdit is not null) {
    <ModalDialog 
        Title="Add person-organization relation" 
        Id="party-person-organization-dialog" 
        OnOk="OnOk" 
        OnCancel="OnCancel">
        <DialogContent>
            <PersonOrganizationRelationEditorForOrganizationDialog 
                Relation="_relationToEdit" 
                RelationTypes="@RelationTypes"
                @ref=dialog/>
        </DialogContent>
    </ModalDialog>
}
<div class="relations-editor">
    <h4>Relations between a person and this organization</h4>
    @if (Relations.Any())
    {
        <div class="relations">
            <div class="grid-header first">From</div>
            <div class="grid-header">Type</div>
            <div class="grid-header">To</div>
            <div class="grid-header">Start</div>
            <div class="grid-header">End</div>
            <div class="grid-header"></div>
            <div class="grid-header"></div>
            @foreach(var relation in Relations) {
                var classString = relation.RelationDetails.HasBeenDeleted ? "row deleted" : "row";
                <div class="@classString first">
                    @relation.PersonName
                </div>
                <div class="@classString">
                    @relation.PersonOrganizationRelationType.Name
                </div>
                <div class="@classString">
                    @relation.OrganizationName
                </div>
                <div class="@classString">
                    @relation.RelationDetails.DateFrom
                </div>
                <div class="@classString">
                    @relation.RelationDetails.DateTo
                </div>
                <div class="@classString">
                    @if (!relation.RelationDetails.HasBeenDeleted) {
                        <button type="button" @onclick="() => EditRelation(relation)">edit</button>
                    }
                </div>
                <div class="@classString">
                    @if (relation.RelationDetails.HasBeenDeleted) {
                        <button type="button" @onclick="() => RestoreRelation(relation)">restore</button>
                    }
                    else {
                        <button type="button" @onclick="() => RemoveRelation(relation)">remove</button>
                    }
                </div>
            }
        </div>
    }
    <button type="button" @onclick="OnAdd">Add</button>
</div>
@code {
    [Parameter]
    [EditorRequired]
    public List<CompletedPersonOrganizationRelationForOrganization> Relations { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<PersonOrganizationRelationTypeListItem> RelationTypes { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public OrganizationItem Organization { get; set; } = default!;

    private PersonOrganizationRelationEditorForOrganizationDialog? dialog;

    private PersonOrganizationRelationForOrganization? _relationToEdit = null;

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
    }
    public override void OnTitleChange(string title)
    {

    }
    private void RestoreRelation(PersonOrganizationRelation relation)
    {
        relation.RelationDetails.HasBeenDeleted = false;
        StateHasChanged();
    }

    private void RemoveRelation(PersonOrganizationRelation relation)
    {
        relation.RelationDetails.HasBeenDeleted = true;
        StateHasChanged();
    }

    private void EditRelation(CompletedPersonOrganizationRelationForOrganization relationToEdit)
    {
        _relationToEdit = relationToEdit;
        StateHasChanged();
    }
    private void OnOk()
    {
        if (dialog is not null) {
            var relation = dialog.GetValidRelation();
            if (relation is null)
                return;
            Relations.Add(relation);
        }
        _relationToEdit = null;
        StateHasChanged();
    }
    private void OnCancel()
    {
        _relationToEdit = null;
        StateHasChanged();
    }
    private void OnAdd()
    {
        _relationToEdit = Organization.Match<PersonOrganizationRelationForOrganization>(
            organizationListItem: oli => oli.GetPersonOrganizationRelationForOrganization(RelationTypes.First(), TenantId, UserId),
            organizationName: on => on.GetPersonOrganizationRelationForOrganization(RelationTypes.First(), TenantId, UserId));
        StateHasChanged();
    }

}
