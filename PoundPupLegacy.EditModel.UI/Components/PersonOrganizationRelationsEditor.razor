@inherits EditorBase
@if (_relationToEdit is not null) {
    <ModalDialog 
        Title="Add person-organization relation" 
        Id="party-person-organization-dialog" 
        OnOk="OnOk" 
        OnCancel="OnCancel">
        <DialogContent>
            <PersonOrganizationRelationEditorDialog 
                IsPersonLeading = "IsPersonLeading"
                @bind-Relation="_relationToEdit" 
                RelationTypes="@RelationTypes"/>
        </DialogContent>
    </ModalDialog>
}
<div class="relations-editor">
    @if (IsPersonLeading)
    {
        <h4>Relations between this person and an organization</h4>
    }
    else {
        <h4>Relations between a person and this organization</h4>
    }
    @if (Relations.Any())
    {
        <div class="relations">
            <div class="grid-header first">From</div>
            <div class="grid-header">Type</div>
            <div class="grid-header">To</div>
            <div class="grid-header">Start</div>
            <div class="grid-header">End</div>
            <div class="grid-header"></div>
            <div class="grid-header"></div>
            @foreach(var relation in Relations) {
                var classString = relation.HasBeenDeleted ? "row deleted" : "row";
                <div class="@classString first">
                    @relation.Person?.Name
                </div>
                <div class="@classString">
                    @relation.PersonOrganizationRelationType.Name
                </div>
                <div class="@classString">
                    @relation.Organization?.Name
                </div>
                <div class="@classString">
                    @relation.DateFrom
                </div>
                <div class="@classString">
                    @relation.DateTo
                </div>
                <div class="@classString">
                    @if (!relation.HasBeenDeleted) {
                        <button type="button" @onclick="() => EditRelation(relation)">edit</button>
                    }
                </div>
                <div class="@classString">
                    @if (relation.HasBeenDeleted) {
                        <button type="button" @onclick="() => RestoreRelation(relation)">restore</button>
                    }
                    else {
                        <button type="button" @onclick="() => RemoveRelation(relation)">remove</button>
                    }
                </div>
            }
        </div>
    }
    <button type="button" @onclick="OnAdd">Add</button>
</div>
@code {
    [Parameter]
    [EditorRequired]
    public List<PersonOrganizationRelation> Relations { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<PersonOrganizationRelationTypeListItem> RelationTypes { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public bool IsPersonLeading { get; set; } 

    [Parameter]
    [EditorRequired]
    public PartyListItem LeadingParty { get; set; } = default!;

    private PersonOrganizationRelation? _relationToEdit = null;

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
    }
    public override void OnTitleChange(string title)
    {

    }
    private void RestoreRelation(PersonOrganizationRelation relation)
    {
        relation.HasBeenDeleted = false;
        StateHasChanged();
    }

    private void RemoveRelation(PersonOrganizationRelation relation)
    {
        relation.HasBeenDeleted = true;
        StateHasChanged();
    }

    private void EditRelation(PersonOrganizationRelation relationToEdit)
    {
        _relationToEdit = relationToEdit;
        StateHasChanged();
    }
    private void OnOk()
    {
        if (_relationToEdit is not null && !_relationToEdit.NodeId.HasValue) {
            Relations.Add(_relationToEdit);
        }
        _relationToEdit = null;
        StateHasChanged();
    }
    private void OnCancel()
    {
        _relationToEdit = null;
        StateHasChanged();
    }
    private void OnAdd()
    {
        _relationToEdit = new PersonOrganizationRelation {
                Person = IsPersonLeading 
                    ? new PersonListItem {
                        Id = LeadingParty.Id,
                        Name = LeadingParty.Name,
                    }
                    : null,
                Organization = IsPersonLeading 
                    ? null
                    : new OrganizationListItem {
                        Id = LeadingParty.Id,
                        Name = LeadingParty.Name,
                    },
                PersonOrganizationRelationType = RelationTypes.First(),
                Title = "",
                DateFrom = null,
                DateTo = null,
                Description = "",
                Files = new List<File>(),
                HasBeenDeleted = false,
                NodeId = null,
                NodeTypeName = "party political entity relation",
                OwnerId = TenantId,
                PublisherId = UserId,
                GeographicalEntity = null,
                ProofDocument = null,
                Tags = new List<Tags>(),
                TenantNodes = new List<TenantNode>(),
                Tenants = new List<Tenant>(),
                UrlId = null,
            };
        StateHasChanged();
    }

}
