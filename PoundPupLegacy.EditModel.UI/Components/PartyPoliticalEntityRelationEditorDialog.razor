@inject ILocationService LocationService
@inject IJSRuntime JSRuntime
@if (Relation.PartyItem is PartyName) {
    <div class="form-group">
        <label>Party</label>
        <div>@Relation.PartyItem.Name</div>
    </div>
}
@if (Relation.PartyItem is PartyListItem partyListItem) {
    <SearchItemEditor T="PartyListItem"
    IsMandatory="true"
    @bind-Value="partyListItem"
    EnableEdit="false"
    Label="Party" />
}


<div class="type-and-swap">
    <div>
        <label for="relation-type">Relation type</label>
        <select id="relation-type" @onchange="OnChangeRelationType">
            @foreach (var relationType in RelationTypes.OrderBy(x => x.Name)) {
                @if (relationType.Id == RelationType.Id) {
                    <option selected value="@relationType.Id">@relationType.Name</option>
                }
                else {
                    <option value="@relationType.Id">@relationType.Name</option>
                }
            }
        </select>
    </div>
</div>
@if (Relation.PoliticalEntityItem is PoliticalEntityListItem politicalEntityListItem) {
    <SearchItemEditor T="PoliticalEntityListItem"
    IsMandatory="true"
    @bind-Value="politicalEntityListItem"
    EnableEdit="true"
    Label="Political entity" />
}

<SearchItemEditor T="DocumentListItem"
    IsMandatory="false"
    @bind-Value="Relation.ProofDocument"
    EnableEdit="true"
    Label="Proof document" />
<div class="form-group">
    <label>Description</label>
    <CKEditor Id="relation-editor" @bind-Value="Relation.Description" />
</div>
<div class="form-group">
    <label>Start date</label>
    <InputDate @bind-Value="Relation.DateFrom" />
</div>
<div class="form-group">
    <label>End date</label>
    <InputDate @bind-Value="Relation.DateTo" />
</div>
@code {

    [Parameter]
    public PartyPoliticalEntityRelation Relation { get; set; } = default!;

    [Parameter]
    public EventCallback<PartyPoliticalEntityRelation> RelationChanged { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<PartyPoliticalEntityRelationTypeListItem> RelationTypes { get; set; } = default!;

    private PartyPoliticalEntityRelationTypeListItem RelationType { get; set; } = default!;

    protected override void OnInitialized()
    {
        RelationType = RelationTypes.First(x => x.Id == Relation.PartyPoliticalEntityRelationType.Id);
    }

    private void OnChangeRelationType(ChangeEventArgs args)
    {
        if(args.Value is not null && args.Value is string str) {
            if(int.TryParse(str, out var organizationTypeId)) {
                RelationType = RelationTypes.First(x => x.Id == organizationTypeId);
                StateHasChanged();
            }
        }
    }
    public CompletedPartyPoliticalEntityRelation? GetValidRelation()
    {
        return null;
    }

}

