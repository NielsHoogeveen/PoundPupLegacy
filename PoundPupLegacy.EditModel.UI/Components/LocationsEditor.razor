@inherits ViewerBase
@inject IDefaultCountryService DefaultCountryService

@if (Locatable.Locations.Any()) {
    @if (locationToEdit is not null)
    {
        <ModalDialog Title="Add location" Id="location-dialog" OnOk="OnOkLocationDialog" OnCancel="OnCancelLocationDialog">
            <DialogContent>
                <LocationEditorDialog Location="locationToEdit" />
            </DialogContent>
        </ModalDialog>
    }

    <div class="editor-section">
        <h4>Locations</h4>
        <div class="locations">
            <div class="header">Street</div>
            <div class="header"></div>
            <div class="header">Postal code</div>
            <div class="header">City</div>
            <div class="header">Subdivision</div>
            <div class="header">Country</div>
            <div class="header"></div>
            @foreach(var location in Locatable.Locations) {
                @if (location is not null) {
                    <div class="item">@location.Street</div>
                    <div class="item">@location.Addition</div>
                    <div class="item">@location.PostalCode</div>
                    <div class="item">@location.City</div>
                    <div class="item">@location.SubdivisionName</div>
                    <div class="item">@location.CountryName</div>
                    <div class="item"><button type="button" @onclick="() => EditLocation(location)">Edit</button></div>
                }
            }
        </div>
        <button type="button" @onclick="AddLocation">Add location</button>
    </div>
}

@code {

    [Parameter]
    [EditorRequired]
    public Locatable Locatable { get; set; } = default!;

    private Location? locationToEdit = null;

    private int? NodeId => Locatable switch {
        ExistingNode n => n.NodeId,
        _ => null
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    private void AddLocation()
    {
        (var countryId, var countryName) = DefaultCountryService.GetDefaultCountry(TenantId);
        locationToEdit = new Location {
            LocationId = null,
            LocatableId = NodeId,
            Street = null,
            Addition = null,
            PostalCode = null,  
            City = null,
            SubdivisionId = null,
            SubdivisionName = null,
            CountryId = countryId,
            CountryName = countryName,
            Subdivisions = new List<SubdivisionListItem>(),
            Latitude = null,
            Longitude = null
        };
        StateHasChanged();
    }
    private void EditLocation(Location location)
    {
        locationToEdit = location;
        StateHasChanged();
    }
    private void OnOkLocationDialog()
    {
        if (locationToEdit is not null) {
            if (locationToEdit.LocationId is null || locationToEdit.LocatableId is null) {
                Locatable!.Locations.Add(locationToEdit);
            }
            locationToEdit = null;
        }
        StateHasChanged();
    }
    private void OnCancelLocationDialog()
    {
        locationToEdit = null;
        StateHasChanged();
    }
}
