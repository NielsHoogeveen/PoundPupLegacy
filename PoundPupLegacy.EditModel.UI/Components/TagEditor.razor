@inherits ViewerBase
@inject ITopicSearchService topicSearchService

<div class="node-type-group">

    <div class="term-selector">
        <label for="node-type-@NodeTypeTags.TagNodeType.TagLabelName">@NodeTypeTags.TagNodeType.TagLabelName</label>
        <input type="text" name="node-type-@NodeTypeTags.TagNodeType.TagLabelName" class="tag-search" @bind="@topicSearch" @oninput="OnSetTopicSearch" />
    </div>

    @if (termOptions.Any())
    {
        <div class="term-options">
        @foreach (var elem in termOptions)
        {
                <div class="term-option" @onclick="() => SelectTerm(elem.TermId)">@elem.Name</div>
        }
        </div>
    }
    @if (NodeTypeTags.Entries.Any())
    {
        <div class="tag-elements">
        @foreach (var elem in NodeTypeTags.Entries)
        {

                            
            if (!elem.HasBeenDeleted)
            {
                <div class="tag-element">
                        <span class="tag-element-name">@elem.Name</span>
                    <button type="button" @onclick="() => SetTagToDeleted(elem.TermId)">delete</button>
                </div>
            }
        }
        </div>
    }
</div>

@code {
    [Parameter]
    [EditorRequired]
    public Tags NodeTypeTags { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public int? NodeId { get; set; }

    List<Tag> termOptions = new();

    string topicSearch { get; set; } = "";

    private void SelectTerm(int termId)
    {
        var tag = termOptions.FirstOrDefault(x => x.TermId == termId);
        if (tag is not null)
        {
            var elem = NodeTypeTags.Entries.FirstOrDefault(x => x.TermId == termId);
            if (elem is null)
            {
                NodeTypeTags.Entries.Add(tag);
            }
            else
            {
                elem.HasBeenDeleted = false;
            }
        }
        termOptions.Clear();
        topicSearch = "";
        StateHasChanged();

    }

    private async Task OnSetTopicSearch(ChangeEventArgs args)
    {
        termOptions.Clear();
        var searchString = args.Value?.ToString() ?? string.Empty;
        if (!string.IsNullOrEmpty(searchString) && NodeId.HasValue)
        {
            termOptions = await topicSearchService.GetTerms(
                nodeId: NodeId.Value, 
                tenantId: TenantId, 
                searchString: searchString,
                nodeTypeIds: NodeTypeTags.TagNodeType.NodeTypeIds
            );
        }
        StateHasChanged();
    }

    private void SetTagToDeleted(int termId)
    {
        
        var elem = NodeTypeTags.Entries.FirstOrDefault(x => x.TermId == termId);
        if (elem is not null)
        {
            if (elem.IsStored)
            {
                elem.SetToDeleted();
            }
            else
            {
                NodeTypeTags.Entries.Remove(elem);
            }
            StateHasChanged();
        }
    }
}
