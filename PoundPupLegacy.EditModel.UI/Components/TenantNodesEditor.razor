@inherits ViewerBase
@inject NavigationManager navigationManager;

@if (Node is not null)
{
    <div class="tenant-node-editor" >
        <h4>Publications</h4>
        @if(Node.Tenants.Any()){
            <div class="tenant-nodes">
                <div class="grid-header"></div>
                <div class="grid-header">
                    Tenant
                </div>
                <div class="grid-header">
                    Path
                </div>
                <div class="grid-header">
                    Publication status
                </div>
                <div class="grid-header">
                    Subgroup
                </div>
                @foreach(var tenant in Node.Tenants) {
                    @if(tenant.TenantNode is not null && !tenant.TenantNode.HasBeenDeleted)
                    {
                        if (tenant.TenantNode.CanBeUnchecked)
                        {
                            <input class="item" type="checkbox" name="tenant-@tenant.Id" checked @onclick="() => Uncheck(tenant.Id)" />
                        }
                        else {
                            <input class="item" type="checkbox" name="tenant-@tenant.Id" checked disabled />
                        }
                        <div class="item domain-name">@tenant.DomainName</div>
                        <div class="item">
                            <input type="text" value="@tenant.TenantNode!.UrlPath"/>
                        </div>
                        <div class="item">
                            <select @onchange="(e) => OnSelectPublicationStatus(tenant.Id, e)">
                            @foreach(var option in new List<(int, string)> {(0, "unpublished"), (1, "published"), (2, "private") }) 
                            {
                                @if(tenant.TenantNode.PublicationStatusId == option.Item1) 
                                {
                                    <option selected value="@option.Item1">@option.Item2</option>
                                }
                                else
                                {
                                    <option value="@option.Item1">@option.Item2</option>
                                }
                            }
                            </select>
                        </div>
                        <div class="item">
                            @if (tenant.Subgroups.Any()) 
                            {
                                <select @onchange="(e) => OnSelectSubgroup(tenant.Id, e)">
                                @if (tenant.AllowAccess) 
                                {
                                    <option value=""></option>
                                }
                        
                                @foreach(var subgroup in tenant.Subgroups) 
                                {
                                    @if(subgroup.Id == tenant.TenantNode!.SubgroupId) 
                                    {
                                        <option selected value="@subgroup.Id">@subgroup.Name</option>
                                    }else
                                    {
                                        <option value="@subgroup.Id">@subgroup.Name</option>
                                    }
                                }
                                </select>
                            }
                        </div>
                    }
                    else 
                    {
                        <input class="item" type="checkbox" name="tenant-@tenant.Id" @onclick="() => Check(tenant.Id)" />
                        <div class="item">@tenant.DomainName</div>
                        <div class="item"></div>
                        <div class="item"></div>
                        <div class="item"></div>
                    }
                }
            </div>
        }
    </div>
}
@code {

    [Parameter]
    [EditorRequired]
    public Node? Node { get; set; }

    private int? NodeId => Node switch {
        ExistingNode n => n.NodeId,
        _ => null
    };

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
        if (Node is not null)
        {
            switch (Node) {
                case NewNode n:
                    foreach (var tenant in n.Tenants) {
                        var tenantNode = n.TenantNodes.FirstOrDefault(x => x.TenantId == tenant.Id);
                        tenant.TenantNode = tenantNode;
                    }
                    break;
                case ExistingNode e:
                    var t = Node.Tenants.First(x => x.Id == TenantId);
                    t.TenantNode = new TenantNode.NewTenantNodeForExistingNode {
                            TenantId = TenantId,
                            HasBeenDeleted = false,
                            NodeId = e.NodeId,
                            UrlId = e.NodeId,
                            PublicationStatusId = t.PublicationStatusIdDefault,
                            UrlPath = null,
                            SubgroupId = null,
                            CanBeUnchecked = false,
                            HasBeenStored = false
                        };
                    break;
            }
        }
    }

    private void Uncheck(int tenantId)
    {
        if(Node is not null)
        {
            var tenant = Node.Tenants.First(x => x.Id == tenantId);
            if(tenant.TenantNode is null) {
                throw new NullReferenceException("Tenant Node should not be null");
            }
            if (tenant.TenantNode is TenantNode.ExistingTenantNode existingTenantNode) {
                existingTenantNode.HasBeenDeleted = true;
            }
            else {
                tenant.TenantNode = null;
            }
            StateHasChanged();
        }

    }
    private void Check(int tenantId)
    {
        if (Node is not null) {
            var tenant = Node.Tenants.First(x => x.Id == tenantId);
            if (tenant.TenantNode is TenantNode.ExistingTenantNode existingTenantNode) {
                tenant.TenantNode.HasBeenDeleted = false;
            }
            else if (tenant.TenantNode is TenantNode.NewTenantNodeForExistingNode newTenantNodeForExistingNode) {
                tenant.TenantNode = new TenantNode.NewTenantNodeForExistingNode
                {
                    TenantId = tenantId,
                    HasBeenDeleted = false,
                    PublicationStatusId = tenant.PublicationStatusIdDefault,
                    NodeId = newTenantNodeForExistingNode.NodeId,
                    UrlId = newTenantNodeForExistingNode.NodeId,
                    UrlPath = null,
                    SubgroupId = null,
                    CanBeUnchecked = true,
                    HasBeenStored = false
                };
            }
            else {
                tenant.TenantNode = new TenantNode.NewTenantNodeForNewNode
                {
                    TenantId = tenantId,
                    HasBeenDeleted = false,
                    PublicationStatusId = tenant.PublicationStatusIdDefault,
                    UrlPath = null,
                    SubgroupId = null,
                    CanBeUnchecked = true,
                    HasBeenStored = false
                };
            }
            StateHasChanged();
        }

    }
    private void SetSubgroup(int tenantId, int? subgroupId)
    {
        if (Node is not null)
        {
            var tenant = Node.Tenants.First(x => x.Id == tenantId);
            if(tenant.TenantNode is not null) {
                tenant.TenantNode.SubgroupId = subgroupId;
                if (subgroupId.HasValue) {
                    var subgroup = tenant.Subgroups.First(x => x.Id == subgroupId.Value);
                    tenant.TenantNode.PublicationStatusId = subgroup.PublicationStatusIdDefault;
                }
                else {
                    tenant.TenantNode.PublicationStatusId = tenant.PublicationStatusIdDefault;
                }

            }
            StateHasChanged();
        }
    }
    private void SetPublicationStatus(int tenantId, int publicationStatusId)
    {
        if (Node is not null) {
            var tenant = Node.Tenants.First(x => x.Id == tenantId);
            if (tenant.TenantNode is not null) {
                tenant.TenantNode.PublicationStatusId = publicationStatusId;
            }
            StateHasChanged();
        }
    }
    void OnSelectSubgroup(int tenantId, ChangeEventArgs e)
    {
        if(int.TryParse(e.Value!.ToString(), out int subgroupId)){
            SetSubgroup(tenantId, subgroupId);
        }
        else {
            SetSubgroup(tenantId, null);
        }

    }
    void OnSelectPublicationStatus(int tenantId, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value!.ToString(), out int publicationStatusId)) {
            SetPublicationStatus(tenantId, publicationStatusId);
        }
    }
}
