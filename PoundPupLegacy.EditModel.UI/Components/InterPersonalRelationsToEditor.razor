@inherits EditorBase
@if(RelationContext is InterPersonalRelationsEditor.RelationContext.RelationContextTo ctx) {
    
    <ModalDialog 
        Title="Add inter-personal relation" 
        Id="inter-personal-relation-dialog" 
        OnOk="() => Ok(ctx)" 
        OnCancel="Cancel">
        <DialogContent>
            <InterPersonalRelationToEditorDialog  
                RelationTypes=RelationTypes
                RelationContext=ctx
                Swap=Swap
                @ref=dialog/>
        </DialogContent>
    </ModalDialog>
    
}
<div class="relations-editor">
    <h4>Relations between this person and another one</h4>
    @if (Relations.Any())
    {
        <div class="relations">
            <div class="grid-header first">From</div>
            <div class="grid-header">Type</div>
            <div class="grid-header">To</div>
            <div class="grid-header">Start</div>
            <div class="grid-header">End</div>
            <div class="grid-header"></div>
            <div class="grid-header"></div>
            @foreach(var relation in Relations) {
                var classString = relation.HasBeenDeleted ? "row deleted" : "row";
                <div class="@classString first">
                    @relation.PersonFromName
                </div>
                <div class="@classString">
                    @relation.InterPersonalRelationType.Name
                </div>
                <div class="@classString">
                    @relation.PersonToName
                </div>
                <div class="@classString">
                    @relation.DateFrom
                </div>
                <div class="@classString">
                    @relation.DateTo
                </div>
                <div class="@classString">
                    @if (!relation.HasBeenDeleted)
                    {
                        <button type="button" @onclick="() => Edit(relation)">edit</button>
                    }
                </div>
                <div class="@classString">
                    @if (relation.HasBeenDeleted) {
                        <button type="button" @onclick="() => RestoreRelation(relation)">restore</button>
                    }
                    else {
                        <button type="button" @onclick="() => RemoveRelation(relation)">remove</button>
                    }
                </div>

            }
        </div>
    }        
    <button type="button" @onclick="Add">Add</button>
</div>
@code {
    [Parameter]
    [EditorRequired]
    public List<CompletedInterPersonalRelationTo> Relations { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public PersonItem PersonItem { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<InterPersonalRelationTypeListItem> RelationTypes { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public InterPersonalRelationsEditor.RelationContext? RelationContext { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Action<InterPersonalRelationsEditor.RelationContext> Swap { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Action<InterPersonalRelationsEditor.RelationContext.RelationContextTo> Update { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Action<CompletedInterPersonalRelationTo> Edit { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Action Add { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Action<InterPersonalRelationsEditor.RelationContext.RelationContextTo> Ok { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Action Cancel { get; set; } = default!;

    private InterPersonalRelationToEditorDialog? dialog;

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
    }
    public override void OnTitleChange(string title)
    {
        foreach (var relation in Relations) {
            relation.SetName(title);
        }
    }
    private void RestoreRelation(InterPersonalRelation relation)
    {
        relation.HasBeenDeleted = false;
        StateHasChanged();
    }

    private void RemoveRelation(InterPersonalRelation relation)
    {
        relation.HasBeenDeleted = true;
        StateHasChanged();
    }

    internal CompletedInterPersonalRelationTo? GetValidRelation()
    {
        return dialog?.GetValidRelation();
    }
}
