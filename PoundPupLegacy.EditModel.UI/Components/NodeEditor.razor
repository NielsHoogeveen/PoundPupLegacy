@inherits EditorBase
@typeparam T where T: class, Node
@inject IJSRuntime JSRuntime
@inject IEditService<T> editService

<div class="editor-form">
    <h1>@Title</h1>
    <EditForm EditContext="@editContext" OnSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="title">Title</label>
            <InputText @bind-Value="Model.Title" id="title" class="title-editor" type="text"/>
            <ValidationMessage For="@(() => Model.Title)" />
        </div>
        @if(Model is Nameable nameable) {
            <NameableEditor Model="nameable" @ref="nameableEditor"/>
        }
        @if(Model is SimpleTextNode simpleTextNode){
            <SimpleTextNodeEditor Model="simpleTextNode" @ref="simpleTextNodeEditor"/>
        }
        @if(Model is Document document) {
            <DocumentEditor Model="document" @ref="documentEditor"/>
        }
        @if (Model is Organization organization) {
            <OrganizationEditor Model="organization" />
        }
        @if (Model is Person person) {
            <PersonEditor Model="person" />
        }
        <TagsEditor NodeTypesTags="Model.Tags" NodeId="Model.NodeId" />
        <TenantNodesEditor Node="@Model" />
        <AttachmentEditor Files="Model.Files" NodeId="Model.NodeId" />
        @if (Model is Locatable locatable) {
            <LocationsEditor Locatable="locatable" />
        }
        <button type="submit">Submit</button>
    </EditForm>
</div>
@code {
    [Parameter]
    [EditorRequired]
    public T Model { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public string Title { get; set; } = default!;

    private EditContext? editContext;
    private ValidationMessageStore? validationMessageStore;

    private NameableEditor? nameableEditor;

    private SimpleTextNodeEditor? simpleTextNodeEditor;

    private DocumentEditor? documentEditor;

    private OrganizationEditor? organizationEditor;

    protected override void OnInitialized()
    {
        editContext = new EditContext(Model);
        validationMessageStore = new ValidationMessageStore(editContext);
    }

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
        if (Model.Title is null || Model.Title == string.Empty) {
            validationMessageStore!.Add(editContext!.Field(nameof(Model.Title)), "Title is required.");
            invalidIds.Add("title");
        }

    }

    private async Task HandleSubmit()
    {
        if (Model is not null && validationMessageStore is not null && editContext is not null)
        {
            validationMessageStore.Clear();
            var invalidIds = new List<string>();
            await Validate(validationMessageStore, invalidIds);
            if(simpleTextNodeEditor is not null) {
                await simpleTextNodeEditor.Validate(validationMessageStore, invalidIds);
            }
            if (documentEditor is not null) {
                await documentEditor.Validate(validationMessageStore, invalidIds);
            }
            if (organizationEditor is not null) {
                await organizationEditor.Validate(validationMessageStore, invalidIds);
            }
            if (invalidIds.Any()) {
                editContext.NotifyValidationStateChanged();
                await JSRuntime.InvokeVoidAsync("scrollToFirstError", new object[] { "title" });
                return;
            }
            await editService.SaveAsync(Model);
            await JSRuntime.InvokeVoidAsync("reloadNode", Model.UrlId);
        }
    }
}

