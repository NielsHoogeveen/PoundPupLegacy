@typeparam TCreateModel where TCreateModel: class, ResolvedNewNode
@typeparam TUpdateModel where TUpdateModel: class, ExistingNode
@typeparam TResolveData
@inject IJSRuntime JSRuntime
@inject IEntitySaveService<TUpdateModel, TCreateModel> editService
<div class="editor-form">
    <h1>@Title</h1>
    <EditForm EditContext="@editContext" OnSubmit="@Submit">
        <DataAnnotationsValidator />
                <button type="submit">Submit</button>
    </EditForm>
</div>
@code {
    [Parameter]
    [EditorRequired]
    public Resolver<TUpdateModel, TCreateModel, TResolveData> Model { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Func<Task<ValidationResult<TUpdateModel, TCreateModel>>> OnValidationResult { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public string Title { get; set; } = default!;

    private EditContext? editContext;
    private ValidationMessageStore? validationMessageStore;

    public async Task Submit()
    {
        await (await OnValidationResult()).Match(
            async success => await Save(success),
            async error => await HandleErrors(error)
        );
    }
    private async Task Save(ValidationResult<TUpdateModel, TCreateModel>.Success success)
    {
        await success.Node.Match(
            async update => await editService.SaveAsync(update),
            async create => await editService.SaveAsync(create)
        );
    }
    private async Task HandleErrors(ValidationResult<TUpdateModel, TCreateModel>.Error error)
    {
        await Task.CompletedTask;
    }
}

