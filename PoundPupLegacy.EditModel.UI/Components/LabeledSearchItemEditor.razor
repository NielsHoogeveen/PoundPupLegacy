@inherits ViewerBase
@typeparam T where T: class, EditListItem
@inject ISearchService<T> SearchService
<div class="form-group">
    <label>@Label</label>
    <SearchItemEditor
        Value="@Value"
        ValueChanged="@ValueChanged"
        EnableEdit="@EnableEdit"
        IsMandatory="@IsMandatory" />
</div>
@code {
    [Parameter]
    public T? Value { get; set; } = default!;

    [Parameter]
    public EventCallback<T?> ValueChanged { get; set; }

    [Parameter]
    [EditorRequired]
    public bool EnableEdit { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public bool IsMandatory { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public string Label { get; set; } = string.Empty;

    T[] options = Array.Empty<T>();

    string itemSearch { get; set; } = "";

    private async Task OnSetItemSearch(ChangeEventArgs args)
    {
        options = Array.Empty<T>();
        var searchString = args.Value?.ToString() ?? string.Empty;
        if (!string.IsNullOrEmpty(searchString)) {
            options = (await SearchService.GetItems(
                tenantId: Tenant.Id,
                searchString: searchString
            )).ToArray();
        }
        StateHasChanged();
    }
    private async Task SelectItem(int itemId)
    {
        Value = options.First(x => x.Id == itemId);
        options = Array.Empty<T>();
        itemSearch = "";
        await ValueChanged.InvokeAsync(Value);
    }
    private async Task Clear()
    {
        Value = null;
        await ValueChanged.InvokeAsync(Value);
    }
}
