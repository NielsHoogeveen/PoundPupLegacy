@inherits EditorBase
@if (_relationToEdit is not null) {
    <ModalDialog 
        Title="Edit party political entity relation" 
        Id="party-political-relation-dialog" 
        OnOk="OnOk" 
        OnCancel="OnCancel">
        <DialogContent>
            <PersonPoliticalEntityRelationEditorDialog  
                @bind-Relation="_relationToEdit" 
                RelationTypes="@RelationTypes"
                @ref=dialog/>
        </DialogContent>
    </ModalDialog>
}
<div class="relations-editor">
    <h4>Relations between this @PartyTypeName and a political entity</h4>
    @if (Relations.Any())
    {
        <div class="relations">
            <div class="grid-header first">From</div>
            <div class="grid-header">Type</div>
            <div class="grid-header">To</div>
            <div class="grid-header">Start</div>
            <div class="grid-header">End</div>
            <div class="grid-header"></div>
            <div class="grid-header"></div>
            @foreach (var relation in Relations)
            {
                var classString = relation.HasBeenDeleted ? "row deleted" : "row";
                <div class="@classString first">
                    @relation.PersonName
                </div>
                <div class="@classString">
                    @relation.PersonPoliticalEntityRelationType.Name
                </div>
                <div class="@classString">
                    @relation.PoliticalEntityName
                </div>
                <div class="@classString">
                    @relation.DateFrom
                </div>
                <div class="@classString">
                    @relation.DateTo
                </div>
                <div class="@classString">
                    @if (!relation.HasBeenDeleted) {
                        <button type="button" @onclick="() => EditRelation(relation)">edit</button>
                    }
                </div>
                <div class="@classString">
                    @if (relation.HasBeenDeleted) {
                        <button type="button" @onclick="() => RestoreRelation(relation)">restore</button>
                    }
                    else {
                        <button type="button" @onclick="() => RemoveRelation(relation)">remove</button>
                    }
                </div>
            }
        </div>
    }
    <button type="button" @onclick="OnAdd">Add</button>
</div>
@code {
    [Parameter]
    [EditorRequired]
    public List<CompletedPersonPoliticalEntityRelation> Relations { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<PersonPoliticalEntityRelationTypeListItem> RelationTypes { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public PersonItem Person { get; set; } = default!;


    [Parameter]
    [EditorRequired]
    public string PartyTypeName { get; set; } = default!;


    private PersonPoliticalEntityRelationEditorDialog? dialog;

    private PersonPoliticalEntityRelation? _relationToEdit = null;

    public override async Task Validate(ValidationMessageStore validationMessageStore, List<string> invalidIds)
    {
        await Task.CompletedTask;
    }
    public override void OnTitleChange(string title)
    {

    }
    private void RestoreRelation(PersonPoliticalEntityRelation relation)
    {
        relation.HasBeenDeleted = false;
        StateHasChanged();
    }

    private void RemoveRelation(PersonPoliticalEntityRelation relation)
    {
        relation.HasBeenDeleted = true;
        StateHasChanged();
    }

    private void EditRelation(PersonPoliticalEntityRelation relationToEdit)
    {
        _relationToEdit = relationToEdit;
        StateHasChanged();
    }
    private void OnOk()
    {
        if (dialog is not null) {
            var relation = dialog.GetValidRelation();
            if (relation is null)
                return;
            Relations.Add(relation);
        }
        _relationToEdit = null;
        StateHasChanged();
    }
    private void OnCancel()
    {
        _relationToEdit = null;
        StateHasChanged();
    }
    private void OnAdd()
    {
        _relationToEdit = Person.Match<PersonPoliticalEntityRelation>(
            personListItem: pli => pli.GetPersonPoliticalEntityRelation(RelationTypes.First(), TenantId, UserId),
            personName: pn => pn.GetPersonPoliticalEntityRelation(RelationTypes.First(), TenantId, UserId)
        );
        StateHasChanged();
    }
}
