@using static PoundPupLegacy.EditModel.InterPersonalRelation;
@using static PoundPupLegacy.EditModel.PersonItem;
@inject ILocationService LocationService
@inject IJSRuntime JSRuntime
@if(WorkRelation is not null) {
    <EditForm EditContext="editContext">
        @if (WorkRelation.PersonItemFrom is PersonName) {
            <div class="form-group">
                <label>Person from</label>
                <div>@WorkRelation.PersonFromName</div>
            </div>
        }
        else{
            <SearchItemEditor T="PersonListItem"
                IsMandatory = "true"
                @bind-Value = "WorkRelation.PersonListItemFrom"
                EnableEdit="WorkRelation.RelationSideThisPerson == RelationSide.To"
                Label = "Person from" />
        }
        <ValidationMessage For="@(() => WorkRelation.PersonListItemFrom)" />
        <div class="type-and-swap">
            <div>
                <label for="relation-type">Relation type</label>
                <select id="relation-type" @onchange="OnChangeType">
                    @foreach (var relationType in RelationTypes.OrderBy(x => x.Name)) {
                        @if (relationType.Id == RelationType.Id) {
                            <option selected value="@relationType.Id">@relationType.Name</option>
                        }
                        else {
                            <option value="@relationType.Id">@relationType.Name</option>
                        }
                    }
                </select>
            </div>
            @if (!RelationType.IsSymmetric) {
                <button type="button" @onclick="Swap">Swap To/From</button>
            }

        </div>
        @if (WorkRelation.PersonItemTo is PersonName) {
            <div class="form-group">
                <label>Person from</label>
                <div>@WorkRelation.PersonToName</div>
            </div>
        }
        else{
            <SearchItemEditor T="PersonListItem"
                IsMandatory="true"
                @bind-Value="WorkRelation.PersonListItemTo"
                EnableEdit="WorkRelation.RelationSideThisPerson == RelationSide.From"
                Label="Person to" />
        }
        <ValidationMessage For="@(() => WorkRelation.PersonListItemTo)" />
        <SearchItemEditor T="DocumentListItem"
            IsMandatory="false"
            @bind-Value="WorkRelation.ProofDocument"
            EnableEdit="true"
            Label="Proof document" />
        <div class="form-group">
            <label>Description</label>
            <CKEditor Id="relation-editor" @bind-Value="WorkRelation.Description" />
        </div>
        <div class="form-group">
            <label>Start date</label>
            <InputDate @bind-Value="WorkRelation.DateFrom" />
        </div>
        <div class="form-group">
            <label>End date</label>
            <InputDate @bind-Value="WorkRelation.DateTo" />
        </div>
    </EditForm>
}
@code {

    [Parameter]
    [EditorRequired]
    public InterPersonalRelationsEditor.PersonEditContext EditContext { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<InterPersonalRelationTypeListItem> RelationTypes { get; set; } = default!;

    private InterPersonalRelation? WorkRelation;
    private EditContext? editContext;
    private ValidationMessageStore? validationMessageStore;
    private InterPersonalRelationTypeListItem RelationType { get; set; } = default!;


    protected override void OnInitialized()
    {
        WorkRelation = EditContext.RelationToEdit;
        WorkRelation.PersonListItemFrom = WorkRelation.PersonItemFrom switch {
            PersonListItem p => p,
            _ => null
        };
        WorkRelation.PersonListItemTo = WorkRelation.PersonItemTo switch {
            PersonListItem p => p,
            _ => null
        };
        editContext = new EditContext(WorkRelation);
        validationMessageStore = new ValidationMessageStore(editContext);

        RelationType = RelationTypes.First(x => x.Id == WorkRelation.InterPersonalRelationType.Id);
    }

    private void Swap()
    {
        WorkRelation = WorkRelation?.SwapFromAndTo();
        editContext = new EditContext(WorkRelation!);
        validationMessageStore = new ValidationMessageStore(editContext);
        StateHasChanged();
    }

    private void OnChangeType(ChangeEventArgs args)
    {
        if(args.Value is not null && args.Value is string str) {
            if(int.TryParse(str, out var typeId)) {
                RelationType = RelationTypes.First(x => x.Id == typeId);
                WorkRelation!.InterPersonalRelationType = RelationType;
                StateHasChanged();
            }
        }
    }
    public CompletedInterPersonalRelation? GetValidRelation()
    {
        validationMessageStore?.Clear();
        bool hasErrors = false;
        if (WorkRelation!.PersonItemFrom is not PersonName && WorkRelation.PersonListItemFrom is null) {
            validationMessageStore!.Add(editContext!.Field(nameof(WorkRelation.PersonListItemFrom)), "Person from is required");
            hasErrors = true;
            editContext.NotifyValidationStateChanged();
        }
        if (WorkRelation!.PersonItemTo is not PersonName && WorkRelation.PersonListItemTo is null) {
            validationMessageStore!.Add(editContext!.Field(nameof(WorkRelation.PersonListItemTo)), "Person to is required");
            hasErrors = true;
            editContext.NotifyValidationStateChanged();
        }
        if (hasErrors)
            return null;
        return WorkRelation.Match<CompletedInterPersonalRelation>(
            incompleteNewInterPersonalFromRelation: r => r.GetCompletedRelation(WorkRelation.PersonListItemTo!),
            incompleteNewInterPersonalToRelation: r => r.GetCompletedRelation(WorkRelation.PersonListItemFrom!),
            completedNewInterPersonalNewFromRelation: r => r with { PersonTo = WorkRelation.PersonListItemTo! },
            completedNewInterPersonalNewToRelation: r => r with { PersonFrom = WorkRelation.PersonListItemFrom! },
            resolvedInterPersonalRelation: r => r with { PersonFrom = WorkRelation.PersonListItemFrom!, PersonTo = WorkRelation.PersonListItemTo! }
        );
    }
}



