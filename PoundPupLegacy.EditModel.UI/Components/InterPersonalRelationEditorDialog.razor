@inject ILocationService LocationService
@inject IJSRuntime JSRuntime

@if (WorkRelation!.PersonItemFrom is PersonName) {
    <div class="form-group">
        <label>Person from</label>
        <div>@WorkRelation.PersonFromName</div>
    </div>
}
@if (WorkRelation.PersonItemFrom is PersonListItem personListItemFrom) {
    <SearchItemEditor
        T = "PersonListItem"
        IsMandatory = "true"
        @bind - Value = "personListItemFrom"
        EnableEdit="WorkRelation.RelationSideThisPerson == RelationSide.To"
        Label = "Person from" />
}

<div class="type-and-swap">
    <div>
        <label for="relation-type">Relation type</label>
        <select id="relation-type" @onchange="OnChangeType">
            @foreach (var relationType in RelationTypes.OrderBy(x => x.Name)) {
                @if (relationType.Id == RelationType.Id) {
                    <option selected value="@relationType.Id">@relationType.Name</option>
                }
                else {
                    <option value="@relationType.Id">@relationType.Name</option>
                }
            }
        </select>
    </div>
    @if (!RelationType.IsSymmetric) {
        <button type="button" @onclick="Swap">Swap To/From</button>
    }

</div>
@if (WorkRelation.PersonItemTo is PersonName) {
    <div class="form-group">
        <label>Person from</label>
        <div>@WorkRelation.PersonToName</div>
    </div>
}
@if (WorkRelation.PersonItemTo is PersonListItem personListItemTo) {
    <SearchItemEditor T="PersonListItem"
        IsMandatory="true"
        @bind-Value="personListItemTo"
        EnableEdit="WorkRelation.RelationSideThisPerson == RelationSide.From"
        Label="Person to" />
}
<SearchItemEditor T="DocumentListItem"
    IsMandatory="false"
    @bind-Value="Relation.ProofDocument"
    EnableEdit="true"
    Label="Proof document" />
<div class="form-group">
    <label>Description</label>
    <CKEditor Id="relation-editor" @bind-Value="Relation.Description" />
</div>
<div class="form-group">
    <label>Start date</label>
    <InputDate @bind-Value="Relation.DateFrom" />
</div>
<div class="form-group">
    <label>End date</label>
    <InputDate @bind-Value="Relation.DateTo" />
</div>
@code {

    [Parameter]
    [EditorRequired]
    public InterPersonalRelation Relation { get; set; } = default!;

    private InterPersonalRelation? WorkRelation;

    [Parameter]
    [EditorRequired]
    public List<InterPersonalRelationTypeListItem> RelationTypes { get; set; } = default!;

    private InterPersonalRelationTypeListItem RelationType { get; set; } = default!;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        WorkRelation = Relation;
    }

    protected override void OnInitialized()
    {
        RelationType = RelationTypes.First(x => x.Id == Relation.InterPersonalRelationType.Id);
    }

    private void Swap()
    {
        WorkRelation = WorkRelation?.SwapFromAndTo();
        StateHasChanged();
    }

    private void OnChangeType(ChangeEventArgs args)
    {
        if(args.Value is not null && args.Value is string str) {
            if(int.TryParse(str, out var typeId)) {
                RelationType = RelationTypes.First(x => x.Id == typeId);
                StateHasChanged();
            }
        }
    }
    public CompletedInterPersonalRelation? GetValidRelation()
    {
        return null;
    }

}

