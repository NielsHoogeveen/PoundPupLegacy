@inherits EditorDetailBase
@using PoundPupLegacy.EditModel.UI.Services
@using Microsoft.Extensions.Logging
@inject ILogger<AttachmentEditor> logger
@inject IAttachmentStoreService attachmentService
@if (Files is not null)
{
    <div class="editor-section">
        <h4> Attachments</h4>
        <label class="file-upload" for="file-upload">Upload files</label>
        <InputFile OnChange="@LoadFiles" multiple id="file-upload" />
        @if (Files.Any())
        {
            <div class="files">
                @foreach (var (file, index) in Files.Where(x => !x.HasBeenDeleted).Select((x, y) => (x, y)))
                {
                    <div class="file">
                        <div>@file.Name</div>
                        <div>@file.MimeType</div>
                        <div>@file.Size</div>
                        <button type="button" class="close" @onclick="() => SetAttachmentToDeleted(index)">Remove</button>
                    </div>
                }
            </div>
        }
        <div class="error">@((MarkupString)ErrorMessage)</div>
    </div>
}

@code {
    [Parameter]
    [EditorRequired]
    public List<EditModel.File>? Files { get; set; }

    private string ErrorMessage = "";

    private int maxNumberOfFiles = 100;
    private long maxFileSize = 1024L * 1024L * 1024L * 8L;
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        if (Files is not null)
        {
            ErrorMessage = "";
            var files = e.GetMultipleFiles(maxNumberOfFiles);
            foreach (var file in files)
            {
                try
                {
                    if (file.Size > maxFileSize)
                    {
                        ErrorMessage += $"<div>File {file.Name} has a size that exceeds the maximum</div>";
                        continue;
                    }
                    var path = await attachmentService.StoreFile(file);
                    logger.Log(LogLevel.Information, "Adding file {0}", path);
                    if(path is null) {
                        ErrorMessage += "<div>An internal error occured uploading files</div>";
                        continue;
                    }
                    Files.Add(new EditModel.File
                        {
                            Id = null,
                            Name = file.Name,
                            Size = file.Size,
                            MimeType = file.ContentType,
                            Path = path,
                            HasBeenStored = false,
                            NodeId = NodeId,
                        });

                }
                catch (Exception ex)
                {
                    ErrorMessage += "<div>An internal error occured uploading files</div>";
                    logger.LogError("File: {Filename} Error: {Error}",
                        file.Name, ex.Message);
                };
            }
        }
    }
    private void SetAttachmentToDeleted(int index)
    {

        if (Files is not null) {
            var elem = Files[index];
            if (elem is not null) {
                if (elem.HasBeenStored) {
                    elem.HasBeenDeleted = true;
                }
                else {
                    Files.Remove(elem);
                }
                StateHasChanged();
            }
        }
    }

    public override void OnTitleChange(string title)
    {
        throw new NotImplementedException();
    }
    public override Task<List<ErrorDetail>> Validate()
    {
        return Task.FromResult(new List<ErrorDetail>());
    }

}