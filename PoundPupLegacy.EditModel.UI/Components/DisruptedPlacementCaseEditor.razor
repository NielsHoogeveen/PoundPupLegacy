@inherits EntityEditorBase<DisruptedPlacementCase.ToUpdate, DisruptedPlacementCase.ToCreate, Unit>
@if (Model is not null) {
    <NodeEditor TCreateModel="DisruptedPlacementCase.ToCreate"
                TUpdateModel="DisruptedPlacementCase.ToUpdate"
                TResolveData="Unit"
                Model="Model"
                OnValidationResult="() => Validate()"
                Title="Edit disrupted placement case">
        <NodeDetailsEditor 
            Model="DisruptedPlacementCase.NodeDetails"
            OnTitleChanged="OnTitleChanged"
            @ref=nodeDetailsEditor>
            <Top>
                <NameableEditor Model="DisruptedPlacementCase.NameableDetails" />
            </Top>
            <Middle>
                <CaseDetailsEditor CaseDetails="DisruptedPlacementCase.CaseDetails" />
            </Middle>
            <Bottom>
                <LocatableDetailsEditor LocatableDetails="DisruptedPlacementCase.LocatableDetails" />
            </Bottom>
        </NodeDetailsEditor>
    </NodeEditor>
}
@code {
    [Parameter]
    [EditorRequired]
    public DisruptedPlacementCase DisruptedPlacementCase { get; set; } = default!;

    protected override Resolver<DisruptedPlacementCase.ToUpdate, DisruptedPlacementCase.ToCreate, Unit> Model => DisruptedPlacementCase;

    private NodeDetailsEditor? nodeDetailsEditor;

    protected override List<EditorDetailBase?> DetailsEditors => new() {
        nodeDetailsEditor
    };
    protected override Unit ResolveData => Unit.Instance;
}
