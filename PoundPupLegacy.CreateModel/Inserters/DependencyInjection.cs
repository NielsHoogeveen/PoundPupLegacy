using Microsoft.Extensions.DependencyInjection;

namespace PoundPupLegacy.CreateModel.Inserters;

internal static class DependencyInjection
{
    internal static void AddCreateModelInserters(this IServiceCollection services)
    {
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableAbuseCase>, AbuseCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AbuseCaseTypeOfAbuse>, AbuseCaseTypeOfAbuseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AbuseCaseTypeOfAbuser>, AbuseCaseTypeOfAbuserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AccessRole>, AccessRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AccessRolePrivilege>, AccessRolePrivilegeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ActToCreate>, ActInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Action>, ActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ActionMenuItem>, ActionMenuItemInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AdministratorRole>, AdministratorRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AuthoringStatus>, AuthoringStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BasicAction>, BasicActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableBasicCountry>, BasicCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableBasicNameable>, BasicNameableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableBasicSecondLevelSubdivision>, BasicSecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableBillActionType>, BillActionTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BillToCreate>, BillInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableBindingCountry>, BindingCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableBlogPost>, BlogPostInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BottomLevelSubdivisionToCreate>, BottomLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableBoundCountry>, BoundCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseNewCasePartiesToUpdate>, CaseCasePartiesInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseToCreate>, CaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewCaseParties>, CasePartiesInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CasePartiesOrganization>, CasePartiesOrganizationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CasePartiesPerson>, CasePartiesPersonInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableCasePartyType>, CasePartyTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseTypeCasePartyType>, CaseTypeCasePartyTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseType>, CaseTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableChildPlacementType>, ChildPlacementTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableChildTraffickingCase>, ChildTraffickingCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableCoercedAdoptionCase>, CoercedAdoptionCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Collective>, CollectiveInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CollectiveUser>, CollectiveUserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Comment>, CommentInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CongressionalTermToCreate>, CongressionalTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableCongressionalTermPoliticalPartyAffiliation>, CongressionalTermPoliticalPartyAffiliationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ContentSharingGroup>, ContentSharingGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableCountryAndFirstAndBottomLevelSubdivision>, CountryAndFirstAndBottomLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableCountryAndFirstAndSecondLevelSubdivision>, CountryAndFirstAndSecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountryAndFirstLevelSubdivisionToCreate>, CountryAndFirstLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableCountryAndIntermediateLevelSubdivision>, CountryAndIntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountryToCreate>, CountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountrySubdivisionType>, CountrySubdivisionTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CreateNodeAction>, CreateNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<DeleteNodeAction>, DeleteNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableDenomination>, DenominationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableDeportationCase>, DeportationCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableDiscussion>, DiscussionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableDisruptedPlacementCase>, DisruptedPlacementCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<DocumentableToCreate>, DocumentableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableDocument>, DocumentInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableDocumentType>, DocumentTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EditNodeAction>, EditNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EditOwnNodeAction>, EditOwnNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableFamilySize>, FamilySizeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableFathersRightsViolationCase>, FathersRightsViolationCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<File>, FileInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableFirstAndBottomLevelSubdivision>, FirstAndBottomLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FirstAndSecondLevelSubdivisionToCreate>, FirstAndSecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableFirstLevelGlobalRegion>, FirstLevelGlobalRegionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FirstLevelSubdivisionToCreate>, FirstLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableFormalIntermediateLevelSubdivision>, FormalIntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<GeographicalEntityToCreate>, GeographicalEntityInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<GlobalRegionToCreate>, GlobalRegionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableHagueStatus>, HagueStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableHouseBill>, HouseBillInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableHouseTerm>, HouseTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableInformalIntermediateLevelSubdivision>, InformalIntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableInterCountryRelation>, InterCountryRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableInterCountryRelationType>, InterCountryRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<IntermediateLevelSubdivisionToCreate>, IntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableInterOrganizationalRelationForExistingParticipants>, InterOrganizationalRelationInserterForExistingParticipantsFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableInterOrganizationalRelationType>, InterOrganizationalRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableInterPersonalRelationForExistingParticipants>, InterPersonalRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableInterPersonalRelationType>, InterPersonalRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ISOCodedFirstLevelSubdivisionToCreate>, ISOCodedFirstLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ISOCodedSubdivisionToCreate>, ISOCodedSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<LocatableToCreate>, LocatableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableLocation>, LocationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<LocationLocatable>, LocationLocatableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableMemberOfCongressForExistingPerson>, MemberOfCongressInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<MenuItem>, MenuItemInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableMultiQuestionPoll>, MultiQuestionPollInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<MultiQuestionPollPollQuestion>, MultiQuestionPollPollQuestionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NameableToCreate>, NameableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NameableTypeToAdd>, NameableTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NodeFile>, NodeFileInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NodeToCreate>, NodeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ResolvedNodeTermToAdd>, NodeTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NodeTypeToAdd>, NodeTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableOrganization>, OrganizationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<OrganizationOrganizationType>, OrganizationOrganizationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableOrganizationType>, OrganizationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Owner>, OwnerInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiablePage>, PageInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PartyToCreate>, PartyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiablePartyPoliticalEntityRelationType>, PartyPoliticalEntityRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiablePartyPoliticalEntityRelationForExistingParty>, PartyPoliticalEntityRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiablePerson>, PersonInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiablePersonOrganizationRelationForExistingParticipants>, PersonOrganizationRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiablePersonOrganizationRelationType>, PersonOrganizationRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PoliticalEntityToCreate>, PoliticalEntityInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollToCreate>, PollInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollOption>, PollOptionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiablePollQuestion>, PollQuestionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollStatus>, PollStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollVote>, PollVoteInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Principal>, PrincipalInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableProfessionalRoleForExistingPerson>, ProfessionalRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableProfession>, ProfessionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Publisher>, PublisherInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PublicationStatus>, PublicationStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PublishingUserGroup>, PublishingUserGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableRepresentative>, RepresentativeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableRepresentativeHouseBillAction>, RepresentativeHouseBillActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableReview>, ReviewInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SearchableToCreate>, SearchableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableSecondLevelGlobalRegion>, SecondLevelGlobalRegionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SecondLevelSubdivisionToCreate>, SecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableSenateBill>, SenateBillInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableSenateTerm>, SenateTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableSenator>, SenatorInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableSenatorSenateBillAction>, SenatorSenateBillActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SimpleTextNodeToCreate>, SimpleTextNodeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableSingleQuestionPoll>, SingleQuestionPollInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SubdivisionToCreate>, SubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableSubdivisionType>, SubdivisionTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Subgroup>, SubgroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SystemGroup>, SystemGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TenantFile>, TenantFileInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Tenant>, TenantInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableTenantNodeForExistingNode>, TenantNodeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TenantNodeMenuItem>, TenantNodeMenuItemInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TermToCreateForExistingNameable>, TermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TermHierarchy>, TermHierarchyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TopLevelCountryToCreate>, TopLevelCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableTypeOfAbuse>, TypeOfAbuseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableTypeOfAbuser>, TypeOfAbuserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableUnitedStatesCongressionalMeeting>, UnitedStatesCongressionalMeetingInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableUnitedStatesPoliticalPartyAffliation>, UnitedStatesPoliticalPartyAffliationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableUnitedStatesPoliticalParty>, UnitedStatesPoliticalPartyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UserGroup>, UserGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UserGroupUserRoleUser>, UserGroupUserRoleUserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<User>, UserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UserRole>, UserRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ViewNodeTypeListAction>, ViewNodeTypeListActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<VocabularyToCreate>, VocabularyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableWrongfulMedicationCase>, WrongfulMedicationCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableWrongfulRemovalCase>, WrongfulRemovalCaseInserterFactory>();
    }
}
