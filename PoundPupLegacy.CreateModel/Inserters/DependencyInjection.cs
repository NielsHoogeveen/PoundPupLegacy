using Microsoft.Extensions.DependencyInjection;

namespace PoundPupLegacy.CreateModel.Inserters;

internal static class DependencyInjection
{
    internal static void AddCreateModelInserters(this IServiceCollection services)
    {
        services.AddTransient<IDatabaseInserterFactory<AbuseCase.ToCreate>, AbuseCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AbuseCaseTypeOfAbuse>, AbuseCaseTypeOfAbuseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AbuseCaseTypeOfAbuser>, AbuseCaseTypeOfAbuserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AccessRole>, AccessRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AccessRolePrivilege>, AccessRolePrivilegeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Act.ToCreate>, ActInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Action>, ActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ActionMenuItem>, ActionMenuItemInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AdministratorRole>, AdministratorRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AuthoringStatus>, AuthoringStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BasicAction>, BasicActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BasicCountry.ToCreate>, BasicCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BasicNameable.ToCreate>, BasicNameableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BasicSecondLevelSubdivision.ToCreate>, BasicSecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BillActionType.ToCreate>, BillActionTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BillToCreate>, BillInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BindingCountry.ToCreate>, BindingCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BlogPost.ToCreate>, BlogPostInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BottomLevelSubdivisionToCreate>, BottomLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BoundCountry.ToCreate>, BoundCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseExistingCasePartiesToCreate>, CaseCasePartiesInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseToCreate>, CaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseParties.ToCreate>, CasePartiesInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CasePartiesOrganization>, CasePartiesOrganizationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CasePartiesPerson>, CasePartiesPersonInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CasePartyType.ToCreate>, CasePartyTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseTypeCasePartyType>, CaseTypeCasePartyTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseType>, CaseTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ChildPlacementType.ToCreate>, ChildPlacementTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ChildTraffickingCase.ToCreate>, ChildTraffickingCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CoercedAdoptionCase.ToCreate>, CoercedAdoptionCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Collective>, CollectiveInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CollectiveUser>, CollectiveUserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Comment>, CommentInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CongressionalTermToCreate>, CongressionalTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CongressionalTermPoliticalPartyAffiliation.ToCreateForExistingTerm>, CongressionalTermPoliticalPartyAffiliationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ContentSharingGroup>, ContentSharingGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountryAndFirstAndBottomLevelSubdivision.ToCreate>, CountryAndFirstAndBottomLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountryAndFirstAndSecondLevelSubdivision.ToCreate>, CountryAndFirstAndSecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountryAndFirstLevelSubdivisionToCreate>, CountryAndFirstLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountryAndIntermediateLevelSubdivision.ToCreate>, CountryAndIntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountryToCreate>, CountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountrySubdivisionType>, CountrySubdivisionTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CreateNodeAction>, CreateNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<DeleteNodeAction>, DeleteNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Denomination.ToCreate>, DenominationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<DeportationCase.ToCreate>, DeportationCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Discussion.ToCreate>, DiscussionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<DisruptedPlacementCase.ToCreate>, DisruptedPlacementCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<DocumentableToCreate>, DocumentableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Document.ToCreate>, DocumentInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<DocumentType.ToCreate>, DocumentTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EditNodeAction>, EditNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EditOwnNodeAction>, EditOwnNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FamilySize.ToCreate>, FamilySizeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FathersRightsViolationCase.ToCreate>, FathersRightsViolationCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<File>, FileInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FirstAndBottomLevelSubdivision.ToCreate>, FirstAndBottomLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FirstAndSecondLevelSubdivisionToCreate>, FirstAndSecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FirstLevelGlobalRegion.ToCreate>, FirstLevelGlobalRegionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FirstLevelSubdivisionToCreate>, FirstLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FormalIntermediateLevelSubdivision.ToCreate>, FormalIntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<GeographicalEntityToCreate>, GeographicalEntityInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<GlobalRegionToCreate>, GlobalRegionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<HagueStatus.ToCreate>, HagueStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<HouseBill.ToCreate>, HouseBillInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<HouseTerm.ToCreate>, HouseTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<InformalIntermediateLevelSubdivision.ToCreate>, InformalIntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<InterCountryRelation.ToCreate>, InterCountryRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<InterCountryRelationType.ToCreate>, InterCountryRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<IntermediateLevelSubdivisionToCreate>, IntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<InterOrganizationalRelation.ToCreate.ForExistingParticipants>, InterOrganizationalRelationInserterForExistingParticipantsFactory>();
        services.AddTransient<IDatabaseInserterFactory<InterOrganizationalRelationType.ToCreate>, InterOrganizationalRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<InterPersonalRelation.ToCreate.ForExistingParticipants>, InterPersonalRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<InterPersonalRelationType.ToCreate>, InterPersonalRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ISOCodedFirstLevelSubdivisionToCreate>, ISOCodedFirstLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ISOCodedSubdivisionToCreate>, ISOCodedSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<LocatableToCreate>, LocatableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<LocationToCreate>, LocationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<LocationLocatable>, LocationLocatableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<MemberOfCongressToCreateForExistingPerson>, MemberOfCongressInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<MenuItem>, MenuItemInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<MultiQuestionPoll.ToCreate>, MultiQuestionPollInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<MultiQuestionPollPollQuestion>, MultiQuestionPollPollQuestionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NameableToCreate>, NameableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NameableTypeToAdd>, NameableTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NodeFile>, NodeFileInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NodeToCreate>, NodeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ResolvedNodeTermToAdd>, NodeTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NodeTypeToAdd>, NodeTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<OrganizationToCreate>, OrganizationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<OrganizationOrganizationType>, OrganizationOrganizationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<OrganizationType.ToCreate>, OrganizationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Owner>, OwnerInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Page.ToCreate>, PageInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PartyToCreate>, PartyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PartyPoliticalEntityRelationType.ToCreate>, PartyPoliticalEntityRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PartyPoliticalEntityRelation.ToCreate.ForExistingParty>, PartyPoliticalEntityRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Person.ToCreate>, PersonInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PersonOrganizationRelation.ToCreate.ForExistingParticipants>, PersonOrganizationRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PersonOrganizationRelationType.ToCreate>, PersonOrganizationRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PoliticalEntityToCreate>, PoliticalEntityInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollToCreate>, PollInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollOption>, PollOptionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollQuestionToCreate>, PollQuestionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollStatus>, PollStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollVote>, PollVoteInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Principal>, PrincipalInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ProfessionalRoleToCreateForExistingPerson>, ProfessionalRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Profession.ToCreate>, ProfessionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Publisher>, PublisherInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PublicationStatus>, PublicationStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PublishingUserGroup>, PublishingUserGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Representative.ToCreateForExistingPerson>, RepresentativeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<RepresentativeHouseBillAction>, RepresentativeHouseBillActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Review.ToCreate>, ReviewInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SearchableToCreate>, SearchableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SecondLevelGlobalRegion.ToCreate>, SecondLevelGlobalRegionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SecondLevelSubdivisionToCreate>, SecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SenateBill.ToCreate>, SenateBillInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SenateTerm.ToCreate>, SenateTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Senator.ToCreateForExistingPerson>, SenatorInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SenatorSenateBillAction>, SenatorSenateBillActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SimpleTextNodeToCreate>, SimpleTextNodeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SingleQuestionPoll.ToCreate>, SingleQuestionPollInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SubdivisionToCreate>, SubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SubdivisionType.ToCreate>, SubdivisionTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Subgroup>, SubgroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SystemGroup>, SystemGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TenantFile>, TenantFileInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Tenant>, TenantInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TenantNode.ToCreateForExistingNode>, TenantNodeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TenantNodeMenuItem>, TenantNodeMenuItemInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TermToCreateForExistingNameable>, TermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TermHierarchy>, TermHierarchyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TopLevelCountryToCreate>, TopLevelCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TypeOfAbuse.ToCreate>, TypeOfAbuseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TypeOfAbuser.ToCreate>, TypeOfAbuserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UnitedStatesCongressionalMeeting.ToCreate>, UnitedStatesCongressionalMeetingInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UnitedStatesPoliticalPartyAffiliation.ToCreate>, UnitedStatesPoliticalPartyAffliationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UnitedStatesPoliticalParty.ToCreate>, UnitedStatesPoliticalPartyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UserGroup>, UserGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UserGroupUserRoleUser>, UserGroupUserRoleUserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<User>, UserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UserRole>, UserRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ViewNodeTypeListAction>, ViewNodeTypeListActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Vocabulary.ToCreate>, VocabularyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<WrongfulMedicationCase.ToCreate>, WrongfulMedicationCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<WrongfulRemovalCase.ToCreate>, WrongfulRemovalCaseInserterFactory>();
    }
}
