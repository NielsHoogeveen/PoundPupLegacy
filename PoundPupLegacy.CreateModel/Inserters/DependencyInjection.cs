using Microsoft.Extensions.DependencyInjection;

namespace PoundPupLegacy.CreateModel.Inserters;

internal static class DependencyInjection
{
    internal static void AddCreateModelInserters(this IServiceCollection services)
    {
        services.AddTransient<IDatabaseInserterFactory<AbuseCase>, AbuseCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AbuseCaseTypeOfAbuse>, AbuseCaseTypeOfAbuseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AbuseCaseTypeOfAbuser>, AbuseCaseTypeOfAbuserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AccessRole>, AccessRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AccessRolePrivilege>, AccessRolePrivilegeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Act>, ActInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Action>, ActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ActionMenuItem>, ActionMenuItemInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AdministratorRole>, AdministratorRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Article>, ArticleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BasicAction>, BasicActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BasicCountry>, BasicCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BasicNameable>, BasicNameableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BasicSecondLevelSubdivision>, BasicSecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BillActionType>, BillActionTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Bill>, BillInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BindingCountry>, BindingCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BlogPost>, BlogPostInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BottomLevelSubdivision>, BottomLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BoundCountry>, BoundCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseCaseParties>, CaseCasePartiesInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Case>, CaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseParties>, CasePartiesInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CasePartiesOrganization>, CasePartiesOrganizationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CasePartiesPerson>, CasePartiesPersonInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CasePartyType>, CasePartyTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseTypeCasePartyType>, CaseTypeCasePartyTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseType>, CaseTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ChildPlacementType>, ChildPlacementTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ChildTraffickingCase>, ChildTraffickingCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CoercedAdoptionCase>, CoercedAdoptionCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Collective>, CollectiveInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CollectiveUser>, CollectiveUserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Comment>, CommentInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CongressionalTerm>, CongressionalTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CongressionalTermPoliticalPartyAffiliation>, CongressionalTermPoliticalPartyAffiliationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ContentSharingGroup>, ContentSharingGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountryAndFirstAndBottomLevelSubdivision>, CountryAndFirstAndBottomLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountryAndFirstAndSecondLevelSubdivision>, CountryAndFirstAndSecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountryAndFirstLevelSubdivision>, CountryAndFirstLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountryAndIntermediateLevelSubdivision>, CountryAndIntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Country>, CountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountrySubdivisionType>, CountrySubdivisionTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CreateNodeAction>, CreateNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<DeleteNodeAction>, DeleteNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Denomination>, DenominationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<DeportationCase>, DeportationCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Discussion>, DiscussionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<DisruptedPlacementCase>, DisruptedPlacementCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Documentable>, DocumentableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Document>, DocumentInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<DocumentType>, DocumentTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EditNodeAction>, EditNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EditOwnNodeAction>, EditOwnNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FamilySize>, FamilySizeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FathersRightsViolationCase>, FathersRightsViolationCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<File>, FileInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FirstAndBottomLevelSubdivision>, FirstAndBottomLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FirstAndSecondLevelSubdivision>, FirstAndSecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FirstLevelGlobalRegion>, FirstLevelGlobalRegionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FirstLevelSubdivision>, FirstLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<FormalIntermediateLevelSubdivision>, FormalIntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<GeographicalEntity>, GeographicalEntityInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<GlobalRegion>, GlobalRegionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<HagueStatus>, HagueStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<HouseBill>, HouseBillInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<HouseTerm>, HouseTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<InformalIntermediateLevelSubdivision>, InformalIntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<InterCountryRelation>, InterCountryRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<InterCountryRelationType>, InterCountryRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<IntermediateLevelSubdivision>, IntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<InterOrganizationalRelation>, InterOrganizationalRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<InterOrganizationalRelationType>, InterOrganizationalRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<InterPersonalRelation>, InterPersonalRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<InterPersonalRelationType>, InterPersonalRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ISOCodedFirstLevelSubdivision>, ISOCodedFirstLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ISOCodedSubdivision>, ISOCodedSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Locatable>, LocatableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Location>, LocationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<LocationLocatable>, LocationLocatableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<MemberOfCongress>, MemberOfCongressInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<MenuItem>, MenuItemInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<MultiQuestionPoll>, MultiQuestionPollInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<MultiQuestionPollPollQuestion>, MultiQuestionPollPollQuestionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Nameable>, NameableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NameableType>, NameableTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NodeFile>, NodeFileInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Node>, NodeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NodeTerm>, NodeTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NodeType>, NodeTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Organization>, OrganizationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<OrganizationOrganizationType>, OrganizationOrganizationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<OrganizationType>, OrganizationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Owner>, OwnerInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Page>, PageInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Party>, PartyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PartyPoliticalEntityRelationType>, PartyPoliticalEntityRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PartyPoliticalEntityRelation>, PartyPoliticalEntityRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Person>, PersonInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PersonOrganizationRelation>, PersonOrganizationRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PersonOrganizationRelationType>, PersonOrganizationRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PoliticalEntity>, PoliticalEntityInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Poll>, PollInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollOption>, PollOptionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollQuestion>, PollQuestionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollStatus>, PollStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollVote>, PollVoteInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Principal>, PrincipalInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ProfessionalRole>, ProfessionalRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Profession>, ProfessionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Publisher>, PublisherInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PublicationStatus>, PublicationStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PublishingUserGroup>, PublishingUserGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Representative>, RepresentativeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<RepresentativeHouseBillAction>, RepresentativeHouseBillActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Review>, ReviewInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Searchable>, SearchableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SecondLevelGlobalRegion>, SecondLevelGlobalRegionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SecondLevelSubdivision>, SecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SenateBill>, SenateBillInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SenateTerm>, SenateTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Senator>, SenatorInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SenatorSenateBillAction>, SenatorSenateBillActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SimpleTextNode>, SimpleTextNodeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SingleQuestionPoll>, SingleQuestionPollInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Subdivision>, SubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SubdivisionType>, SubdivisionTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Subgroup>, SubgroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SystemGroup>, SystemGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TenantFile>, TenantFileInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Tenant>, TenantInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TenantNode>, TenantNodeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TenantNodeMenuItem>, TenantNodeMenuItemInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Term>, TermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TermHierarchy>, TermHierarchyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TopLevelCountry>, TopLevelCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TypeOfAbuse>, TypeOfAbuseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TypeOfAbuser>, TypeOfAbuserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UnitedStatesCongressionalMeeting>, UnitedStatesCongressionalMeetingInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UnitedStatesPoliticalPartyAffliation>, UnitedStatesPoliticalPartyAffliationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UnitedStatesPoliticalParty>, UnitedStatesPoliticalPartyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UserGroup>, UserGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UserGroupUserRoleUser>, UserGroupUserRoleUserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<User>, UserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UserRole>, UserRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ViewNodeTypeListAction>, ViewNodeTypeListActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Vocabulary>, VocabularyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<WrongfulMedicationCase>, WrongfulMedicationCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<WrongfulRemovalCase>, WrongfulRemovalCaseInserterFactory>();
    }
}
