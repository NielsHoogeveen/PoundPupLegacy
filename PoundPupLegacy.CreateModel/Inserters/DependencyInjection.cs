using Microsoft.Extensions.DependencyInjection;

namespace PoundPupLegacy.CreateModel.Inserters;

internal static class DependencyInjection
{
    internal static void AddCreateModelInserters(this IServiceCollection services)
    {
        services.AddTransient<IDatabaseInserterFactory<NewAbuseCase>, AbuseCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AbuseCaseTypeOfAbuse>, AbuseCaseTypeOfAbuseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AbuseCaseTypeOfAbuser>, AbuseCaseTypeOfAbuserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AccessRole>, AccessRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AccessRolePrivilege>, AccessRolePrivilegeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewAct>, ActInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Action>, ActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ActionMenuItem>, ActionMenuItemInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AdministratorRole>, AdministratorRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<AuthoringStatus>, AuthoringStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<BasicAction>, BasicActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewBasicCountry>, BasicCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewBasicNameable>, BasicNameableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewBasicSecondLevelSubdivision>, BasicSecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewBillActionType>, BillActionTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableBill>, BillInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewBindingCountry>, BindingCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewBlogPost>, BlogPostInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableBottomLevelSubdivision>, BottomLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewBoundCountry>, BoundCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseCaseParties>, CaseCasePartiesInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableCase>, CaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseParties>, CasePartiesInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CasePartiesOrganization>, CasePartiesOrganizationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CasePartiesPerson>, CasePartiesPersonInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewCasePartyType>, CasePartyTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseTypeCasePartyType>, CaseTypeCasePartyTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CaseType>, CaseTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewChildPlacementType>, ChildPlacementTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewChildTraffickingCase>, ChildTraffickingCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewCoercedAdoptionCase>, CoercedAdoptionCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Collective>, CollectiveInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CollectiveUser>, CollectiveUserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Comment>, CommentInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableCongressionalTerm>, CongressionalTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewCongressionalTermPoliticalPartyAffiliation>, CongressionalTermPoliticalPartyAffiliationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ContentSharingGroup>, ContentSharingGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewCountryAndFirstAndBottomLevelSubdivision>, CountryAndFirstAndBottomLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewCountryAndFirstAndSecondLevelSubdivision>, CountryAndFirstAndSecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableCountryAndFirstLevelSubdivision>, CountryAndFirstLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewCountryAndIntermediateLevelSubdivision>, CountryAndIntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableCountry>, CountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CountrySubdivisionType>, CountrySubdivisionTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<CreateNodeAction>, CreateNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<DeleteNodeAction>, DeleteNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewDenomination>, DenominationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewDeportationCase>, DeportationCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewDiscussion>, DiscussionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewDisruptedPlacementCase>, DisruptedPlacementCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableDocumentable>, DocumentableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewDocument>, DocumentInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewDocumentType>, DocumentTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EditNodeAction>, EditNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EditOwnNodeAction>, EditOwnNodeActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewFamilySize>, FamilySizeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewFathersRightsViolationCase>, FathersRightsViolationCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<File>, FileInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewFirstAndBottomLevelSubdivision>, FirstAndBottomLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableFirstAndSecondLevelSubdivision>, FirstAndSecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewFirstLevelGlobalRegion>, FirstLevelGlobalRegionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableFirstLevelSubdivision>, FirstLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewFormalIntermediateLevelSubdivision>, FormalIntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableGeographicalEntity>, GeographicalEntityInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableGlobalRegion>, GlobalRegionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewHagueStatus>, HagueStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewHouseBill>, HouseBillInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewHouseTerm>, HouseTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewInformalIntermediateLevelSubdivision>, InformalIntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewInterCountryRelation>, InterCountryRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewInterCountryRelationType>, InterCountryRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableIntermediateLevelSubdivision>, IntermediateLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewInterOrganizationalRelation>, InterOrganizationalRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewInterOrganizationalRelationType>, InterOrganizationalRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewInterPersonalRelation>, InterPersonalRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewInterPersonalRelationType>, InterPersonalRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableISOCodedFirstLevelSubdivision>, ISOCodedFirstLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableISOCodedSubdivision>, ISOCodedSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableLocatable>, LocatableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Location>, LocationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<LocationLocatable>, LocationLocatableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<IdentifiableMemberOfCongress>, MemberOfCongressInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<MenuItem>, MenuItemInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewMultiQuestionPoll>, MultiQuestionPollInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<MultiQuestionPollPollQuestion>, MultiQuestionPollPollQuestionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableNameable>, NameableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<IdentifiableNameableType>, NameableTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NodeFile>, NodeFileInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableNode>, NodeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NodeTerm>, NodeTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableNodeType>, NodeTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableOrganization>, OrganizationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<OrganizationOrganizationType>, OrganizationOrganizationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewOrganizationType>, OrganizationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Owner>, OwnerInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewPage>, PageInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableParty>, PartyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewPartyPoliticalEntityRelationType>, PartyPoliticalEntityRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewPartyPoliticalEntityRelation>, PartyPoliticalEntityRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewPerson>, PersonInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewPersonOrganizationRelation>, PersonOrganizationRelationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewPersonOrganizationRelationType>, PersonOrganizationRelationTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiablePoliticalEntity>, PoliticalEntityInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiablePoll>, PollInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollOption>, PollOptionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiablePollQuestion>, PollQuestionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollStatus>, PollStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PollVote>, PollVoteInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Principal>, PrincipalInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<IdentifiableProfessionalRole>, ProfessionalRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewProfession>, ProfessionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Publisher>, PublisherInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PublicationStatus>, PublicationStatusInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<PublishingUserGroup>, PublishingUserGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Representative>, RepresentativeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewRepresentativeHouseBillAction>, RepresentativeHouseBillActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewReview>, ReviewInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableSearchable>, SearchableInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewSecondLevelGlobalRegion>, SecondLevelGlobalRegionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableSecondLevelSubdivision>, SecondLevelSubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewSenateBill>, SenateBillInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewSenateTerm>, SenateTermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Senator>, SenatorInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewSenatorSenateBillAction>, SenatorSenateBillActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableSimpleTextNode>, SimpleTextNodeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewSingleQuestionPoll>, SingleQuestionPollInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableSubdivision>, SubdivisionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewSubdivisionType>, SubdivisionTypeInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Subgroup>, SubgroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<SystemGroup>, SystemGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TenantFile>, TenantFileInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Tenant>, TenantInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewTenantNodeForNewNode>, TenantNodeInserterForNewNodeFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewTenantNodeForExistingNode>, TenantNodeInserterForExistingNodeFactory>();
        services.AddTransient<IDatabaseInserterFactory<TenantNodeMenuItem>, TenantNodeMenuItemInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<Term>, TermInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<TermHierarchy>, TermHierarchyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<EventuallyIdentifiableTopLevelCountry>, TopLevelCountryInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewTypeOfAbuse>, TypeOfAbuseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewTypeOfAbuser>, TypeOfAbuserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewUnitedStatesCongressionalMeeting>, UnitedStatesCongressionalMeetingInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewUnitedStatesPoliticalPartyAffliation>, UnitedStatesPoliticalPartyAffliationInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewUnitedStatesPoliticalParty>, UnitedStatesPoliticalPartyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UserGroup>, UserGroupInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UserGroupUserRoleUser>, UserGroupUserRoleUserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<User>, UserInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<UserRole>, UserRoleInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<ViewNodeTypeListAction>, ViewNodeTypeListActionInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewVocabulary>, VocabularyInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewWrongfulMedicationCase>, WrongfulMedicationCaseInserterFactory>();
        services.AddTransient<IDatabaseInserterFactory<NewWrongfulRemovalCase>, WrongfulRemovalCaseInserterFactory>();
    }
}
