-- Table: public.node_access

-- DROP TABLE IF EXISTS public.node_access;

CREATE TABLE IF NOT EXISTS public.node_access
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    user_id integer NOT NULL,
    tenant_id integer NOT NULL,
    node_id integer NOT NULL,
    date_time timestamp with time zone NOT NULL,
    CONSTRAINT node_access_pkey PRIMARY KEY (id),
    CONSTRAINT fk_node_access_node FOREIGN KEY (node_id)
        REFERENCES public.node (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID,
    CONSTRAINT fk_node_access_tenant FOREIGN KEY (tenant_id)
        REFERENCES public.tenant (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID,
    CONSTRAINT fk_node_access_user FOREIGN KEY (user_id)
        REFERENCES public."user" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.node_access
    OWNER to niels;
-- Index: fki_fk_node_access_node

-- DROP INDEX IF EXISTS public.fki_fk_node_access_node;

CREATE INDEX IF NOT EXISTS fki_fk_node_access_node
    ON public.node_access USING btree
    (node_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: fki_fk_node_access_tenant

-- DROP INDEX IF EXISTS public.fki_fk_node_access_tenant;

CREATE INDEX IF NOT EXISTS fki_fk_node_access_tenant
    ON public.node_access USING btree
    (tenant_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: fki_fk_node_access_user

-- DROP INDEX IF EXISTS public.fki_fk_node_access_user;

CREATE INDEX IF NOT EXISTS fki_fk_node_access_user
    ON public.node_access USING btree
    (user_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_node_access_timestamp_desc

-- DROP INDEX IF EXISTS public.idx_node_access_timestamp_desc;

CREATE INDEX IF NOT EXISTS idx_node_access_timestamp_desc
    ON public.node_access USING btree
    (date_time DESC NULLS FIRST)
    TABLESPACE pg_default;

CREATE TABLE IF NOT EXISTS public.named_action
(
    id integer NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT named_action_pkey PRIMARY KEY (id),
    CONSTRAINT unique_named_action_name UNIQUE (name)
        INCLUDE(id),
    CONSTRAINT fk_named_action_action FOREIGN KEY (id)
        REFERENCES public.action (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.named_action
    OWNER to niels;
-- Index: fki_fk_named_action_action

-- DROP INDEX IF EXISTS public.fki_fk_named_action_action;

CREATE INDEX IF NOT EXISTS fki_fk_named_action_action
    ON public.named_action USING btree
    (id ASC NULLS LAST)
    TABLESPACE pg_default;

insert into action default values;
insert into named_action(id, name) values(lastval(), 'nodeaccess');