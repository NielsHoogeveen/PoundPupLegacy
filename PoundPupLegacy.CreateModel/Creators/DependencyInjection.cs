using Microsoft.Extensions.DependencyInjection;

namespace PoundPupLegacy.CreateModel.Creators;

internal static class DependencyInjection
{
    internal static void AddCreateModelCreators(this IServiceCollection services)
    {
        services.AddCreateModelInserters();
        services.AddTransient<NodeDetailsCreatorFactory>();
        services.AddTransient<TermCreatorFactory>();
        services.AddTransient<LocatableDetailsCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<AbuseCase.AbuseCaseToCreate>, AbuseCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<AbuseCaseTypeOfAbuse>, AbuseCaseTypeOfAbuseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<AbuseCaseTypeOfAbuser>, AbuseCaseTypeOfAbuserCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<AccessRole>, AccessRoleCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<AccessRolePrivilege>, AccessRolePrivilegeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<ActToCreate>, ActCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<ActionMenuItem>, ActionMenuItemCreatorFactory>();
        services.AddTransient<IAnonimousUserCreator, AnonimousUserCreator>();
        services.AddTransient<IEntityCreatorFactory<AuthoringStatus>, AuthoringStatusCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BasicAction>, BasicActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BasicCountry.BasicCountryToCreate>, BasicCountryCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BasicNameable.BasicNameableToCreate>, BasicNameableCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BasicNameableType>, BasicNameableTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BasicSecondLevelSubdivision.BasicSecondLevelSubdivisionToCreate>, BasicSecondLevelSubdivisionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BillActionType.BillActionTypeToCreate>, BillActionTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BindingCountry.BindingCountryToCreate>, BindingCountryCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BlogPost.BlogPostToCreate>, BlogPostCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BoundCountry.BoundCountryToCreate>, BoundCountryCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CaseExistingCasePartiesToCreate>, CaseCasePartiesCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CasePartyType.CasePartyTypeToCreate>, CasePartyTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CaseType>, CaseTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CasePartyType.CasePartyTypeToCreate>, CasePartyTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<ChildPlacementType.ChildPlacementTypeToCreate>, ChildPlacementTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<ChildTraffickingCase.ChildTraffickingCaseToCreate>, ChildTraffickingCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CoercedAdoptionCase.CoercedAdoptionCaseToCreate>, CoercedAdoptionCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Collective>, CollectiveCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CollectiveUser>, CollectiveUserCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Comment>, CommentCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CongressionalTermPoliticalPartyAffiliation.CongressionalTermPoliticalPartyAffiliationToCreate>, CongressionalTermPoliticalPartyAffiliationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<ContentSharingGroup>, ContentSharingGroupCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CountryAndFirstAndBottomLevelSubdivision.CountryAndFirstAndBottomLevelSubdivisionToCreate>, CountryAndFirstAndBottomLevelSubdivisionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CountryAndFirstAndSecondLevelSubdivision.CountryAndFirstAndSecondLevelSubdivisionToCreate>, CountryAndFirstAndSecondLevelSubdivisionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CountryAndIntermediateLevelSubdivision.CountryAndIntermediateLevelSubdivisionToCreate>, CountryAndIntermediateLevelSubdivisionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CountrySubdivisionType>, CountrySubdivisionTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CreateNodeAction>, CreateNodeActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<DeleteNodeAction>, DeleteNodeActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Denomination.DenominationToCreate>, DenominationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<DeportationCase.DeportationCaseToCreate>, DeportationCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Discussion.DiscussionToCreate>, DiscussionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<DisruptedPlacementCase.DisruptedPlacementCaseToCreate>, DisruptedPlacementCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Document.DocumentToCreate>, DocumentCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<DocumentType.DocumentTypeToCreate>, DocumentTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<EditNodeAction>, EditNodeActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<EditOwnNodeAction>, EditOwnNodeActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<FamilySize.FamilySizeToCreate>, FamilySizeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<FathersRightsViolationCase.FathersRightsViolationCaseToCreate>, FathersRightsViolationCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<File>, FileCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<FirstAndBottomLevelSubdivision.FirstAndBottomLevelSubdivisionToCreate>, FirstAndBottomLevelSubdivisionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<FirstLevelGlobalRegion.FirstLevelGlobalRegionToCreate>, FirstLevelGlobalRegionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<FormalIntermediateLevelSubdivision.FormalIntermediateLevelSubdivisionToCreate>, FormalIntermediateLevelSubdivisionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<HagueStatus.HagueStatusToCreate>, HagueStatusCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<HouseBill.HouseBillToCreate>, HouseBillCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<HouseTerm.HouseTermToCreate>, HouseTermCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<InformalIntermediateLevelSubdivision.InformalIntermediateLevelSubdivisionToCreate>, InformalIntermediateLevelSubdivisionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<InterCountryRelation.InterCountryRelationToCreate>, InterCountryRelationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<InterCountryRelationType.InterCountryRelationTypeToCreate>, InterCountryRelationTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<InterOrganizationalRelation.InterOrganizationalRelationToCreateForExistingParticipants>, InterOrganizationalRelationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<InterOrganizationalRelationType.InterOrganizationalRelationTypeToCreate>, InterOrganizationalRelationTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<InterPersonalRelation.InterPersonalRelationToCreateForExistingParticipants>, InterPersonalRelationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<InterPersonalRelationType.InterPersonalRelationTypeToCreate>, InterPersonalRelationTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<LocationToCreate>, LocationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<LocationLocatable>, LocationLocatableCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<MultiQuestionPoll.MultiQuestionPollToCreate>, MultiQuestionPollCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<NodeFile>, NodeFileCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<ResolvedNodeTermToAdd>, NodeTermCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BasicNodeType>, NodeTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<OrganizationToCreate>, OrganizationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<OrganizationType.OrganizationTypeToCreate>, OrganizationTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Page.PageToCreate>, PageCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<PartyPoliticalEntityRelation.PartyPoliticalEntityRelationToCreateForExistingParty>, PartyPoliticalEntityRelationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<PartyPoliticalEntityRelationType.PartyPoliticalEntityRelationTypeToCreate>, PartyPoliticalEntityRelationTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Person.PersonToCreate>, PersonCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<PersonOrganizationRelation.PersonOrganizationRelationToCreateForExistingParticipants>, PersonOrganizationRelationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<PersonOrganizationRelationType.PersonOrganizationRelationTypeToCreate>, PersonOrganizationRelationTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<PollStatus>, PollStatusCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<ProfessionalRole>, ProfessionalRoleCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Profession>, ProfessionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<PublicationStatus>, PublicationStatusCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<PollQuestion>, PollQuestionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<RepresentativeHouseBillAction>, RepresentativeHouseBillActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SecondLevelGlobalRegion.SecondLevelGlobalRegionToCreate>, SecondLevelGlobalRegionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SenateBill.SenateBillToCreate>, SenateBillCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SenateTerm.SenateTermToCreate>, SenateTermCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SenatorSenateBillAction>, SenatorSenateBillActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SingleQuestionPoll.SingleQuestionPollToCreate>, SingleQuestionPollCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SubdivisionType.SubdivisionTypeToCreate>, SubdivisionTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Subgroup>, SubgroupCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SystemGroup>, SystemGroupCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Tenant>, TenantCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<TenantNodeMenuItem>, TenantNodeMenuItemCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<TermHierarchy>, TermHierarchyCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<TypeOfAbuse.TypeOfAbuseToCreate>, TypeOfAbuseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<TypeOfAbuser.TypeOfAbuserToCreate>, TypeOfAbuserCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<UnitedStatesCongressionalMeeting.UnitedStatesCongressionalMeetingToCreate>, UnitedStatesCongressionalMeetingCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<UnitedStatesPoliticalPartyAffiliation.UnitedStatesPoliticalPartyAffiliationToCreate>, UnitedStatesPoliticalPartyAffliationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<User>, UserCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<UserGroupUserRoleUser>, UserGroupUserRoleUserCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Vocabulary.VocabularyToCreate>, VocabularyCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<ViewNodeTypeListAction>, ViewNodeTypeListActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<WrongfulMedicationCase.WrongfulMedicationCaseToCreate>, WrongfulMedicationCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<WrongfulRemovalCase.WrongfulRemovalCaseToCreate>, WrongfulRemovalCaseCreatorFactory>();
    }
}
