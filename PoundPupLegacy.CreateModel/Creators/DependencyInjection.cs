using Microsoft.Extensions.DependencyInjection;

namespace PoundPupLegacy.CreateModel.Creators;

internal static class DependencyInjection
{
    internal static void AddCreateModelCreators(this IServiceCollection services)
    {
        services.AddCreateModelInserters();
        services.AddTransient<NodeDetailsCreatorFactory>();
        services.AddTransient<TermCreatorFactory>();
        services.AddTransient<LocatableDetailsCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<AbuseCase.ToCreate>, AbuseCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<AbuseCaseTypeOfAbuse>, AbuseCaseTypeOfAbuseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<AbuseCaseTypeOfAbuser>, AbuseCaseTypeOfAbuserCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<AccessRole>, AccessRoleCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<AccessRolePrivilege>, AccessRolePrivilegeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Act.ToCreate>, ActCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<ActionMenuItem>, ActionMenuItemCreatorFactory>();
        services.AddTransient<IAnonimousUserCreator, AnonimousUserCreator>();
        services.AddTransient<IEntityCreatorFactory<AuthoringStatus>, AuthoringStatusCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BasicAction>, BasicActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BasicCountry.ToCreate>, BasicCountryCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BasicNameable.ToCreate>, BasicNameableCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BasicNameableType>, BasicNameableTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BasicSecondLevelSubdivision.ToCreate>, BasicSecondLevelSubdivisionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BillActionType.ToCreate>, BillActionTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BindingCountry.ToCreate>, BindingCountryCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BlogPost.ToCreate>, BlogPostCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BoundCountry.ToCreate>, BoundCountryCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CaseCaseParties.ToCreate.ForExistingCase>, CaseCasePartiesCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CasePartyType.ToCreate>, CasePartyTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CaseType>, CaseTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CasePartyType.ToCreate>, CasePartyTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<ChildPlacementType.ToCreate>, ChildPlacementTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<ChildTraffickingCase.ToCreate>, ChildTraffickingCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CoercedAdoptionCase.ToCreate>, CoercedAdoptionCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Collective>, CollectiveCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CollectiveUser>, CollectiveUserCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Comment>, CommentCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CongressionalTermPoliticalPartyAffiliation.ToCreateForExistingTerm>, CongressionalTermPoliticalPartyAffiliationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<ContentSharingGroup>, ContentSharingGroupCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CountryAndFirstAndBottomLevelSubdivision.ToCreate>, CountryAndFirstAndBottomLevelSubdivisionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CountryAndFirstAndSecondLevelSubdivision.ToCreate>, CountryAndFirstAndSecondLevelSubdivisionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CountryAndIntermediateLevelSubdivision.ToCreate>, CountryAndIntermediateLevelSubdivisionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CountrySubdivisionType>, CountrySubdivisionTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CreateNodeAction>, CreateNodeActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<DeleteNodeAction>, DeleteNodeActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Denomination.ToCreate>, DenominationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<DeportationCase.ToCreate>, DeportationCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Discussion.ToCreate>, DiscussionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<DisruptedPlacementCase.ToCreate>, DisruptedPlacementCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Document.ToCreate>, DocumentCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<DocumentType.ToCreate>, DocumentTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<EditNodeAction>, EditNodeActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<EditOwnNodeAction>, EditOwnNodeActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<FamilySize.ToCreate>, FamilySizeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<FathersRightsViolationCase.ToCreate>, FathersRightsViolationCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<File>, FileCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<FirstAndBottomLevelSubdivision.ToCreate>, FirstAndBottomLevelSubdivisionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<FirstLevelGlobalRegion.ToCreate>, FirstLevelGlobalRegionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<FormalIntermediateLevelSubdivision.ToCreate>, FormalIntermediateLevelSubdivisionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<HagueStatus.ToCreate>, HagueStatusCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<HouseBill.ToCreate>, HouseBillCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<HouseTerm.ToCreate>, HouseTermCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<InformalIntermediateLevelSubdivision.ToCreate>, InformalIntermediateLevelSubdivisionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<InterCountryRelation.ToCreate>, InterCountryRelationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<InterCountryRelationType.ToCreate>, InterCountryRelationTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<InterOrganizationalRelation.ToCreate.ForExistingParticipants>, InterOrganizationalRelationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<InterOrganizationalRelationType.ToCreate>, InterOrganizationalRelationTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<InterPersonalRelation.ToCreate.ForExistingParticipants>, InterPersonalRelationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<InterPersonalRelationType.ToCreate>, InterPersonalRelationTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<LocationToCreate>, LocationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<LocationLocatable>, LocationLocatableCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<MultiQuestionPoll.ToCreate>, MultiQuestionPollCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<NodeFile>, NodeFileCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<ResolvedNodeTermToAdd>, NodeTermCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BasicNodeType>, NodeTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<OrganizationToCreate>, OrganizationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<OrganizationType.ToCreate>, OrganizationTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Page.ToCreate>, PageCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<PartyPoliticalEntityRelation.ToCreate.ForExistingParty>, PartyPoliticalEntityRelationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<PartyPoliticalEntityRelationType.ToCreate>, PartyPoliticalEntityRelationTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Person.ToCreate>, PersonCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<PersonOrganizationRelation.ToCreate.ForExistingParticipants>, PersonOrganizationRelationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<PersonOrganizationRelationType.ToCreate>, PersonOrganizationRelationTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<PollStatus>, PollStatusCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<BasicProfessionalRole.ToCreateForExistingPerson>, ProfessionalRoleCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Profession.ToCreate>, ProfessionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<PublicationStatus>, PublicationStatusCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<PollQuestionToCreate>, PollQuestionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Representative.ToCreateForExistingPerson>, RepresentativeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<RepresentativeHouseBillAction>, RepresentativeHouseBillActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SecondLevelGlobalRegion.ToCreate>, SecondLevelGlobalRegionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SenateBill.ToCreate>, SenateBillCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SenateTerm.ToCreate>, SenateTermCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SenatorSenateBillAction>, SenatorSenateBillActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SingleQuestionPoll.ToCreate>, SingleQuestionPollCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SubdivisionType.ToCreate>, SubdivisionTypeCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Senator.ToCreateForExistingPerson>, SenatorCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Subgroup>, SubgroupCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SystemGroup>, SystemGroupCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Tenant>, TenantCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<TenantNodeMenuItem>, TenantNodeMenuItemCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<TermHierarchy>, TermHierarchyCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<TypeOfAbuse.ToCreate>, TypeOfAbuseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<TypeOfAbuser.ToCreate>, TypeOfAbuserCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<UnitedStatesCongressionalMeeting.ToCreate>, UnitedStatesCongressionalMeetingCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<UnitedStatesPoliticalPartyAffiliation.ToCreate>, UnitedStatesPoliticalPartyAffliationCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<User>, UserCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<UserGroupUserRoleUser>, UserGroupUserRoleUserCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<Vocabulary.ToCreate>, VocabularyCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<ViewNodeTypeListAction>, ViewNodeTypeListActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<WrongfulMedicationCase.ToCreate>, WrongfulMedicationCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<WrongfulRemovalCase.ToCreate>, WrongfulRemovalCaseCreatorFactory>();
    }
}
