using Microsoft.Extensions.DependencyInjection;

namespace PoundPupLegacy.CreateModel.Creators;

internal static class DependencyInjection
{
    internal static void AddCreateModelCreators(this IServiceCollection services)
    {
        services.AddCreateModelInserters();
        services.AddTransient<NameableDetailsCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableAbuseCase>, AbuseCaseCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<AbuseCaseTypeOfAbuse>, AbuseCaseTypeOfAbuseCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<AbuseCaseTypeOfAbuser>, AbuseCaseTypeOfAbuserCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<AccessRole>, AccessRoleCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<AccessRolePrivilege>, AccessRolePrivilegeCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableAct>, ActCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<ActionMenuItem>, ActionMenuItemCreatorFactory>();
        services.AddTransient<IAnonimousUserCreator, AnonimousUserCreator>();
        services.AddTransient<IInsertingEntityCreatorFactory<AuthoringStatus>, AuthoringStatusCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<BasicAction>, BasicActionCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableBasicCountry>, BasicCountryCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableBasicNameable>, BasicNameableCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<BasicNameableType>, BasicNameableTypeCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableBasicSecondLevelSubdivision>, BasicSecondLevelSubdivisionCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableBillActionType>, BillActionTypeCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableBindingCountry>, BindingCountryCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiableBlogPost>, BlogPostCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableBoundCountry>, BoundCountryCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<CaseCaseParties>, CaseCasePartiesCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableCasePartyType>, CasePartyTypeCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<CaseType>, CaseTypeCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableCasePartyType>, CasePartyTypeCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableChildPlacementType>, ChildPlacementTypeCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableChildTraffickingCase>, ChildTraffickingCaseCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableCoercedAdoptionCase>, CoercedAdoptionCaseCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<Collective>, CollectiveCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<CollectiveUser>, CollectiveUserCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<Comment>, CommentCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiableCongressionalTermPoliticalPartyAffiliation>, CongressionalTermPoliticalPartyAffiliationCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<ContentSharingGroup>, ContentSharingGroupCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableCountryAndFirstAndBottomLevelSubdivision>, CountryAndFirstAndBottomLevelSubdivisionCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableCountryAndFirstAndSecondLevelSubdivision>, CountryAndFirstAndSecondLevelSubdivisionCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableCountryAndIntermediateLevelSubdivision>, CountryAndIntermediateLevelSubdivisionCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<CountrySubdivisionType>, CountrySubdivisionTypeCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<CreateNodeAction>, CreateNodeActionCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<DeleteNodeAction>, DeleteNodeActionCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableDenomination>, DenominationCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableDeportationCase>, DeportationCaseCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiableDiscussion>, DiscussionCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableDisruptedPlacementCase>, DisruptedPlacementCaseCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<DocumentableDocument>, DocumentableDocumentCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiableDocument>, DocumentCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableDocumentType>, DocumentTypeCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<EditNodeAction>, EditNodeActionCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<EditOwnNodeAction>, EditOwnNodeActionCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableFamilySize>, FamilySizeCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableFathersRightsViolationCase>, FathersRightsViolationCaseCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<File>, FileCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableFirstAndBottomLevelSubdivision>, FirstAndBottomLevelSubdivisionCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableFirstLevelGlobalRegion>, FirstLevelGlobalRegionCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableFormalIntermediateLevelSubdivision>, FormalIntermediateLevelSubdivisionCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableHagueStatus>, HagueStatusCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableHouseBill>, HouseBillCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<EventuallyIdentifiableHouseTerm, HouseTermCreator>, HouseTermCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableInformalIntermediateLevelSubdivision>, InformalIntermediateLevelSubdivisionCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiableInterCountryRelation>, InterCountryRelationCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableInterCountryRelationType>, InterCountryRelationTypeCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiableInterOrganizationalRelation>, InterOrganizationalRelationCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableInterOrganizationalRelationType>, InterOrganizationalRelationTypeCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiableInterPersonalRelation>, InterPersonalRelationCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableInterPersonalRelationType>, InterPersonalRelationTypeCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<Location>, LocationCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<LocationLocatable>, LocationLocatableCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiableMultiQuestionPoll>, MultiQuestionPollCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<NodeFile>, NodeFileCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<NodeTerm>, NodeTermCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<BasicNodeType>, NodeTypeCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableOrganization>, OrganizationCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableOrganizationType>, OrganizationTypeCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiablePage>, PageCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiablePartyPoliticalEntityRelation>, PartyPoliticalEntityRelationCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiablePartyPoliticalEntityRelationType>, PartyPoliticalEntityRelationTypeCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiablePerson>, PersonCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiablePersonOrganizationRelation>, PersonOrganizationRelationCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiablePersonOrganizationRelationType>, PersonOrganizationRelationTypeCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<PollStatus>, PollStatusCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<ProfessionalRole>, ProfessionalRoleCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableProfession>, ProfessionCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<PublicationStatus>, PublicationStatusCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiableRepresentativeHouseBillAction>, RepresentativeHouseBillActionCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableSecondLevelGlobalRegion>, SecondLevelGlobalRegionCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableSenateBill>, SenateBillCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiableSenateTerm>, SenateTermCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiableSenatorSenateBillAction>, SenatorSenateBillActionCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<EventuallyIdentifiableSingleQuestionPoll>, SingleQuestionPollCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableSubdivisionType>, SubdivisionTypeCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<Subgroup>, SubgroupCreatorFactory>();
        services.AddTransient<IEntityCreatorFactory<SystemGroup>, SystemGroupCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<Tenant>, TenantCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<TenantNodeMenuItem>, TenantNodeMenuItemCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<TermHierarchy>, TermHierarchyCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableTypeOfAbuse>, TypeOfAbuseCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableTypeOfAbuser>, TypeOfAbuserCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableUnitedStatesCongressionalMeeting>, UnitedStatesCongressionalMeetingCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableUnitedStatesPoliticalPartyAffliation>, UnitedStatesPoliticalPartyAffliationCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<User>, UserCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<UserGroupUserRoleUser>, UserGroupUserRoleUserCreatorFactory>();
        services.AddTransient<INodeCreatorFactory<EventuallyIdentifiableVocabulary>, VocabularyCreatorFactory>();
        services.AddTransient<IInsertingEntityCreatorFactory<ViewNodeTypeListAction>, ViewNodeTypeListActionCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableWrongfulMedicationCase>, WrongfulMedicationCaseCreatorFactory>();
        services.AddTransient<INameableCreatorFactory<EventuallyIdentifiableWrongfulRemovalCase>, WrongfulRemovalCaseCreatorFactory>();
    }
}
